#!/bin/sh

#wait to start web and run from goahead code
. /etc/scripts/web_wait.sh
web_wait

#get params
. /etc/scripts/global.sh

LOG="logger -t kext"

start() {
 get_param
 $LOG "Start kernel extension config"
    #This is set only if wan or lan in bridge------------------------
    if [ "$wan_if" = "br0" ] || [ "$lan_if" = "br0" ]; then
	#----Fastpath for bridge enable------------------------------
	if [ "$bridgeFastpath" != "0" ]; then
	    sysctl -w net.ipv4.bridge_fastpath=1
	else
	    sysctl -w net.ipv4.bridge_fastpath=0
	fi
	#----Bridge STP----------------------------------------------
        stpEnabled=`nvram_get 2860 stpEnabled`
        if [ "$stpEnabled" = "1" ]; then
                brctl setfd br0 15
                brctl stp br0 1
        else
                brctl setfd br0 1
                brctl stp br0 0
        fi
    else
	    sysctl -w net.ipv4.bridge_fastpath=0
    fi
    #----In bridge and chillispot mode not fastnat and passth use---
    if [ "$opmode" != "0" ] && [ "$opmode" != "4" ]; then
	#select NAT offload mode
	if [ "$natFastpath" = "1" ]; then
	    hw_nat=0
	    sw_nat=1
	    $LOG "NAT Offload mode SW_FASTPATH"
	elif [ "$natFastpath" = "2" ]; then
	    hw_nat=1
	    sw_nat=0
	    $LOG "NAT Offload mode HW_NAT"
	elif [ "$natFastpath" = "3" ]; then
	    hw_nat=1
	    sw_nat=1
	    $LOG "NAT Offload mode COMPLEX"
	else
	    hw_nat=0
	    sw_nat=0
	    $LOG "NAT Offload mode DISABLE"
	fi
	#workarounds coex hw/sw nat and qos
	#mark correct work only if sw_nat=0
	#htb/esfq/imq correct work  only if hw_nat=0
	if [ "$QoSEnable" = "3" ] ; then
	    hw_nat=0
	    sw_nat=0
	    $LOG "IMQ shaper enabled - HW_NAT/SW_NAT Offload mode must be DISABLE"
	elif [ "$QoSEnable" = "1" ] || [ "$QoSEnable" = "2" ] || [ "$simple_qos" = "1" ]; then
	    hw_nat=0
	    $LOG "QoS or SimpleQoS enabled - HW_NAT Offload mode DISABLE"
	fi
	#configure nat offload
	if [ "$hw_nat" = "1" ]; then
	    modprobe -q hw_nat
	    #set HW_NAT default QOS Mode to WRR policy
	    hw_nat -L 0
	else
	    if [ -d /sys/module/hw_nat ]; then
		rmmod hw_nat > /dev/null 2>&1
	    fi
	fi
	#configure software nat offload
	if [ "$sw_nat" = "1" ]; then
	    sysctl -w net.ipv4.netfilter.ip_conntrack_fastnat=1
	else
	    sysctl -w net.ipv4.netfilter.ip_conntrack_fastnat=0
	fi
	#if any QoS/Shaper mode and hw_nat ebables need increase binding threshold
	if [ "$QoSEnable" != "" ] && [ "$QoSEnable" != "0" ]; then
	    hw_nat_bind=250
	fi
	#set hw_nat binding threshold if user set not default value
	if [ -d /sys/module/hw_nat ] && [ "$hw_nat" = "1" ] && [ "$hw_nat_bind" != "" ] && [ "$hw_nat_bind" != "30" ]; then
	    $LOG "Increase HW_NAT binding threshold to $hw_nat_bind."
	    hw_nat -N $hw_nat_bind > /dev/null 2>&1
	fi
	#pppoe and ip_v6 kernel mode relay.
	if [ -d /proc/pthrough ]; then
	    if [ "$pppoe_pass" = "1" ]; then
		echo "$lan_if,$wan_if" > /proc/pthrough/pppoe
	    else
		echo "null,null" > /proc/pthrough/pppoe
	    fi
	    if [ "$ipv6_pass" = "1" ]; then
		echo "$lan_if,$wan_if" > /proc/pthrough/ipv6
	    else
		echo "null,null" > /proc/pthrough/ipv6
	    fi
	fi
    else
	    $LOG "NAT Offload mode DISABLE"
	    sysctl -w net.ipv4.netfilter.ip_conntrack_fastnat=0
	    if [ -d /sys/module/hw_nat ]; then
		rmmod hw_nat > /dev/null 2>&1
	    fi
	    if [ -d /proc/pthrough ]; then
		echo "null,null" > /proc/pthrough/pppoe
		echo "null,null" > /proc/pthrough/ipv6
	    fi
    fi
    if [ "$vpnCpuLimit" != "" ] && [ "$vpnCpuLimit" != "0" ]; then
	    $LOG "Limit cpu load for PPP to $vpnCpuLimit ticks"
	    sysctl -w net.ipv4.ppp_cpu_load_limit=$vpnCpuLimit
    else
	    sysctl -w net.ipv4.ppp_cpu_load_limit=0
    fi
}

stop() {
    echo "" > /dev/null
}

get_param() {
    pppoe_pass=`nvram_get 2860 pppoe_pass`
    ipv6_pass=`nvram_get 2860 ipv6_pass`
    natFastpath=`nvram_get 2860 natFastpath`
    bridgeFastpath=`nvram_get 2860 bridgeFastpath`
    simple_qos=`nvram_get 2860 simple_qos`
    QoSEnable=`nvram_get 2860 QoSEnable`
    hw_nat_bind=`nvram_get 2860 hw_nat_bind`
    vpnCpuLimit=`nvram_get 2860 vpnCpuLimit`
}

case "$1" in
	start)
	    start
	    ;;

	stop)
	    stop
	    ;;

	restart)
	    stop
	    start
	    ;;

	*)
	    echo $"Usage: $0 {start|stop|restart}"
	    exit 1
esac
