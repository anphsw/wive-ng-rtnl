#!/bin/sh

# get params
. /etc/scripts/global.sh

LOG="logger -t lan"

start() {
  $LOG "Start network interfaces..."
    get_param
    getMacIf
    get_txqlen
    conf_double_tag
#-------------------PRECONFIG-----------------------------
    if [ "$brisup" = "0" ]; then
	if [ ! -d /proc/sys/net/ipv4/conf/br0 ]; then
	    $LOG "Add bridge in the system"
	    brctl addbr br0
        fi
	$LOG "BR0_MACADDR $LANMAC"
	ifconfig br0 hw ether "$LANMAC"
	$LOG "Up bridge interface"
	ip link set br0 up
    fi
    if [ "$lanisup" = "0" ]; then
	$LOG "ETH2_MACADDR $LANMAC"
	ifconfig eth2 hw ether "$LANMAC"
	ifconfig eth2 txqueuelen "$txqueuelen"
	$LOG "Up vlan root interface"
	ip link set eth2 up
    fi
    if [ "$opmode" = "1" ] || [ "$opmode" = "4" ]; then
	if [ ! -d /proc/sys/net/ipv4/conf/eth2.1 ] || [ ! -d /proc/sys/net/ipv4/conf/eth2.2 ]; then
    	    $LOG "Add vlans and config"
	    vconfig add eth2 1
	    vconfig add eth2 2
	    $LOG "ETH2.1_MACADDR $LANMAC"
	    ifconfig eth2.1 hw ether "$LANMAC"
	    $LOG "ETH2.2_MACADDR $WANMAC"
	    ifconfig eth2.2 hw ether "$WANMAC"
	fi

	# eth2.1 always up
	ip link set eth2.1 up
    fi

    # flush ip from interfaces
    addr_flush

#-------------------CONFIG--------------------------------
    ip link set $lan_if down
    #-------------------LAN1----------------
    $LOG "Add LAN1 iface"
    if [ "$lan_ipaddr" != "" ]; then
	if [ "$lan_netmask" = "" ]; then
	    lan_netmask="255.0.0.0"
	fi
	ifconfig "$lan_if" "$lan_ipaddr" netmask "$lan_netmask" up
    else
	ifconfig "$lan_if" 0.0.0.0 up
    fi
    $LOG "Mode is $opmode, wan iface $wan_if, lan iface $lan_if, adress $lan_ipaddr"

     #-------------------LAN2----------------
    if [ "$Lan2Enabled" = "1" ]; then
	$LOG "Add LAN2 iface $lan2_if $lan2_ipaddr netmask $lan2_netmask"
        ifconfig "$lan2_if" "$lan2_ipaddr" netmask "$lan2_netmask"
    fi

    # configure switch at start
    if [ ! -f /var/run/goahead.pid ]; then
	setLanWan
    fi

}

stop() {
  $LOG "Stop network interfaces..."
    # first down bridge
    ip link set br0 down > /dev/null 2>&1
    dev=`grep eth < /proc/net/vlan/config | cut -d' ' -f 1`
    for i in $dev; do
	ip link set $i down > /dev/null 2>&1
	vconfig rem $i > /dev/null 2>&1
    done
    ip link set "$lan_if" down > /dev/null 2>&1
    ip link set "$lan2_if" down > /dev/null 2>&1
    # last delete bridge interface
    brctl delbr br0 > /dev/null 2>&1
}

get_param() {
    lan_ipaddr=`nvram_get 2860 lan_ipaddr`
    lan_netmask=`nvram_get 2860 lan_netmask`
    lan2_ipaddr=`nvram_get 2860 lan2_ipaddr`
    lan2_netmask=`nvram_get 2860 lan2_netmask`
    Lan2Enabled=`nvram_get 2860 Lan2Enabled`
    brisup=`ip link show br0 up | grep -c ""` > /dev/null 2>&1
    lanisup=`ip link show eth2 up | grep -c ""` > /dev/null 2>&1
}

addr_flush() {
    # drop adresses
    dev=`grep eth < /proc/net/vlan/config | cut -d' ' -f 1`
    for i in $dev; do
	ip addr flush dev $i > /dev/null 2>&1
	if [ -d /proc/sys/net/ipv6 ]; then
	    ip -6 addr flush dev $i > /dev/null 2>&1
	fi
    done
}

conf_double_tag() {
    if [ -f /proc/sys/net/ipv4/vlan_double_tag ]; then
	# raeth double tag enabled before eth2 up
	vlan_double_tag=`nvram_get 2860 vlan_double_tag`
	if [ "$vlan_double_tag" = "1" ]; then
	    $LOG "Double vlan tag enabled. HW_VLAN offload disabled."
    	    sysctl -w net.ipv4.vlan_double_tag=1
    	else
	    $LOG "Double vlan tag disabled. HW_VLAN offload enabled."
    	    sysctl -w net.ipv4.vlan_double_tag=0
	fi
    fi

}

case "$1" in
	start)
	    start
	    ;;

	stop)
	    stop
	    ;;

	restart)
	    stop
	    start
	    ;;

	*)
	    echo $"Usage: $0 {start|stop|restart}"
	    exit 1
esac
