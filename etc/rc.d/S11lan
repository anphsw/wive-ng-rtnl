#!/bin/sh

#get params
. /sbin/global.sh
. /sbin/config.sh

start() {
echo "Start network interfaces..."
 ip=`nvram_get 2860 lan_ipaddr`
 nm=`nvram_get 2860 lan_netmask`
 ip_2=`nvram_get 2860 lan2_ipaddr`
 nm_2=`nvram_get 2860 lan2_netmask`
 gw=`nvram_get 2860 wan_gateway`
 opmode=`nvram_get 2860 OperationMode`
 lan2enabled=`nvram_get 2860 Lan2Enabled`
 brset=`brctl show  | grep br0 -c`
 vlanisconfig=`ip link show | grep @ -c` > /dev/null 2>&1
 brisup=`ip link show br0 up | grep -c ""` > /dev/null 2>&1
 lanisup=`ip link show eth2 up | grep -c ""` > /dev/null 2>&1

#-------------------PRECONFIG-----------------------------
    if [ "$brset" = "0" ]; then
        echo "Add bridge in the system"
        brctl addbr br0
    fi
    if [ "$brisup" = "0" ]; then
	echo "Up bridge interface"
	ip link set br0 up
    fi
    if [ "$lanisup" = "0" ]; then
	echo "Up vlan root interface"
	ip link set eth2 up
	vlanisconfig=0
    fi
    if [ "$vlanisconfig" != "2" ]; then
        echo "Add vlans and config"
	vconfig add eth2 1
	vconfig add eth2 2
	set_vlan_map eth2.1
	set_vlan_map eth2.2
    fi

    MAC=`nvram_get WAN_MAC_ADDR | grep 00:0B:2B -c`
    CHECKMAC=`nvram_get CHECKMAC`
    #disable set mac to acorp wthen test
    if [ $MAC = "0" ] && [ $CHECKMAC = "YES" ]; then
    echo "First start MAC generate"
        macinc1=`cat /dev/urandom | hexdump | head -n 1 | cut -c10,10`
        macinc2=`cat /dev/urandom | hexdump | head -n 1 | cut -c10,10`
        macinc3=`cat /dev/urandom | hexdump | head -n 1 | cut -c10,10`
        macinc4=`cat /dev/urandom | hexdump | head -n 1 | cut -c10,10`
        macinc5=`cat /dev/urandom | hexdump | head -n 1 | cut -c10,10`

    echo "Set new mac!"
        WAN_MACADDR="00:0B:2B:""$macinc1""$macinc2"":""$macinc1""$macinc3"":""$macinc4""$macinc5"
        nvram_set WAN_MAC_ADDR "$WAN_MACADDR"
        MAC=$WAN_MACADDR
    else
	echo "Use current mac."
	MAC=`nvram_get WAN_MAC_ADDR`
    fi

    #set mac for wan
    echo WAN_MACADDR="$MAC"
    ifconfig eth2.2 hw ether $MAC

    #drop adresses
    ip addr flush dev eth2.1
    ip addr flush dev eth2.2
if [ $CONFIG_IPV6 != "" ] ; then
    ip -6 addr flush dev eth2.1
    ip -6 addr flush dev eth2.2
fi
    ip link set eth2.1 up
 
#-------------------CONFIG--------------------------------
  ip link set $lan_if down
 #-------------------LAN1----------------
 echo "Add LAN1 iface"
 if [ "$opmode" = "2" ]; then
    lan_if="eth2"
 fi
 if [ "$ip" != "" ]; then
    if [ "$nm" = "" ]; then
	nm="255.0.0.0"
    fi
    ifconfig $lan_if $ip netmask $nm up
 else
    ifconfig $lan_if 0.0.0.0 up	
 fi
 echo ">>>>> Mode is $opmode, wan iface $wan_if, lan iface $lan_if, adress $ip <<<<<"

 #-------------------LAN2----------------
 if [ "$lan2enabled" = "1" ]; then
 echo "Add LAN2 iface"
        if [ "$opmode" = "0" ] || [ "$opmode" = "1" ] || [ "$opmode" = "3" ]; then
                ifconfig "br0:9" "$ip_2" netmask "$nm_2"
                echo "ifconfig "br0:9" "$ip_2" netmask "$nm_2""
        elif [ "$opmode" = "2" ]; then
                ifconfig "eth2:9" "$ip_2" netmask "$nm_2"
                echo "ifconfig "eth2:9" "$ip_2" netmask "$nm_2""
        fi
 fi

 #-------------------DGW-----------------
 if [ "$opmode" != "0" ]; then
    if [ "$gw" != "" ] && [ "$gw" != "0.0.0.0" ]; then
	echo "Add default gateway in router mode via $gw"
	ip route replace default via $gw
	ip route replace 255.255.255.255 dev $lan_if
    fi 
 else
    echo "Add default gateway in bridge mode via br0"
    ip route replace default dev br0
    ip route replace 255.255.255.255 dev br0
 fi
}

stop() {
echo "Stop network interfaces..."
    ip link set eth2.2 down > /dev/null 2>&1
    ip link set eth2.1 down > /dev/null 2>&1
    vconfig rem eth2.1 > /dev/null 2>&1
    vconfig rem eth2.2 > /dev/null 2>&1
    ip link set br0 down > /dev/null 2>&1
    ip link set $lan_if down > /dev/null 2>&1
    ip link set "br0:9" down > /dev/null 2>&1
    ip link set "eth2:9" down > /dev/null 2>&1
    brctl delbr br0 > /dev/null 2>&1
}

set_vlan_map()
{
 if [ "$CONFIG_RAETH_QOS_PORT_BASED" = "y" ]; then
        echo "vlan priority tag => skb->priority mapping"
        echo "skb->priority => vlan priority tag mapping"
        num=0
        for i in `seq 0 7`; do
            vconfig set_ingress_map eth2.2 $num $num
            vconfig set_egress_map eth2.2 $num $num
            num=`expr $num + 1`
        done
 fi
}

case "$1" in
	start)
	    start
	    ;;

	stop)
	    stop
	    ;;

	restart)
	    stop
	    start
	    ;;

	*)
	    echo $"Usage: $0 {start|stop|restart}"
	    exit 1
esac
