#!/bin/sh

#get params
. /etc/scripts/global.sh

#include kernel config
. /etc/scripts/config.sh

#wait to start web and run from goahead code
web_wait

 LOG="echo IPTABLES: "

start() {
 $LOG "Starting IPTABLES: "
 get_param
#########################################DEFAULTRULES###################################
	#default filters
	$LOG "Set default filters"
	iptables -A INPUT $STATE_EST -j ACCEPT
###########################################IGMP-RULES#######################################
	#only eth2.2 WAN interface recived multicast
	if [ "$OperationMode" != "0" ]; then    
	    #INPUT needed by unpxy and igmpproxy
	    if [ "$igmpen" != "0" ] || [ "$UDPXY" != "0" ]; then
		$LOG "Set igmp input rules"
		iptables -A INPUT -p igmp -i $lan_if -j ACCEPT
	        iptables -A INPUT -d 224.0.0.0/4 -i eth2.2 -j ACCEPT
		iptables -A INPUT -s 224.0.0.0/4 -i eth2.2 -j ACCEPT
	    fi
	    #FORWARD rules needed only for igmpproxy.
	    if [ "$igmpen" != "0" ]; then
		$LOG "Set igmp forward rules"
		iptables -A FORWARD -d 224.0.0.0/4 -o $lan_if -j ACCEPT
		iptables -A FORWARD -s 224.0.0.0/4 -i $lan_if -j ACCEPT
	    fi
	fi

###########################################SERVICES#######################################
	$LOG "Service limit set"
        #add limit connection rules for local services
	iptables -N servicelimit > /dev/null 2>&1
        iptables -F servicelimit > /dev/null 2>&1
        iptables -A INPUT -j servicelimit > /dev/null 2>&1
	if [ "$RemoteManagement" != "0" ]; then
	    $LOG "web limit"
    	    iptables -A servicelimit -p tcp --dport 80 $CONNLIMIT 16 -j REJECT
	    if [ "$RemoteManagement" = "1" ]; then
		if [ "$OperationMode" != "0" ]; then
    		    iptables -A servicelimit -i $wan_if $STATE_NEW -p tcp --dport 80 -j DROP
    		    iptables -A servicelimit -i ppp+ $STATE_NEW -p tcp --dport 80 -j DROP
		fi
    		iptables -A servicelimit -i $lan_if $STATE_NEW -p tcp --dport 80 -j ACCEPT
	     if [ "$Lan2Enabled" = "1" ]; then
    		iptables -A servicelimit -i $lan2_if $STATE_NEW -p tcp --dport 80 -j ACCEPT
	     fi
	    elif [ "$RemoteManagement" = "2" ]; then
    		iptables -A servicelimit $STATE_NEW -p tcp --dport 80 -j ACCEPT
	    fi
	else	    
    	    iptables -A servicelimit $STATE_NEW -p tcp --dport 80 -j DROP
	fi
	if [ "$RemoteSSH" != "0" ]; then
	    $LOG "ssh limit"
    	    iptables -A servicelimit $STATE_NEW -p tcp --dport 22 $CONNLIMIT 4 -j REJECT
	    if [ "$RemoteSSH" = "1" ]; then
		if [ "$OperationMode" != "0" ]; then
    		    iptables -A servicelimit -i $wan_if $STATE_NEW -p tcp --dport 22 -j DROP
    		    iptables -A servicelimit -i ppp+ $STATE_NEW -p tcp --dport 22 -j DROP
		fi
    		iptables -A servicelimit -i $lan_if $STATE_NEW -p tcp --dport 22 -j ACCEPT
	     if [ "$Lan2Enabled" = "1" ]; then
    		iptables -A servicelimit -i $lan2_if $STATE_NEW -p tcp --dport 22 -j ACCEPT
	     fi
	    elif [ "$RemoteSSH" = "2" ]; then
    		iptables -A servicelimit $STATE_NEW -p tcp --dport 22 -j ACCEPT
	    fi
	else	    
    	    iptables -A servicelimit $STATE_NEW -p tcp --dport 22 -j DROP
	fi
	if [ "$UDPXY" != "0" ]; then
	    $LOG "udpxy limit"
    	    iptables -A servicelimit $STATE_NEW -p tcp --dport 81 $CONNLIMIT 8 -j REJECT
	    if [ "$UDPXY" = "1" ]; then
		if [ "$OperationMode" != "0" ]; then
    		    iptables -A servicelimit -i $wan_if $STATE_NEW -p tcp --dport 81 -j DROP
    		    iptables -A servicelimit -i ppp+ $STATE_NEW -p tcp --dport 81 -j DROP
		fi
    		iptables -A servicelimit -i $lan_if $STATE_NEW -p tcp --dport 81 -j ACCEPT
	     if [ "$Lan2Enabled" = "1" ]; then
    		iptables -A servicelimit -i $lan2_if $STATE_NEW -p tcp --dport 81 -j ACCEPT
	     fi
	    elif [ "$UDPXY" = "2" ]; then
    		iptables -A servicelimit $STATE_NEW -p tcp --dport 81 -j ACCEPT
	    fi	    
	else	    
    	    iptables -A servicelimit $STATE_NEW -p tcp --dport 81 -j DROP
	fi
	if [ "$SmbEnabled" = "1" ]; then
	    $LOG "samba"
	    iptables -A servicelimit -i $lan_if -p udp --dport 137:138 -j ACCEPT
	    iptables -A servicelimit -i $lan_if $STATE_NEW -p tcp --dport 139 -j ACCEPT
	else
	    iptables -A servicelimit -i $lan_if -p udp --dport 137:138 -j DROP
	    iptables -A servicelimit -i $lan_if $STATE_NEW -p tcp --dport 139 -j DROP
	fi
	if [ "$dnsPEnabled" = "1" ]; then
	    $LOG "dnsproxy"
	    iptables -A servicelimit -i $lan_if -p udp --dport 53 -j ACCEPT
	    iptables -A servicelimit -i $lan_if $STATE_NEW -p tcp --dport 53 -j ACCEPT
	else
	    iptables -A servicelimit -i $lan_if -p udp --dport 53 -j DROP
	    iptables -A servicelimit -i $lan_if $STATE_NEW -p tcp --dport 53 -j DROP
	fi
	if [ "$upnp" = "1" ] && [ "$OperationMode" != "0" ]; then
	    $LOG "upnp"
	    #not safe fix me later
	    iptables -A servicelimit -i $lan_if -p udp -m multiport --dport 1024:65535 -j ACCEPT
	    iptables -A servicelimit -i $lan_if $STATE_NEW -p tcp -m multiport --dport 1024:65535 -j ACCEPT
	fi
	if [ "$WANPingFilter" = "0" ]; then
	    if [ "$OperationMode" != "0" ]; then
    		$LOG "icmp limit Drop ping from wan $wan_if"
    		iptables -A servicelimit -i $wan_if -p icmp --icmp-type echo-request -j DROP
    		iptables -A servicelimit -i $wan_if -p icmp --icmp-type echo-reply -j DROP
    		iptables -A servicelimit -i ppp+ -p icmp --icmp-type echo-request -j DROP
    		iptables -A servicelimit -i ppp+ -p icmp --icmp-type echo-reply -j DROP
    		iptables -A servicelimit -i ppp+ -p icmp -j DROP
	    fi
	else
	    $LOG "Allow ping from wan $wan_if"
	fi
	iptables -A servicelimit -p icmp --icmp-type echo-request -m limit --limit 10/s -j RETURN
	iptables -A servicelimit -p icmp --icmp-type echo-request -j DROP
###########################################VPN-RULES##########################################
	if [ "$vpnEnabled" = "on"  ]; then
	    $LOG "Add vpnfilter rules"
	    if [ "$vpnType" = "1"  ]; then
		iptables -A servicelimit -p gre -j ACCEPT
		iptables -A servicelimit -p tcp --sport 1723 -j ACCEPT
	    elif [ "$vpnType" = "2"  ]; then
		iptables -A servicelimit -p udp --sport 500 -j ACCEPT
		iptables -A servicelimit -p udp --dport 500 -j ACCEPT
		iptables -A servicelimit -p udp --sport 1701 -j ACCEPT
		iptables -A servicelimit -p udp --dport 1701 -j ACCEPT
		iptables -A servicelimit -p udp --sport 4500 -j ACCEPT
		iptables -A servicelimit -p udp --dport 4500 -j ACCEPT
	    fi
	fi
###########################################FORWARD#######################################
	if [ "$OperationMode" != "0" ]; then
	    $LOG "Set forward rules"
            #enable forward for all interfaces
	    sysctl -w net.ipv4.ip_forward=1

	    #ipt_account need first rules in FORWARD
	    if [ "$ipt_account" = "1" ]; then
		$LOG "Start ipt_accounting"
		iptables -N ipaccount
		iptables -A FORWARD -j ipaccount
		iptables -A ipaccount -m account --aname mynetwork --aaddr "$lan_ip_acc"/"$lan_ip_prf" --ashort
		if [ "$Lan2Enabled" = "1" ]; then
		    iptables -A ipaccount -m account --aname mynetwork --aaddr "$lan2_ip_acc"/"$lan2_ip_prf" --ashort
		fi
		echo "show=src" > /proc/net/ipt_account/mynetwork
		echo "reset-on-read=no" > /proc/net/ipt_account/mynetwork
	    fi

	    #tune mss size for tranzit packets
	    iptables -t mangle -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu

	    if [ "$IPPortFilterEnable" = "1" ] && [ -f /etc/macipfilter ]; then    
		$LOG "Set macipport_filter rules"
		chmod 777 /etc/macipfilter
		/etc/macipfilter
		if [ "$DefaultFirewallPolicy" = "1" ]; then
		    $LOG "Default policy macipport_filter DROP"
		    iptables -t filter -p tcp $STATE_NEW -A macipport_filter -j DROP
		    iptables -t filter -p udp -A macipport_filter -j DROP
		else
		    iptables -t filter -p tcp $STATE_NEW -A macipport_filter -j ACCEPT
		    iptables -t filter -p udp -A macipport_filter -j ACCEPT
		fi
	    fi

	    if [ -f /etc/websfilter ]; then
        	$LOG "Add rules for content filters"
		modprobe -q xt_webstr
		chmod 777 /etc/websfilter
    		/etc/websfilter
	    fi

	    #try accept my packets
	    iptables -t filter -A FORWARD $STATE_EST -j ACCEPT

	    #enable forward only from local network to wan/ppp
	    iptables -A FORWARD -i $lan_if -s $lan_ip/$lan_nm -j ACCEPT
	    iptables -A FORWARD -o $wan_if -s $lan_ip/$lan_nm -j ACCEPT
	    iptables -A FORWARD -o ! $lan_if -s $lan_ip/$lan_nm -j ACCEPT
	    if [ "$OperationMode" = "4" ]; then
		iptables -A FORWARD -o $wan_if -s $chilli_net -j ACCEPT
	    fi
	    if [ "$OperationMode" = "4" ]; then
		#for ISP localnet alya dualacess
		iptables -t nat -A POSTROUTING -o eth2.2  -s $chilli_net -j MASQUERADE
	    fi
	    #second lan
	    if [ "$Lan2Enabled" = "1" ]; then
    		iptables -A FORWARD -o ! $lan_if -s $lan2_ipaddr/$lan2_netmask -j ACCEPT
	    fi
	fi
###########################################QOS-SIMPLE######################################
	if [ "$simple_qos" = "1" ] && [ "$OperationMode" != "0" ]; then
	    qos
	fi
###########################################NAT-NAPTM#######################################
	#masqrade for wan interfaces
	if [ "$natEnabled" = "1" ] || [ "$vpnNAT" != "off" ]; then
	    $LOG "Add masqrade rules"
	    if [ -f /etc/portforward ] && [ "$PortForwardEnable" = "1" ]; then
		$LOG "Add portforward rules"
		chmod 777 /etc/portforward
		/etc/portforward
	    fi
	    #######################DMZ##################################
	    if [ "$DMZEnable" = "1" ] && [ "$DMZIPAddress" != "" ]; then
		iptables -t nat -N DMZ
		iptables -t nat -A PREROUTING -j DMZ
		$LOG "DMZ enabled for $DMZIPAddress"
		iptables -t nat -A DMZ -j DNAT -i ! $lan_if -s ! $lan_ip/$lan_nm --to $DMZIPAddress
		iptables -A FORWARD -i ! $lan_if -d $DMZIPAddress -j ACCEPT
	    fi

	  if [ "$OperationMode" != "0" ] && [ "$natEnabled" = "1" ]; then
	    if [ "$vpnPurePPPOE" != "1" ]; then
		#for ISP localnet alya dualacess
    		iptables -t nat -A POSTROUTING -o eth2.2 -s $lan_ip/$lan_nm -j MASQUERADE
		if [ "$OperationMode" = "2" ]; then
		    #wireless ISP net dual dual acess
		    iptables -t nat -A POSTROUTING -o ra+ -s $lan_ip/$lan_nm -j MASQUERADE
		fi
		if [ "$CONFIG_RT2860V2_AP_APCLI" != "" ]; then
		    if [ "$OperationMode" = "3" ]; then
			iptables -t nat -A POSTROUTING -o apcli+ -s $lan_ip/$lan_nm -j MASQUERADE
		    fi
		fi
		if [ "$OperationMode" = "4" ]; then
		    #for ISP localnet alya dualacess
		    iptables -t nat -A POSTROUTING -o eth2.2 -s $chilli_net -j MASQUERADE
		fi
		#second lan
		if [ "$Lan2Enabled" = "1" ]; then
		    #for ISP localnet alya dualacess
    		    iptables -t nat -A POSTROUTING -o eth2.2  -s $lan2_ipaddr/$lan2_netmask -j MASQUERADE
		    if [ "$OperationMode" = "2" ]; then
			#wireless ISP net dual dual acess....gyyy
			iptables -t nat -A POSTROUTING -o ra+     -s $lan2_ipaddr/$lan2_netmask -j MASQUERADE
		    fi
		    if [ "$CONFIG_RT2860V2_AP_APCLI" != "" ]; then
			if [ "$OperationMode" = "3" ]; then
			    iptables -t nat -A POSTROUTING -o apcli+  -s $lan2_ipaddr/$lan2_netmask -j MASQUERADE
			fi
		    fi
		fi
	    fi
	 fi
	fi
###########################################UPNPRULES#######################################
        #rules for upnp
	if [ "$upnp" = "1" ] && [ "$OperationMode" != "0" ]; then
            iptables -t nat -N MINIUPNPD
            iptables -t nat -F MINIUPNPD
            iptables -t nat -A PREROUTING -i $wan_upnp_if -j MINIUPNPD
            iptables -t filter -N MINIUPNPD
            iptables -t filter -F MINIUPNPD
            iptables -t filter -A FORWARD -i $wan_upnp_if -j MINIUPNPD
        fi
############################################VPNRULES#######################################
	if [ -f /etc/ppp_firewall ] && [ "$vpnEnabled" = "on"  ]; then
	    $LOG "Call to add VPN netfilter rules"
	    /etc/ppp_firewall
	fi
############################################ENDRULES#######################################
	$LOG "Iptables rules add OK..."
}


stop() {
 $LOG "Stopping IPTABLES: "
	iptables -F > /dev/null 2>&1
	iptables -t nat -F > /dev/null 2>&1
        iptables -t filter -F > /dev/null 2>&1
        iptables -t mangle -F > /dev/null 2>&1
        iptables -X > /dev/null 2>&1
        iptables -t nat -X > /dev/null 2>&1
        iptables -t filter -X > /dev/null 2>&1
        iptables -t mangle -X > /dev/null 2>&1

        iptables -t mangle -F PREROUTING > /dev/null 2>&1
        iptables -t mangle -F FORWARD > /dev/null 2>&1
        iptables -t mangle -F INPUT > /dev/null 2>&1
        iptables -t mangle -F OUTPUT > /dev/null 2>&1
        iptables -t mangle -F POSTROUTING > /dev/null 2>&1

        iptables -t nat -Z > /dev/null 2>&1
        iptables -t filter -Z > /dev/null 2>&1
        iptables -t mangle -Z > /dev/null 2>&1
	iptables -Z > /dev/null 2>&1

	#default actions
	iptables -P FORWARD DROP > /dev/null 2>&1
	iptables -P INPUT   DROP > /dev/null 2>&1
	iptables -P OUTPUT ACCEPT > /dev/null 2>&1

}

get_param() {
    #network config
    #first lan ip
    lan_ip=`nvram_get 2860 lan_ipaddr`
    lan_nm=`nvram_get 2860 lan_netmask`
    #second lan ip
    Lan2Enabled=`nvram_get 2860 Lan2Enabled`
    lan2_ipaddr=`nvram_get 2860 lan2_ipaddr`
    lan2_netmask=`nvram_get 2860 lan2_netmask`
    #mode and netfilter conf
    OperationMode=`nvram_get 2860 OperationMode`
    PortForwardEnable=`nvram_get 2860 PortForwardEnable`
    natEnabled=`nvram_get 2860 natEnabled`
    DMZEnable=`nvram_get 2860 DMZEnable`
    DMZIPAddress=`nvram_get 2860 DMZIPAddress`
    DefaultFirewallPolicy=`nvram_get 2860 DefaultFirewallPolicy`
    IPPortFilterEnable=`nvram_get 2860 IPPortFilterEnable`
    WANPingFilter=`nvram_get 2860 WANPingFilter`
    RemoteSSH=`nvram_get 2860 RemoteSSH`
    RemoteManagement=`nvram_get 2860 RemoteManagement`
    dnsPEnabled=`nvram_get 2860 dnsPEnabled`
    #ipt_acount info
    ipt_account=`nvram_get 2860 ipt_account`
    if [ "$ipt_account" = "1" ]; then
	lan_ip_acc=`ipcalc "$lan_ip" "$lan_nm" -n -s | cut -f 2- -d =`
	lan_ip_prf=`ipcalc "$lan_ip" "$lan_nm" -p -s | cut -f 2- -d =`
	if [ "$Lan2Enabled" = "1" ]; then
	    lan2_ip_acc=`ipcalc "$lan2_ipaddr" "$lan2_netmask" -n -s | cut -f 2- -d =`
	    lan2_ip_prf=`ipcalc "$lan2_ipaddr" "$lan2_netmask" -p -s | cut -f 2- -d =`
	fi
    fi
    #vpn configs
    vpnType=`nvram_get 2860 vpnType`
    vpnNAT=`nvram_get 2860 vpnNAT`
    #all needed variable
    upnp=`nvram_get 2860 upnpEnabled`
    igmpen=`nvram_get 2860 igmpEnabled`
    UDPXY=`nvram_get 2860 UDPXYMode`
    SmbEnabled=`nvram_get 2860 SmbEnabled`
    chilli_net=`nvram_get 2860 chilli_net`
    vpnPurePPPOE=`nvram_get 2860 vpnPurePPPOE`
    natFastpath=`nvram_get 2860 natFastpath`
    simple_qos=`nvram_get 2860 simple_qos`
    #macros
    STATE_NEW="-m state --state NEW"
    STATE_EST="-m state --state ESTABLISHED,RELATED"
    CONNLIMIT="-m connlimit --connlimit-above"
}

qos()
{
    $LOG "Simple QoS Enable"
    modprobe -q ipt_TOS

    iptables -N simple_qos -t mangle > /dev/null 2>&1
    iptables -F simple_qos -t mangle > /dev/null 2>&1
    iptables -A OUTPUT -j simple_qos -t mangle > /dev/null 2>&1
    iptables -A PREROUTING -j simple_qos -t mangle > /dev/null 2>&1

    MIN_DEL="-j TOS --set-tos Minimize-Delay"
    MAX_THR="-j TOS --set-tos Maximize-Throughput"

    MIN_DEL_UDP_P="53 1720 5060"
    MIN_DEL_TCP_P="22 23 53 80 110 443 4190 1720 5060 5190:5193 5222:5223 5269:5270 8080"
    MAX_THR_TCP_P="20 25 21 8010"

	# increase queue length
	ifconfig $wan_if txqueuelen 1000
	ifconfig $lan_if txqueuelen 1000

	iptables -A simple_qos -t mangle -p icmp $MIN_DEL
	iptables -A simple_qos -t mangle -p igmp $MIN_DEL

	for port in $MIN_DEL_UDP_P
	do
	    iptables -A simple_qos -t mangle -p udp --dport $port $MIN_DEL
	done

	for port in $MIN_DEL_TCP_P
	do
	    iptables -A simple_qos -t mangle -p tcp --dport $port $MIN_DEL
	done

	for port in $MAX_THR_TCP_P
	do
	    iptables -A simple_qos -t mangle -p tcp --dport $port $MAX_THR
	done
 }

case "$1" in
        start)
            start
            ;;

        stop)
            stop
            ;;

        qos)
            qos
            ;;

        restart)
            stop
            start
            ;;

        *)
            echo $"Usage: $0 {start|stop|restart}"
            exit 1
esac
