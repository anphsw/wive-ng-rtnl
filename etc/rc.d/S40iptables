#!/bin/sh

#get params
. /sbin/global.sh

#wait to start web and run from goahead code
web_wait

start() {
 echo "Starting IPTABLES: "
 get_param
#########################################DEFAULTRULES###################################
	#default filters
        iptables -A INPUT -i lo+ -j ACCEPT
	iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

	iptables -t filter -N web_filter
	iptables -t filter -N macipport_filter
    	iptables -t filter -A FORWARD -j macipport_filter
	iptables -t filter -A FORWARD -j web_filter

###########################################SERVICES#######################################
	#rules for access services from wan (DROP)
	if [ "$RMG" = "0" ] && [ "$OperationMode" != "0" ]; then
	echo "Drop acess from wan $wan_if"
	    iptables -A INPUT -i $wan_if -p tcp -m state --state NEW -j DROP
    	    iptables -A INPUT -i $wan_if -p udp -j DROP
	    iptables -A INPUT -i ppp+ -p tcp -m state --state NEW -j DROP
    	    iptables -A INPUT -i ppp+ -p udp -j DROP
	else
	echo "Allow acess from wan $wan_if"
	    iptables -A INPUT -i $wan_if -m state --state NEW -j RETURN
    	    iptables -A INPUT -i $wan_if ! -p icmp -j RETURN
	    iptables -A INPUT -i ppp+ -m state --state NEW -j RETURN
    	    iptables -A INPUT -i ppp+ ! -p icmp -j RETURN
	fi

	#ping from wan
	if [ "$WANPingFilter" = "0" ] && [ "$OperationMode" != "0" ]; then
	echo "Drop ping from wan $wan_if"
    	    iptables -A INPUT -i $wan_if -p icmp -j DROP
    	    iptables -A INPUT -i ppp+ -p icmp -j DROP
	else
	echo "Allow ping from wan $wan_if"
    	    iptables -A INPUT -i $wan_if -p icmp -j RETURN
    	    iptables -A INPUT -i ppp+ -p icmp -j RETURN
	fi
    
	#enable services for local network
	iptables -A INPUT -i $lan_if -s $lan_ip/$nm -j ACCEPT
	if [ "$Lan2Enabled" = "1" ]; then
	    iptables -A INPUT -i $lan2_if -s $lan2_ipaddr/$lan2_netmask -j ACCEPT
	fi

        #add limit connection rules for local services
	iptables -N servicelimit
        iptables -F servicelimit
        iptables -A INPUT -j servicelimit

	#telnet ssh snmp limit
        iptables -A servicelimit -p tcp --dport 22 -m connlimit --connlimit-above 4 -j REJECT
	#web limit
        iptables -A servicelimit -p tcp --dport 80 -m connlimit --connlimit-above 8 -j REJECT
	#udpxy limit
        iptables -A servicelimit -p tcp --dport 81 -m connlimit --connlimit-above 8 -j REJECT
        #icmp limit
	iptables -A servicelimit -p icmp --icmp-type echo-request -m limit --limit 10/s -j RETURN
        iptables -A servicelimit -p icmp --icmp-type echo-request -j DROP

###########################################FORWARD#######################################
	if [ "$OperationMode" != "0" ]; then
            #enable forward for all interfaces
	    sysctl -w net.ipv4.ip_forward=1
	    #accept my packets
	    iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
	    #enable forward only from local network to wan/ppp
	    iptables -A FORWARD -i $lan_if -s $lan_ip/$nm -j ACCEPT
	    iptables -A FORWARD -o $wan_if -s $lan_ip/$nm -j ACCEPT
            iptables -A FORWARD -o ! $lan_if -s $lan_ip/$nm -j ACCEPT
	    #second lan
	    if [ "$Lan2Enabled" = "1" ]; then
        	iptables -A FORWARD -o ! $lan_if -s $lan2_ipaddr/$lan2_netmask -j ACCEPT
	    fi
	    #tune mss size for tranzit packets
	    iptables -t mangle -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
	fi

###########################################UPNPRULES#######################################
        #rules for upnp
	if [ "$upnp" = "1" ] && [ "$OperationMode" != "0" ]; then
            iptables -t nat -N MINIUPNPD
            iptables -t nat -F MINIUPNPD
            iptables -t nat -A PREROUTING -i $wan_upnp_if -j MINIUPNPD
            iptables -t filter -N MINIUPNPD
            iptables -t filter -F MINIUPNPD
            iptables -t filter -A FORWARD -i $wan_upnp_if -o ! $wan_ppp_if -j MINIUPNPD
        fi
        
###########################################NAT-NAPTM#######################################
	#masqrade for wan interfaces
	if [ "$NAT" = "1" ]  && [ "$OperationMode" != "0" ]; then
	echo "Add masqrade rules"
	    iptables -t nat -N port_forward
	    iptables -t nat -N DMZ
	    iptables -t nat -I PREROUTING 1 -j port_forward
	    iptables -t nat -I PREROUTING 2 -j DMZ

	    #for ISP localnet alya dualacess
    	    iptables -t nat -A POSTROUTING -o eth2.2  -s $lan_ip/$nm -j MASQUERADE
	    #wireless ISP net dual dual acess....gyyy
	    iptables -t nat -A POSTROUTING -o ra+     -s $lan_ip/$nm -j MASQUERADE
	    iptables -t nat -A POSTROUTING -o apcli+  -s $lan_ip/$nm -j MASQUERADE
	    
	    #second lan
	    if [ "$Lan2Enabled" = "1" ]; then
		#for ISP localnet alya dualacess
    		iptables -t nat -A POSTROUTING -o eth2.2  -s $lan2_ipaddr/$lan2_netmask -j MASQUERADE
		#wireless ISP net dual dual acess....gyyy
		iptables -t nat -A POSTROUTING -o ra+     -s $lan2_ipaddr/$lan2_netmask -j MASQUERADE
		iptables -t nat -A POSTROUTING -o apcli+  -s $lan2_ipaddr/$lan2_netmask -j MASQUERADE
	    fi
	fi

###########################################IGMP-RULES#######################################
	#only eth2.2 WAN interface recived multicast
	if [ "$OperationMode" != "0" ]; then    
	    #INPUT needed by unpxy and igmpproxy
	    if [ "$igmpen" = "1" ] || [ "$QOS" = "1" ]; then
		iptables -I INPUT -p igmp -i $lan_if -j ACCEPT
	        iptables -I INPUT -d 224.0.0.0/4 -i eth2.2 -j ACCEPT
		iptables -I INPUT -s 224.0.0.0/4 -i eth2.2 -j ACCEPT
	    fi
	    #FORWARD rules needed only for ignpproxy.
	    if [ "$igmpen" = "1" ]; then
		iptables -I FORWARD -d 224.0.0.0/4 -j ACCEPT
		iptables -I FORWARD -s 224.0.0.0/4 -j ACCEPT
	    fi
	fi
###########################################VPN-RULES##########################################
	if [ "$vpnEnabled" = "on"  ]; then
	    if [ "$vpnType" = "1"  ]; then
		iptables -I INPUT -p gre -j ACCEPT
		iptables -I INPUT -p tcp --sport 1723 -j ACCEPT
		iptables -I INPUT -p tcp --dport 1723 -j ACCEPT
	    elif [ "$vpnType" = "2"  ];
		iptables -I INPUT -p udp --sport 500 -j ACCEPT
		iptables -I INPUT -p udp --dport 500 -j ACCEPT
		iptables -I INPUT -p udp --sport 1701 -j ACCEPT
		iptables -I INPUT -p udp --dport 1701 -j ACCEPT
		iptables -I INPUT -p udp --sport 4500 -j ACCEPT
		iptables -I INPUT -p udp --dport 4500 -j ACCEPT
	    fi
	fi
}


stop() {
 echo "Stopping IPTABLES: "
	iptables -F > /dev/null 2>&1
	iptables -t nat -F > /dev/null 2>&1
        iptables -t filter -F > /dev/null 2>&1
        iptables -t mangle -F > /dev/null 2>&1
        iptables -X > /dev/null 2>&1
        iptables -t nat -X > /dev/null 2>&1
        iptables -t filter -X > /dev/null 2>&1
        iptables -t mangle -X > /dev/null 2>&1

        iptables -t mangle -F PREROUTING > /dev/null 2>&1
        iptables -t mangle -F FORWARD > /dev/null 2>&1
        iptables -t mangle -F INPUT > /dev/null 2>&1
        iptables -t mangle -F OUTPUT > /dev/null 2>&1
        iptables -t mangle -F POSTROUTING > /dev/null 2>&1

        iptables -t nat -Z > /dev/null 2>&1
        iptables -t filter -Z > /dev/null 2>&1
        iptables -t mangle -Z > /dev/null 2>&1
	iptables -Z > /dev/null 2>&1

	#default actions
	iptables -P FORWARD DROP > /dev/null 2>&1
	iptables -P INPUT ACCEPT > /dev/null 2>&1
	iptables -P OUTPUT ACCEPT > /dev/null 2>&1

}

get_param() {
    lan_ip=`nvram_get 2860 lan_ipaddr`
    nm=`nvram_get 2860 lan_netmask`
    Lan2Enabled=`nvram_get 2860 Lan2Enabled`
    lan2_ipaddr=`nvram_get 2860 lan2_ipaddr`
    lan2_netmask=`nvram_get 2860 lan2_netmask`
    OperationMode=`nvram_get 2860 OperationMode`
    upnp=`nvram_get 2860 upnpEnabled`
    WANPingFilter=`nvram_get 2860 WANPingFilter`
    NAT=`nvram_get 2860 natEnabled`
    RMG=`nvram_get 2860 RemoteManagement`
    igmpen=`nvram_get 2860 igmpEnabled`
    QOS=`nvram_get 2860 WmmCapable`
    vpnEnabled=`nvram_get 2860 vpnEnabled`
    vpnType=`nvram_get 2860 vpnType`

    #change wan if
    if [ "$vpnEnabled" = "on"  ]; then
        wan_upnp_if="ppp0"
    else
        if [ "$wan_if" = "" ]; then
            wan_upnp_if="eth2.2"
        else
            wan_upnp_if=$wan_if
        fi
    fi

    #second lan
    lan2_if="br0:9"

    #get wan IP
    EXTIP="`LC_ALL=C /sbin/ifconfig $wan_ppp_if 2>&1 | grep 'inet addr' | awk '{print $2}' | sed -e 's/.*://'`"
    
    #check ppp
    PPPUP=`ip link show up | grep ppp0 -c` > /dev/null 2>&1
}
case "$1" in
        start)
            start
            ;;

        stop)
            stop
            ;;

        restart)
            stop
            start
            ;;

        *)
            echo $"Usage: $0 {start|stop|restart}"
            exit 1
esac
