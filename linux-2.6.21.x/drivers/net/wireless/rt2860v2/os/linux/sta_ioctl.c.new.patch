--- sta_ioctl.c	2010-12-03 18:04:34.378091000 +0600
+++ sta_ioctl.c.new	2010-12-03 18:29:27.000000000 +0600
@@ -1686,8 +1139,12 @@
         {
 			NdisZeroMemory(pSsidString, MAX_LEN_OF_SSID+1);
 			NdisMoveMemory(pSsidString, essid, data->length);
-			if (Set_SSID_Proc(pAdapter, pSsidString) == FALSE)
+			if (Set_SSID_Proc(pAdapter, pSsidString) == FALSE)
+			{
+				kfree(pSsidString);
 				return -EINVAL;
+			}
+			kfree(pSsidString);
 		}
 		else
 			return -ENOMEM;
@@ -1695,7 +1152,7 @@
 	else
     {
 		// ANY ssid
-		if (Set_SSID_Proc(pAdapter, "") == FALSE)
+		if (Set_SSID_Proc(pAd, "") == FALSE)
 			return -EINVAL;
     }
 	return 0;
@@ -1705,36 +1162,36 @@
 			 struct iw_request_info *info,
 			 struct iw_point *data, char *essid)
 {
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
-	if (pAdapter == NULL)
+	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
-		   So the net_dev->ml_priv will be NULL in 2rd open */
+		   So the net_dev->priv will be NULL in 2rd open */
 		return -ENETDOWN;
 	}
 
 	//check if the interface is down
-    if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     {
        	DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
         return -ENETDOWN;
 	}
 
 	data->flags = 1;		
-    if (MONITOR_ON(pAdapter))
+    if (MONITOR_ON(pAd))
     {
         data->length  = 0;
         return 0;
     }
 
-	if (OPSTATUS_TEST_FLAG(pAdapter, fOP_STATUS_MEDIA_STATE_CONNECTED))
+	if (OPSTATUS_TEST_FLAG(pAd, fOP_STATUS_MEDIA_STATE_CONNECTED))
 	{
 		DBGPRINT(RT_DEBUG_TRACE ,("MediaState is connected\n"));
-		data->length = pAdapter->CommonCfg.SsidLen;
-		memcpy(essid, pAdapter->CommonCfg.Ssid, pAdapter->CommonCfg.SsidLen);
+		data->length = pAd->CommonCfg.SsidLen;
+		memcpy(essid, pAd->CommonCfg.Ssid, pAd->CommonCfg.SsidLen);
 	}
 	else
 	{//the ANY ssid was specified
@@ -1750,12 +1207,12 @@
 			 struct iw_request_info *info,
 			 struct iw_point *data, char *nickname)
 {
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
     //check if the interface is down
-    if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     {
         DBGPRINT(RT_DEBUG_TRACE ,("INFO::Network is down!\n"));
         return -ENETDOWN;   
@@ -1764,8 +1221,9 @@
 	if (data->length > IW_ESSID_MAX_SIZE)
 		return -EINVAL;
 
-	memset(pAdapter->nickname, 0, IW_ESSID_MAX_SIZE + 1);
-	memcpy(pAdapter->nickname, nickname, data->length);
+	memset(pAd->nickname, 0, IW_ESSID_MAX_SIZE + 1);
+	memcpy(pAd->nickname, nickname, data->length);
+
 
 	return 0;
 }
@@ -1774,29 +1232,29 @@
 			 struct iw_request_info *info,
 			 struct iw_point *data, char *nickname)
 {
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
-	if (pAdapter == NULL)
+	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
-		   So the net_dev->ml_priv will be NULL in 2rd open */
+		   So the net_dev->priv will be NULL in 2rd open */
 		return -ENETDOWN;
 	}
 
 	//check if the interface is down
-    if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     {
        	DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
 		data->length = 0;
         return -ENETDOWN;
 	}
 
-	if (data->length > strlen((PSTRING) pAdapter->nickname) + 1)
-		data->length = strlen((PSTRING) pAdapter->nickname) + 1;
+	if (data->length > strlen((PSTRING) pAd->nickname) + 1)
+		data->length = strlen((PSTRING) pAd->nickname) + 1;
 	if (data->length > 0) {
-		memcpy(nickname, pAdapter->nickname, data->length-1);
+		memcpy(nickname, pAd->nickname, data->length-1);
 		nickname[data->length-1] = '\0';
 	}
 	return 0;
@@ -1806,13 +1264,13 @@
 		       struct iw_request_info *info,
 		       struct iw_param *rts, char *extra)
 {
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 	u16 val;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
     //check if the interface is down
-    if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     {
         DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
         return -ENETDOWN;   
@@ -1827,8 +1285,8 @@
 	else
 		val = rts->value;
 	
-	if (val != pAdapter->CommonCfg.RtsThreshold)
-		pAdapter->CommonCfg.RtsThreshold = val;
+	if (val != pAd->CommonCfg.RtsThreshold)
+		pAd->CommonCfg.RtsThreshold = val;
 
 	return 0;
 }
@@ -1837,25 +1295,25 @@
 		       struct iw_request_info *info,
 		       struct iw_param *rts, char *extra)
 {
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
-	if (pAdapter == NULL)
+	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
-		   So the net_dev->ml_priv will be NULL in 2rd open */
+		   So the net_dev->priv will be NULL in 2rd open */
 		return -ENETDOWN;
 	}
 
 	//check if the interface is down
-    	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     	{
       		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
         	return -ENETDOWN;   
     	}
 
-	rts->value = pAdapter->CommonCfg.RtsThreshold;
+	rts->value = pAd->CommonCfg.RtsThreshold;
 	rts->disabled = (rts->value == MAX_RTS_THRESHOLD);
 	rts->fixed = 1;
 
@@ -1866,28 +1324,28 @@
 			struct iw_request_info *info,
 			struct iw_param *frag, char *extra)
 {
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 	u16 val;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
 	//check if the interface is down
-    	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     	{
       		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
         	return -ENETDOWN;   
     	}
 
 	if (frag->disabled)
-	    val = MAX_FRAG_THRESHOLD;
-	else if (frag->value >= MIN_FRAG_THRESHOLD && frag->value <= MAX_FRAG_THRESHOLD)
-	    val = __cpu_to_le16(frag->value & ~0x1); /* even numbers only */
+		val = MAX_FRAG_THRESHOLD;
+	else if (frag->value >= MIN_FRAG_THRESHOLD || frag->value <= MAX_FRAG_THRESHOLD)
+        val = __cpu_to_le16(frag->value & ~0x1); /* even numbers only */
 	else if (frag->value == 0)
 	    val = MAX_FRAG_THRESHOLD;
 	else
 		return -EINVAL;
 
-	pAdapter->CommonCfg.FragmentThreshold = val;
+	pAd->CommonCfg.FragmentThreshold = val;
 	return 0;
 }
 
@@ -1895,25 +1353,25 @@
 			struct iw_request_info *info,
 			struct iw_param *frag, char *extra)
 {
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
-	if (pAdapter == NULL)
+	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
-		   So the net_dev->ml_priv will be NULL in 2rd open */
+		   So the net_dev->priv will be NULL in 2rd open */
 		return -ENETDOWN;
 	}
 
 	//check if the interface is down
-    	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     	{
       		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
         	return -ENETDOWN;   
     	}
 		
-	frag->value = pAdapter->CommonCfg.FragmentThreshold;
+	frag->value = pAd->CommonCfg.FragmentThreshold;
 	frag->disabled = (frag->value == MAX_FRAG_THRESHOLD);
 	frag->fixed = 1;
 
@@ -1926,12 +1384,12 @@
 			  struct iw_request_info *info,
 			  struct iw_point *erq, char *extra)
 {
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
 	//check if the interface is down
-    	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     	{
       		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
         	return -ENETDOWN;   
@@ -1940,25 +1398,23 @@
 	if ((erq->length == 0) &&
         (erq->flags & IW_ENCODE_DISABLED))
 	{
-		pAdapter->StaCfg.PairCipher = Ndis802_11WEPDisabled;
-		pAdapter->StaCfg.GroupCipher = Ndis802_11WEPDisabled;
-		pAdapter->StaCfg.WepStatus = Ndis802_11WEPDisabled;
-        pAdapter->StaCfg.OrigWepStatus = pAdapter->StaCfg.WepStatus;
-        pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
+		pAd->StaCfg.PairCipher = Ndis802_11WEPDisabled;
+		pAd->StaCfg.GroupCipher = Ndis802_11WEPDisabled;
+		pAd->StaCfg.WepStatus = Ndis802_11WEPDisabled;
+        pAd->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
         goto done;
 	}
 	else if (erq->flags & IW_ENCODE_RESTRICTED || erq->flags & IW_ENCODE_OPEN)
 	{
-	    //pAdapter->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
-		STA_PORT_SECURED(pAdapter);
-		pAdapter->StaCfg.PairCipher = Ndis802_11WEPEnabled;
-		pAdapter->StaCfg.GroupCipher = Ndis802_11WEPEnabled;
-		pAdapter->StaCfg.WepStatus = Ndis802_11WEPEnabled;
-        pAdapter->StaCfg.OrigWepStatus = pAdapter->StaCfg.WepStatus;
+	    //pAd->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
+		STA_PORT_SECURED(pAd);
+		pAd->StaCfg.PairCipher = Ndis802_11WEPEnabled;
+		pAd->StaCfg.GroupCipher = Ndis802_11WEPEnabled;
+		pAd->StaCfg.WepStatus = Ndis802_11WEPEnabled;
 		if (erq->flags & IW_ENCODE_RESTRICTED)
-			pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeShared;
+			pAd->StaCfg.AuthMode = Ndis802_11AuthModeShared;
     	else
-			pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
+			pAd->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
 	}
     
     if (erq->length > 0) 
@@ -1973,35 +1429,35 @@
 		if ((keyIdx < 0) || (keyIdx >= NR_WEP_KEYS))
         {
             DBGPRINT(RT_DEBUG_TRACE ,("==>rt_ioctl_siwencode::Wrong keyIdx=%d! Using default key instead (%d)\n", 
-                                        keyIdx, pAdapter->StaCfg.DefaultKeyId));
+                                        keyIdx, pAd->StaCfg.DefaultKeyId));
             
             //Using default key
-			keyIdx = pAdapter->StaCfg.DefaultKeyId;   
+			keyIdx = pAd->StaCfg.DefaultKeyId;   
         }
 		else
-			pAdapter->StaCfg.DefaultKeyId = keyIdx;
+			pAd->StaCfg.DefaultKeyId = keyIdx;
 
-        NdisZeroMemory(pAdapter->SharedKey[BSS0][keyIdx].Key,  16);
+        NdisZeroMemory(pAd->SharedKey[BSS0][keyIdx].Key,  16);
 		
 		if (erq->length == MAX_WEP_KEY_SIZE)
         {      
-			pAdapter->SharedKey[BSS0][keyIdx].KeyLen = MAX_WEP_KEY_SIZE;
-            pAdapter->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_WEP128;
+			pAd->SharedKey[BSS0][keyIdx].KeyLen = MAX_WEP_KEY_SIZE;
+            pAd->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_WEP128;
 		}
 		else if (erq->length == MIN_WEP_KEY_SIZE)
         {      
-            pAdapter->SharedKey[BSS0][keyIdx].KeyLen = MIN_WEP_KEY_SIZE;
-            pAdapter->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_WEP64;
+            pAd->SharedKey[BSS0][keyIdx].KeyLen = MIN_WEP_KEY_SIZE;
+            pAd->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_WEP64;
 		}
 		else
 			/* Disable the key */
-			pAdapter->SharedKey[BSS0][keyIdx].KeyLen = 0;
+			pAd->SharedKey[BSS0][keyIdx].KeyLen = 0;
 
 		/* Check if the key is not marked as invalid */
 		if(!(erq->flags & IW_ENCODE_NOKEY)) 
 		{
 			/* Copy the key in the driver */
-			NdisMoveMemory(pAdapter->SharedKey[BSS0][keyIdx].Key, extra, erq->length);
+			NdisMoveMemory(pAd->SharedKey[BSS0][keyIdx].Key, extra, erq->length);
         }
 	} 
     else 
@@ -2010,20 +1466,21 @@
 		int index = (erq->flags & IW_ENCODE_INDEX) - 1;
 		if ((index >= 0) && (index < 4)) 
         {      
-			pAdapter->StaCfg.DefaultKeyId = index;
+			pAd->StaCfg.DefaultKeyId = index;
             }
         else
 			/* Don't complain if only change the mode */
-		if (!(erq->flags & IW_ENCODE_MODE)) {
-    				return -EINVAL;
+		if(!erq->flags & IW_ENCODE_MODE) 
+		{
+				return -EINVAL;
 		}
 	}
 		
 done:
     DBGPRINT(RT_DEBUG_TRACE ,("==>rt_ioctl_siwencode::erq->flags=%x\n",erq->flags));
-	DBGPRINT(RT_DEBUG_TRACE ,("==>rt_ioctl_siwencode::AuthMode=%x\n",pAdapter->StaCfg.AuthMode));
-	DBGPRINT(RT_DEBUG_TRACE ,("==>rt_ioctl_siwencode::DefaultKeyId=%x, KeyLen = %d\n",pAdapter->StaCfg.DefaultKeyId , pAdapter->SharedKey[BSS0][pAdapter->StaCfg.DefaultKeyId].KeyLen));
-	DBGPRINT(RT_DEBUG_TRACE ,("==>rt_ioctl_siwencode::WepStatus=%x\n",pAdapter->StaCfg.WepStatus));
+	DBGPRINT(RT_DEBUG_TRACE ,("==>rt_ioctl_siwencode::AuthMode=%x\n",pAd->StaCfg.AuthMode));
+	DBGPRINT(RT_DEBUG_TRACE ,("==>rt_ioctl_siwencode::DefaultKeyId=%x, KeyLen = %d\n",pAd->StaCfg.DefaultKeyId , pAd->SharedKey[BSS0][pAd->StaCfg.DefaultKeyId].KeyLen));
+	DBGPRINT(RT_DEBUG_TRACE ,("==>rt_ioctl_siwencode::WepStatus=%x\n",pAd->StaCfg.WepStatus));
 	return 0;
 }
 
@@ -2033,19 +1490,19 @@
 			  struct iw_point *erq, char *key)
 {
 	int kid;
-	PRTMP_ADAPTER pAdapter = NULL;
+	PRTMP_ADAPTER pAd = NULL;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
-	if (pAdapter == NULL)
+	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
-		   So the net_dev->ml_priv will be NULL in 2rd open */
+		   So the net_dev->priv will be NULL in 2rd open */
 		return -ENETDOWN;
 	}
 
 	//check if the interface is down
-	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
 	{
   		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
     	return -ENETDOWN;   
@@ -2054,7 +1511,7 @@
 	kid = erq->flags & IW_ENCODE_INDEX;
 	DBGPRINT(RT_DEBUG_TRACE, ("===>rt_ioctl_giwencode %d\n", erq->flags & IW_ENCODE_INDEX));
 
-	if (pAdapter->StaCfg.WepStatus == Ndis802_11WEPDisabled)
+	if (pAd->StaCfg.WepStatus == Ndis802_11WEPDisabled)
 	{
 		erq->length = 0;
 		erq->flags = IW_ENCODE_DISABLED;
@@ -2063,12 +1520,12 @@
 	{
 		// copy wep key
 		erq->flags = kid ;			/* NB: base 1 */
-		if (erq->length > pAdapter->SharedKey[BSS0][kid-1].KeyLen)
-			erq->length = pAdapter->SharedKey[BSS0][kid-1].KeyLen;
-		memcpy(key, pAdapter->SharedKey[BSS0][kid-1].Key, erq->length);
-		//if ((kid == pAdapter->PortCfg.DefaultKeyId))
+		if (erq->length > pAd->SharedKey[BSS0][kid-1].KeyLen)
+			erq->length = pAd->SharedKey[BSS0][kid-1].KeyLen;
+		memcpy(key, pAd->SharedKey[BSS0][kid-1].Key, erq->length);
+		//if ((kid == pAd->PortCfg.DefaultKeyId))
 		//erq->flags |= IW_ENCODE_ENABLED;	/* XXX */
-		if (pAdapter->StaCfg.AuthMode == Ndis802_11AuthModeShared)
+		if (pAd->StaCfg.AuthMode == Ndis802_11AuthModeShared)
 			erq->flags |= IW_ENCODE_RESTRICTED;		/* XXX */
 		else
 			erq->flags |= IW_ENCODE_OPEN;		/* XXX */
@@ -2076,18 +1533,18 @@
 	}
 	else if (kid == 0)
 	{
-		if (pAdapter->StaCfg.AuthMode == Ndis802_11AuthModeShared)
+		if (pAd->StaCfg.AuthMode == Ndis802_11AuthModeShared)
 			erq->flags |= IW_ENCODE_RESTRICTED;		/* XXX */
 		else
 			erq->flags |= IW_ENCODE_OPEN;		/* XXX */
-		erq->length = pAdapter->SharedKey[BSS0][pAdapter->StaCfg.DefaultKeyId].KeyLen;
-		memcpy(key, pAdapter->SharedKey[BSS0][pAdapter->StaCfg.DefaultKeyId].Key, erq->length);
+		erq->length = pAd->SharedKey[BSS0][pAd->StaCfg.DefaultKeyId].KeyLen;
+		memcpy(key, pAd->SharedKey[BSS0][pAd->StaCfg.DefaultKeyId].Key, erq->length);
 		// copy default key ID
-		if (pAdapter->StaCfg.AuthMode == Ndis802_11AuthModeShared)
+		if (pAd->StaCfg.AuthMode == Ndis802_11AuthModeShared)
 			erq->flags |= IW_ENCODE_RESTRICTED;		/* XXX */
 		else
 			erq->flags |= IW_ENCODE_OPEN;		/* XXX */
-		erq->flags = pAdapter->StaCfg.DefaultKeyId + 1;			/* NB: base 1 */
+		erq->flags = pAd->StaCfg.DefaultKeyId + 1;			/* NB: base 1 */
 		erq->flags |= IW_ENCODE_ENABLED;	/* XXX */
 	}
 		
@@ -2095,47 +1552,32 @@
 
 }
 
-#ifndef LINUX
-static int strcasecmp(const char *s1, const char *s2)
-{
-	while ((*s1 == *s2) || (tolower(*s1) == tolower(*s2))) {
-		if (!*s1++) {
-			return 0;
-		}
-		++s2;
-	}
-
-	return (tolower(*s1) < tolower(*s2)) ? -1 : 1;
-}
-#endif
-
-static int
-rt_ioctl_setparam(struct net_device *dev, struct iw_request_info *info,
+int rt_ioctl_setparam(struct net_device *dev, struct iw_request_info *info,
 			 void *w, char *extra)
 {
-	PRTMP_ADAPTER pAdapter;
+	PRTMP_ADAPTER pAd;
 	POS_COOKIE pObj;
 	PSTRING this_char = extra;
 	PSTRING value;
 	int  Status=0;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
-	if (pAdapter == NULL)
+	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
-		   So the net_dev->ml_priv will be NULL in 2rd open */
+		   So the net_dev->priv will be NULL in 2rd open */
 		return -ENETDOWN;
 	}
 
-	pObj = (POS_COOKIE) pAdapter->OS_Cookie;
+	pObj = (POS_COOKIE) pAd->OS_Cookie;
 	{
 		pObj->ioctl_if_type = INT_MAIN;
         pObj->ioctl_if = MAIN_MBSSID;
 	}
 	
 	//check if the interface is down
-    	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+    	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     	{
       		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
 			return -ENETDOWN;
@@ -2145,420 +1587,24 @@
 		return -EINVAL;
 	                                                                                                                            
 	if ((value = rtstrchr(this_char, '=')) != NULL)                                                                             
-	    *value++ = 0;                                                                                                           
+	    *value++ = 0;
 	                                                                                                                            
 	if (!value && (strcmp(this_char, "SiteSurvey") != 0))                                                                                                      
 	    return -EINVAL;                                                                                                                  
-	else
+	else if (!value && (strcmp(this_char, "SiteSurvey") == 0))
 		goto SET_PROC;
 
 	// reject setting nothing besides ANY ssid(ssidLen=0)
     if (!*value && (strcmp(this_char, "SSID") != 0))
         return -EINVAL; 
-        
-SET_PROC:
-	for (PRTMP_PRIVATE_SET_PROC = RTMP_PRIVATE_SUPPORT_PROC; PRTMP_PRIVATE_SET_PROC->name; PRTMP_PRIVATE_SET_PROC++)            
-	{                                                                                                                           
-	    if (strcasecmp(this_char, PRTMP_PRIVATE_SET_PROC->name) == 0)                                                               
-	    {						                                                                                                
-	        if(!PRTMP_PRIVATE_SET_PROC->set_proc(pAdapter, value))                                                              
-	        {	//FALSE:Set private failed then return Invalid argument                                                         
-			    Status = -EINVAL;                                                                                               
-	        }                                                                                                                   
-		    break;	//Exit for loop.                                                                                        
-	    }                                                                                                                       
-	}                                                                                                                           
-	                                                                                                                            
-	if(PRTMP_PRIVATE_SET_PROC->name == NULL)                                                                                    
-	{  //Not found argument                                                                                                     
-	    Status = -EINVAL;                                                                                                       
-	    DBGPRINT(RT_DEBUG_TRACE, ("===>rt_ioctl_setparam:: (iwpriv) Not Support Set Command [%s=%s]\n", this_char, value));
-	}                                                                                                                           
-  
-    return Status;
-}
-
-#ifdef WSC_STA_SUPPORT
-BOOLEAN CheckWscAuthType(
-    IN USHORT authType)
-{
-	switch(authType)
-	{
-		case WSC_AUTHTYPE_OPEN:
-			break;
-		case WSC_AUTHTYPE_WPAPSK:
-			break;
-		case WSC_AUTHTYPE_SHARED:
-			break;
-		case WSC_AUTHTYPE_WPA:
-			break;
-		case WSC_AUTHTYPE_WPA2:
-			break;
-		case WSC_AUTHTYPE_WPA2PSK:
-			break;
-        default:
-            return FALSE;
-	}
-
-    return TRUE;
-}
-
-USHORT CheckWscEncryType(
-    IN USHORT encryType)
-{
-	switch(encryType)
-	{
-		case WSC_ENCRTYPE_NONE:
-			break;
-		case WSC_ENCRTYPE_WEP:
-			break;        
-		case WSC_ENCRTYPE_TKIP:
-			break;
-		case WSC_ENCRTYPE_AES:
-			break;
-        default:
-            return FALSE;
-	}
-
-    return TRUE;
-}
-
-static int
-rt_private_set_wsc_u32_item(struct net_device *dev, struct iw_request_info *info,
-			 u32 *uwrq, char *extra)
-{
-    PRTMP_ADAPTER pAdapter = NULL;
-    int  Status=0;
-    u32 subcmd = *uwrq;
-    PWSC_PROFILE    pWscProfile = NULL;
-   	u32 value = 0;
-	BOOLEAN validatePin = FALSE;
-
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
-	pWscProfile = &pAdapter->StaCfg.WscControl.WscProfile;
-
-	//check if the interface is down
-    if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
-    {
-       	DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
-        return -ENETDOWN;
-	}
-
-    if (pAdapter->StaCfg.BssType != BSS_INFRA)
-    {
-        DBGPRINT(RT_DEBUG_TRACE, ("%s - WPS only support in Infra mode.\n", __FUNCTION__));
-        return -EIO;
-    }
-    
-    switch(subcmd)
-    {
-        case WSC_CREDENTIAL_COUNT:
-            value = *(uwrq + 1);
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_CREDENTIAL_COUNT, value = %d\n", __FUNCTION__, value));
-            if (value >= 0 && value <= 8)
-            {
-                pWscProfile->ProfileCnt = value;
-            }
-            else
-                Status = -EINVAL;
-            break;        
-        case WSC_SET_DRIVER_CONNECT_BY_CREDENTIAL_IDX:
-            value = *(uwrq + 1);
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_SET_DRIVER_CONNECT_BY_CREDENTIAL_IDX, value = %d\n", __FUNCTION__, value));
-            if ((value >= 0 && value <= 7) &&
-                (value < pWscProfile->ProfileCnt))
-            {
-                WscWriteConfToPortCfg(pAdapter, &pAdapter->StaCfg.WscControl, &pAdapter->StaCfg.WscControl.WscProfile.Profile[value], TRUE);
-                pAdapter->MlmeAux.CurrReqIsFromNdis = TRUE;
-                LinkDown(pAdapter, TRUE);
-            }
-            else
-                Status = -EINVAL;
-            break;
-        case WSC_SET_DRIVER_AUTO_CONNECT:
-            value = *(uwrq + 1);
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_SET_DRIVER_AUTO_CONNECT, value = %d\n", __FUNCTION__, value));
-            if (value == 0 || value == 1)
-            {
-                pAdapter->StaCfg.WscControl.WscDriverAutoConnect = (value == 0) ? FALSE:TRUE;
-            }
-            else
-                Status = -EINVAL;
-            break;
-        case WSC_SET_CONF_MODE:
-            value = *(uwrq + 1);
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_SET_CONF_MODE, value = %d\n", __FUNCTION__, value));
-		if (value == 2)
-			value = 4;
-            switch(value)
-            {
-                case WSC_DISABLE:
-                    Set_WscConfMode_Proc(pAdapter, "0");
-                    break;
-                case WSC_ENROLLEE:
-                    Set_WscConfMode_Proc(pAdapter, "1");
-                    break;
-                case WSC_REGISTRAR:
-                    Set_WscConfMode_Proc(pAdapter, "2");
-                    break;
-                default:
-                    Status = -EINVAL;
-                    break;
-            }
-            break;
-        case WSC_SET_MODE:
-            value = *(uwrq + 1);
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_SET_MODE, value = %d\n", __FUNCTION__, value));
-            switch(value)
-            {
-                case WSC_PIN_MODE:
-                    Set_WscMode_Proc(pAdapter, "1");
-                    break;
-                case WSC_PBC_MODE:
-                    Set_WscMode_Proc(pAdapter, "2");
-                    break;
-                default:
-                    Status = -EINVAL;
-                    break;
-            }
-            break;
-        case WSC_SET_PIN:
-            value = *(uwrq + 1);
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_SET_PIN, value = %d\n", __FUNCTION__, value));
-
-			if (value < 10000)
-				validatePin = TRUE;
-			else
-				validatePin = ValidateChecksum(value);
 
-			
-        	if (validatePin)
-        	{
-        	    if (pAdapter->StaCfg.WscControl.WscRejectSamePinFromEnrollee && 
-                    (value == pAdapter->StaCfg.WscControl.WscLastPinFromEnrollee))
-                {
-                    DBGPRINT(RT_DEBUG_TRACE, ("PIN authentication or communication error occurs!!\n"
-                                              "Registrar does NOT accept the same PIN again!(PIN:%08u)\n", value));
-                    Status = -EINVAL;
-                }
-                else
-                {
-                	if (value < 10000)
-                	{
-						pAdapter->StaCfg.WscControl.WscPinCodeLen = 4;
-#ifdef CONFIG_ASUS_EXT
-					pAdapter->StaCfg.WscControl.WscEnrolleePinCodeLen = 4;
-#endif
-			}
-					else
-			{
-						pAdapter->StaCfg.WscControl.WscPinCodeLen = 8;
-#ifdef CONFIG_ASUS_EXT
-						pAdapter->StaCfg.WscControl.WscEnrolleePinCodeLen = 8;
-#endif
-			}
-    			pAdapter->StaCfg.WscControl.WscRejectSamePinFromEnrollee = FALSE;
-        	    	pAdapter->StaCfg.WscControl.WscPinCode = (UINT)value;
-#ifdef CONFIG_ASUS_EXT
-        	    	pAdapter->StaCfg.WscControl.WscEnrolleePinCode = pAdapter->StaCfg.WscControl.WscPinCode;
-#endif
-			pAdapter->StaCfg.WscControl.WscLastPinFromEnrollee = pAdapter->StaCfg.WscControl.WscPinCode;
-        	    	WscGetRegDataPIN(pAdapter, pAdapter->StaCfg.WscControl.WscPinCode, &pAdapter->StaCfg.WscControl);
-                }        	    
-            }
-            else
-                Status = -EINVAL;
-            break;
-        case WSC_START:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_START\n", __FUNCTION__));
-            Set_WscGetConf_Proc(pAdapter, "1");
-            break;
-        case WSC_STOP:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_STOP\n", __FUNCTION__));
-						
-            // Disassociate the link if WPS is working.
-        	if ( INFRA_ON(pAdapter) && 
-                 (pAdapter->StaCfg.WscControl.bWscTrigger == TRUE) && 
-                 (pAdapter->StaCfg.WscControl.WscConfMode != WSC_DISABLE) )
-        	{
-        		MLME_DISASSOC_REQ_STRUCT	DisReq;
-        										
-        		// Set to immediately send the media disconnect event
-        		pAdapter->MlmeAux.CurrReqIsFromNdis = TRUE;
-
-        		DBGPRINT(RT_DEBUG_TRACE, ("disassociate with current AP \n"));
-        		DisassocParmFill(pAdapter, &DisReq, pAdapter->CommonCfg.Bssid, REASON_DISASSOC_STA_LEAVING);
-        		MlmeEnqueue(pAdapter, ASSOC_STATE_MACHINE, MT2_MLME_DISASSOC_REQ, 
-        					sizeof(MLME_DISASSOC_REQ_STRUCT), &DisReq, 0);
-
-        		pAdapter->Mlme.CntlMachine.CurrState = CNTL_WAIT_DISASSOC;
-				RTMP_MLME_HANDLER(pAdapter);
-        	}
-
-        	// Turn off WSC state matchine
-        	WscStop(pAdapter,
-#ifdef CONFIG_AP_SUPPORT
-        			FALSE,
-#endif // CONFIG_AP_SUPPORT //
-        			&pAdapter->StaCfg.WscControl);
-            pAdapter->StaCfg.WscControl.WscConfMode = WSC_DISABLE;
-			BssTableDeleteEntry(&pAdapter->MlmeAux.SsidBssTab, pAdapter->MlmeAux.Bssid, pAdapter->MlmeAux.Channel);
-            break;
-        case WSC_GEN_PIN_CODE:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_GEN_PIN_CODE\n", __FUNCTION__));
-            Set_WscGenPinCode_Proc(pAdapter, "1");
-            break;
-
-		case WSC_AP_BAND:
-			value = *(uwrq + 1);
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_PBC_BAND, value = %d\n", __FUNCTION__, value));
-			if (value < PREFERRED_WPS_AP_PHY_TYPE_MAXIMUM)
-			{
-				pAdapter->StaCfg.WscControl.WpsApBand= value;
-			}
-			break;
-			
-        default:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - unknow subcmd = %d, value = %d\n", __FUNCTION__, subcmd, value));
-            break;
-    }
-    
+SET_PROC:
+	Status = RTMPSTAPrivIoctlSet(pAd, this_char, value);
+		
     return Status;
 }
 
-static int
-rt_private_set_wsc_string_item(struct net_device *dev, struct iw_request_info *info,
-		struct iw_point *dwrq, char *extra)
-{    
-    int  Status=0;
-    u32 subcmd = dwrq->flags;
-    u32 tmpProfileIndex = (u32)(extra[0] - 0x30);
-    u32 dataLen;
-    PRTMP_ADAPTER   pAdapter = NULL;
-    PWSC_PROFILE    pWscProfile = NULL;
-    USHORT  tmpAuth = 0, tmpEncr = 0;
-
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
-	pWscProfile = &pAdapter->StaCfg.WscControl.WscProfile;
-
-	//check if the interface is down
-    if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
-    {
-       	DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
-        return -ENETDOWN;
-	}
-
-    if (pAdapter->StaCfg.BssType != BSS_INFRA)
-    {
-        DBGPRINT(RT_DEBUG_TRACE, ("%s - WPS only support in Infra mode.\n", __FUNCTION__));
-        return -EIO;
-    }
-    
-    if ((subcmd != WSC_SET_SSID) && 
-        (tmpProfileIndex > 7 || tmpProfileIndex < 0))
-    {
-        DBGPRINT(RT_DEBUG_TRACE, ("%s - subcmd = %d, tmpProfileIndex = %d\n", __FUNCTION__, subcmd, tmpProfileIndex));
-        return -EINVAL;
-    }
 
-    if (subcmd != WSC_SET_SSID)
-    // extra: "1 input_string", dwrq->length includes '\0'. 3 is size of [index, blank and '\0']
-    dataLen = dwrq->length - 3;
-    else
-        dataLen = dwrq->length;
-    
-    switch(subcmd)
-    {
-        case WSC_CREDENTIAL_SSID:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_CREDENTIAL_SSID(%s)\n", __FUNCTION__, extra+2));
-            if (dataLen > 0 && dataLen <= NDIS_802_11_LENGTH_SSID)
-            {
-                pWscProfile->Profile[tmpProfileIndex].SSID.SsidLength = dataLen;
-                NdisZeroMemory(pWscProfile->Profile[tmpProfileIndex].SSID.Ssid, NDIS_802_11_LENGTH_SSID);
-                NdisMoveMemory(pWscProfile->Profile[tmpProfileIndex].SSID.Ssid, extra+2, dataLen);
-            }
-            else
-                Status = -E2BIG;
-            break;
-        case WSC_CREDENTIAL_AUTH_MODE:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_CREDENTIAL_AUTH_MODE(%s)\n", __FUNCTION__, extra+2));
-            if ((tmpAuth = WscGetAuthTypeFromStr(extra+2)) != 0)
-            {
-                pWscProfile->Profile[tmpProfileIndex].AuthType = tmpAuth;
-            }
-            else
-                Status = -EINVAL;
-            break;
-        case WSC_CREDENTIAL_ENCR_TYPE:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_CREDENTIAL_ENCR_TYPE(%s)\n", __FUNCTION__, extra+2));
-            if ((tmpEncr = WscGetEncrypTypeFromStr(extra+2)) != 0)
-            {
-                pWscProfile->Profile[tmpProfileIndex].EncrType = tmpEncr;
-            }
-            else
-                Status = -EINVAL;
-            break;
-        case WSC_CREDENTIAL_KEY_INDEX:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_CREDENTIAL_KEY_INDEX(%s)\n", __FUNCTION__, extra+2));
-            if ( *(extra+2) >= 0x31 && *(extra+2) <= 0x34)
-            {
-                pWscProfile->Profile[tmpProfileIndex].KeyIndex = (UCHAR)*(extra+2) - 0x30;
-            }
-            else
-                Status = -EINVAL;
-            break;
-        case WSC_CREDENTIAL_KEY:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_CREDENTIAL_KEY(%s)\n", __FUNCTION__, extra+2));
-            if ((dataLen >= 8 && dataLen <= 64) ||
-                (dataLen == 5 || dataLen == 10 || dataLen == 13 || dataLen == 26))
-            {
-                pWscProfile->Profile[tmpProfileIndex].KeyLength = dataLen;
-                NdisZeroMemory(pWscProfile->Profile[tmpProfileIndex].Key, 64);
-                NdisMoveMemory(pWscProfile->Profile[tmpProfileIndex].Key, extra+2, dataLen);
-            }
-            else
-                Status = -EINVAL;
-            break;
-        case WSC_CREDENTIAL_MAC:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_CREDENTIAL_MAC(%s)\n", __FUNCTION__, extra+2));
-            {
-                INT sscanf_rv = 0;
-                UINT tmp_val[6] = {0};
-                sscanf_rv = sscanf(extra+2, "%02x:%02x:%02x:%02x:%02x:%02x", 
-                                                          &tmp_val[0],
-                                                          &tmp_val[1],
-                                                          &tmp_val[2],
-                                                          &tmp_val[3],
-                                                          &tmp_val[4],
-                                                          &tmp_val[5]);
-                if ( sscanf_rv == 6)
-                {
-                    int ii;
-                    NdisZeroMemory(pWscProfile->Profile[tmpProfileIndex].MacAddr, 6);
-                    for (ii=0; ii<6; ii++)
-                        pWscProfile->Profile[tmpProfileIndex].MacAddr[ii] = (UCHAR)tmp_val[ii];
-                }
-                else
-                    Status = -EINVAL;
-            }            
-            break;
-        case WSC_SET_SSID:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - WSC_SET_SSID(%s)\n", __FUNCTION__, extra));
-            if (dataLen > 0 && dataLen <= NDIS_802_11_LENGTH_SSID)
-            {
-            	Set_WscSsid_Proc(pAdapter, (PSTRING) extra);
-            }
-            else
-                Status = -E2BIG;
-            break;
-        default:
-            DBGPRINT(RT_DEBUG_TRACE, ("%s - unknow subcmd = %d\n", __FUNCTION__, subcmd));
-            break;
-    }
-    
-    return Status;
-}
-#endif // WSC_STA_SUPPORT //
 
 static int
 rt_private_get_statistics(struct net_device *dev, struct iw_request_info *info,
@@ -2594,20 +1640,19 @@
 	else
 #endif // RALINK_ATE //
 	{
-    sprintf(extra+strlen(extra), "Tx success                      = %ld\n", (ULONG)pAd->WlanCounters.TransmittedFragmentCount.QuadPart);
-    sprintf(extra+strlen(extra), "Tx success without retry        = %ld\n", (ULONG)pAd->WlanCounters.TransmittedFragmentCount.QuadPart - (ULONG)pAd->WlanCounters.RetryCount.QuadPart);
+	    sprintf(extra+strlen(extra), "Tx success                      = %lu\n", (ULONG)pAd->WlanCounters.TransmittedFragmentCount.u.LowPart);
 	}
-    sprintf(extra+strlen(extra), "Tx success after retry          = %ld\n", (ULONG)pAd->WlanCounters.RetryCount.QuadPart);
-    sprintf(extra+strlen(extra), "Tx fail to Rcv ACK after retry  = %ld\n", (ULONG)pAd->WlanCounters.FailedCount.QuadPart);
-    sprintf(extra+strlen(extra), "RTS Success Rcv CTS             = %ld\n", (ULONG)pAd->WlanCounters.RTSSuccessCount.QuadPart);
-    sprintf(extra+strlen(extra), "RTS Fail Rcv CTS                = %ld\n", (ULONG)pAd->WlanCounters.RTSFailureCount.QuadPart);
-
-    sprintf(extra+strlen(extra), "Rx success                      = %ld\n", (ULONG)pAd->WlanCounters.ReceivedFragmentCount.QuadPart);
-    sprintf(extra+strlen(extra), "Rx with CRC                     = %ld\n", (ULONG)pAd->WlanCounters.FCSErrorCount.QuadPart);
-    sprintf(extra+strlen(extra), "Rx drop due to out of resource  = %ld\n", (ULONG)pAd->Counters8023.RxNoBuffer);
-    sprintf(extra+strlen(extra), "Rx duplicate frame              = %ld\n", (ULONG)pAd->WlanCounters.FrameDuplicateCount.QuadPart);
+    sprintf(extra+strlen(extra), "Tx retry count          		  = %lu\n", (ULONG)pAd->WlanCounters.RetryCount.u.LowPart);
+    sprintf(extra+strlen(extra), "Tx fail to Rcv ACK after retry  = %lu\n", (ULONG)pAd->WlanCounters.FailedCount.u.LowPart);
+    sprintf(extra+strlen(extra), "RTS Success Rcv CTS             = %lu\n", (ULONG)pAd->WlanCounters.RTSSuccessCount.u.LowPart);
+    sprintf(extra+strlen(extra), "RTS Fail Rcv CTS                = %lu\n", (ULONG)pAd->WlanCounters.RTSFailureCount.u.LowPart);
+
+    sprintf(extra+strlen(extra), "Rx success                      = %lu\n", (ULONG)pAd->WlanCounters.ReceivedFragmentCount.QuadPart);
+    sprintf(extra+strlen(extra), "Rx with CRC                     = %lu\n", (ULONG)pAd->WlanCounters.FCSErrorCount.u.LowPart);
+    sprintf(extra+strlen(extra), "Rx drop due to out of resource  = %lu\n", (ULONG)pAd->Counters8023.RxNoBuffer);
+    sprintf(extra+strlen(extra), "Rx duplicate frame              = %lu\n", (ULONG)pAd->WlanCounters.FrameDuplicateCount.u.LowPart);
 
-    sprintf(extra+strlen(extra), "False CCA (one second)          = %ld\n", (ULONG)pAd->RalinkCounters.OneSecFalseCCACnt);
+    sprintf(extra+strlen(extra), "False CCA (one second)          = %lu\n", (ULONG)pAd->RalinkCounters.OneSecFalseCCACnt);
 
 #ifdef RALINK_ATE
 	if (ATE_ON(pAd))
@@ -2626,117 +1671,17 @@
 	else
 #endif // RALINK_ATE //
 	{
-    	sprintf(extra+strlen(extra), "RSSI-A                          = %ld\n", (LONG)(pAd->StaCfg.RssiSample.LastRssi0 - pAd->BbpRssiToDbmDelta));
-        sprintf(extra+strlen(extra), "RSSI-B (if available)           = %ld\n", (LONG)(pAd->StaCfg.RssiSample.LastRssi1 - pAd->BbpRssiToDbmDelta));
-        sprintf(extra+strlen(extra), "RSSI-C (if available)           = %ld\n\n", (LONG)(pAd->StaCfg.RssiSample.LastRssi2 - pAd->BbpRssiToDbmDelta));
-	}   
+    		    	
+		sprintf(extra+strlen(extra), "RSSI-A                          = %ld\n", (LONG)(pAd->StaCfg.RssiSample.AvgRssi0 - pAd->BbpRssiToDbmDelta));
+		sprintf(extra+strlen(extra), "RSSI-B (if available)           = %ld\n", (LONG)(pAd->StaCfg.RssiSample.AvgRssi1 - pAd->BbpRssiToDbmDelta));
+        	sprintf(extra+strlen(extra), "RSSI-C (if available)           = %ld\n\n", (LONG)(pAd->StaCfg.RssiSample.AvgRssi2 - pAd->BbpRssiToDbmDelta));
+		sprintf(extra+strlen(extra), "SNR-A                          = %ld\n", (LONG)(pAd->StaCfg.RssiSample.AvgSnr0));
+        	sprintf(extra+strlen(extra), "SNR-B (if available)           = %ld\n\n", (LONG)(pAd->StaCfg.RssiSample.AvgSnr1));		}   
+#ifdef WPA_SUPPLICANT_SUPPORT
+    sprintf(extra+strlen(extra), "WpaSupplicantUP                 = %d\n\n", pAd->StaCfg.WpaSupplicantUP);
+#endif // WPA_SUPPLICANT_SUPPORT //
 
-
-#ifdef WSC_STA_SUPPORT
-{
-	char	mode_str[16]={0};
-	ULONG	wps_status, wps_state;
-    int     idx = 0;
-
-	wps_state = pAd->StaCfg.WscControl.WscState;
-	wps_status = pAd->StaCfg.WscControl.WscStatus;
-	
-	if (pAd->StaCfg.WscControl.WscMode == WSC_PIN_MODE)
-		sprintf(mode_str, "PIN -");
-	else
-		sprintf(mode_str, "PBC -");
 	
-	sprintf(extra+strlen(extra), "WPS Information(Driver Auto-Connect is %s):\n",
-                                                  pAd->StaCfg.WscControl.WscDriverAutoConnect ? "Enabled":"Disabled");
-	// display pin code
-	sprintf(extra+strlen(extra), "RT2860 Linux STA PinCode\t%08u\n", pAd->StaCfg.WscControl.WscEnrolleePinCode);
-	// display status
-	if ((wps_state == WSC_STATE_OFF) || (wps_status & 0xff00))
-	{
-		if (wps_status == STATUS_WSC_CONFIGURED)
-		{
-			sprintf(extra+strlen(extra), "WPS messages exchange successfully !!!\n");
-		}
-		else if ((wps_status == STATUS_WSC_NOTUSED))
-		{
-			sprintf(extra+strlen(extra), "WPS not used.\n");
-		}
-		else if(wps_status & 0xff00)	// error message
-		{
-			if (wps_status == STATUS_WSC_PBC_TOO_MANY_AP)
-				sprintf(extra+strlen(extra), "%s Too many PBC AP. Please wait... \n", mode_str);
-			else if (wps_status == STATUS_WSC_PBC_NO_AP)
-				sprintf(extra+strlen(extra), "%s No available PBC AP. Please wait... \n", mode_str);
-			else if (wps_status & 0x0100)
-				sprintf(extra+strlen(extra), "%s Proceed to get the Registrar profile. Please wait... \n", mode_str);
-			else	// status of eap failed
-				sprintf(extra+strlen(extra), "WPS didn't complete !!!\n");
-		}
-		else
-		{
-			// wrong state
-		}
-	}
-	else
-	{
-		sprintf(extra+strlen(extra), "%s WPS Proceed. Please wait... \n", mode_str);
-	}
-	sprintf(extra+strlen(extra), "\n");
-    sprintf(extra+strlen(extra), "WPS Profile Count               = %d\n", pAd->StaCfg.WscControl.WscProfile.ProfileCnt);
-    for (idx = 0; idx < pAd->StaCfg.WscControl.WscProfile.ProfileCnt ; idx++)
-    {
-        PWSC_CREDENTIAL pCredential = &pAd->StaCfg.WscControl.WscProfile.Profile[idx];
-
-        if (strlen(extra) + sizeof(WSC_CREDENTIAL) >= IW_PRIV_SIZE_MASK)
-        {
-            break;
-        }
-        
-        sprintf(extra+strlen(extra), "Profile[%d]:\n", idx);        
-        sprintf(extra+strlen(extra), "SSID                            = %s\n", pCredential->SSID.Ssid);
-        sprintf(extra+strlen(extra), "MAC                             = %02X:%02X:%02X:%02X:%02X:%02X\n", 
-                                                                           pCredential->MacAddr[0],
-                                                                           pCredential->MacAddr[1],
-                                                                           pCredential->MacAddr[2],
-                                                                           pCredential->MacAddr[3],
-                                                                           pCredential->MacAddr[4],
-                                                                           pCredential->MacAddr[5]);
-        sprintf(extra+strlen(extra), "AuthType                        = %s\n", WscGetAuthTypeStr(pCredential->AuthType));
-        sprintf(extra+strlen(extra), "EncrypType                      = %s\n", WscGetEncryTypeStr(pCredential->EncrType)); 
-        sprintf(extra+strlen(extra), "KeyIndex                        = %d\n", pCredential->KeyIndex);
-        if (pCredential->KeyLength != 0)
-        {
-            if (pCredential->AuthType & (WSC_AUTHTYPE_WPAPSK | WSC_AUTHTYPE_WPA2PSK))
-            {
-            if (pCredential->KeyLength < 64)
-                sprintf(extra+strlen(extra), "Key                             = %s\n", pCredential->Key);
-            else
-            {
-                char key_print[65] = {0};
-                NdisMoveMemory(key_print, pCredential->Key, 64);
-                sprintf(extra+strlen(extra), "Key                             = %s\n", key_print);
-            }
-        }
-            else if ((pCredential->AuthType == WSC_AUTHTYPE_OPEN) ||
-                     (pCredential->AuthType == WSC_AUTHTYPE_SHARED))
-            {
-                //check key string is ASCII or not
-                if (RTMPCheckStrPrintAble((PCHAR)pCredential->Key, (UCHAR)pCredential->KeyLength))
-                    sprintf(extra+strlen(extra), "Key                             = %s\n", pCredential->Key);
-                else
-                {
-                    int idx;
-                    sprintf(extra+strlen(extra), "Key                             = ");
-                    for (idx = 0; idx < pCredential->KeyLength; idx++)
-                        sprintf(extra+strlen(extra), "%02X", pCredential->Key[idx]);
-                    sprintf(extra+strlen(extra), "\n");
-                }
-            }
-        }
-    }
-    sprintf(extra+strlen(extra), "\n");
-}
-#endif // WSC_STA_SUPPORT //
         
     wrq->length = strlen(extra) + 1; // 1: size of '\0'
     DBGPRINT(RT_DEBUG_TRACE, ("<== rt_private_get_statistics, wrq->length = %d\n", wrq->length));
@@ -2786,7 +1731,7 @@
 			}
 			sprintf(pOutBuf, "%s\n\n", pOutBuf);
 		}
-        if (strlen(pOutBuf) > (IW_PRIV_SIZE_MASK - 30))
+        if (strlen(pOutBuf) > (IW_PRIV_SIZE_MASK - 100))
                 break;
 	}
 
@@ -2808,7 +1753,7 @@
 	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
-		   So the net_dev->ml_priv will be NULL in 2rd open */
+		   So the net_dev->priv will be NULL in 2rd open */
 		return -ENETDOWN;
 	}
 
@@ -2951,19 +1896,6 @@
 			wrq->length = strlen(extra) + 1; // 1: size of '\0'
 			break;
 
-#ifdef WMM_ACM_SUPPORT
-
-       /* case SHOW_ACM_BADNWIDTH:
-            AcmCmdBandwidthGuiDisplay(pAd, extra);
-            wrq->length = strlen(extra) + 1; // 1: size of '\0'            
-            break;*/
-        case SHOW_ACM_STREAM:
-            AcmCmdStreamGuiDisplay(pAd, extra);
-            wrq->length = strlen(extra) + 1; // 1: size of '\0'
-            printk("SHOW_ACM_STREAM - wrq->length = %d\n", wrq->length);
-            break;
-
-#endif
         default:
             DBGPRINT(RT_DEBUG_TRACE, ("%s - unknow subcmd = %d\n", __FUNCTION__, subcmd));
             break;
@@ -2980,7 +1912,8 @@
 {
 	PRTMP_ADAPTER   pAd = NULL;
 	struct iw_mlme *pMlme = (struct iw_mlme *)wrqu->data.pointer;
-	MLME_QUEUE_ELEM				MsgElem;
+//	MLME_QUEUE_ELEM				MsgElem;
+	MLME_QUEUE_ELEM				*pMsgElem = NULL;
 	MLME_DISASSOC_REQ_STRUCT	DisAssocReq;
 	MLME_DEAUTH_REQ_STRUCT      DeAuthReq;
 
@@ -2998,6 +1931,14 @@
 	if (pMlme == NULL)
 		return -EINVAL;
 
+	/* allocate memory */
+	os_alloc_mem(NULL, (UCHAR **)&pMsgElem, sizeof(MLME_QUEUE_ELEM));
+	if (pMsgElem == NULL)
+	{
+		DBGPRINT(RT_DEBUG_ERROR, ("%s: Allocate memory fail!!!\n", __FUNCTION__));
+		return -ENOMEM;
+	}
+
 	switch(pMlme->cmd)
 	{
 #ifdef IW_MLME_DEAUTH	
@@ -3005,9 +1946,9 @@
 			DBGPRINT(RT_DEBUG_TRACE, ("====> %s - IW_MLME_DEAUTH\n", __FUNCTION__));			                
 			COPY_MAC_ADDR(DeAuthReq.Addr, pAd->CommonCfg.Bssid);
 			DeAuthReq.Reason = pMlme->reason_code;
-			MsgElem.MsgLen = sizeof(MLME_DEAUTH_REQ_STRUCT);
-			NdisMoveMemory(MsgElem.Msg, &DeAuthReq, sizeof(MLME_DEAUTH_REQ_STRUCT));
-			MlmeDeauthReqAction(pAd, &MsgElem);
+			pMsgElem->MsgLen = sizeof(MLME_DEAUTH_REQ_STRUCT);
+			NdisMoveMemory(pMsgElem->Msg, &DeAuthReq, sizeof(MLME_DEAUTH_REQ_STRUCT));
+			MlmeDeauthReqAction(pAd, pMsgElem);
 			if (INFRA_ON(pAd))
 			{
 			    LinkDown(pAd, FALSE);
@@ -3021,13 +1962,13 @@
 			COPY_MAC_ADDR(DisAssocReq.Addr, pAd->CommonCfg.Bssid);
 			DisAssocReq.Reason =  pMlme->reason_code;
 
-			MsgElem.Machine = ASSOC_STATE_MACHINE;
-			MsgElem.MsgType = MT2_MLME_DISASSOC_REQ;
-			MsgElem.MsgLen = sizeof(MLME_DISASSOC_REQ_STRUCT);
-			NdisMoveMemory(MsgElem.Msg, &DisAssocReq, sizeof(MLME_DISASSOC_REQ_STRUCT));
+			pMsgElem->Machine = ASSOC_STATE_MACHINE;
+			pMsgElem->MsgType = MT2_MLME_DISASSOC_REQ;
+			pMsgElem->MsgLen = sizeof(MLME_DISASSOC_REQ_STRUCT);
+			NdisMoveMemory(pMsgElem->Msg, &DisAssocReq, sizeof(MLME_DISASSOC_REQ_STRUCT));
 
 			pAd->Mlme.CntlMachine.CurrState = CNTL_WAIT_OID_DISASSOC;
-			MlmeDisassocReqAction(pAd, &MsgElem);
+			MlmeDisassocReqAction(pAd, pMsgElem);
 			break;
 #endif // IW_MLME_DISASSOC //
 		default:
@@ -3035,22 +1976,27 @@
 			break;
 	}
 	
+	if (pMsgElem != NULL)
+		os_free_mem(NULL, pMsgElem);
+
 	return 0;
 }
 #endif // SIOCSIWMLME //
 
 #if WIRELESS_EXT > 17
+
+
 int rt_ioctl_siwauth(struct net_device *dev,
 			  struct iw_request_info *info,
 			  union iwreq_data *wrqu, char *extra)
 {
-	PRTMP_ADAPTER   pAdapter = NULL;
+	PRTMP_ADAPTER   pAd = NULL;
 	struct iw_param *param = &wrqu->param;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
     //check if the interface is down
-	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
 	{
   		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
     	return -ENETDOWN;   
@@ -3059,79 +2005,97 @@
     	case IW_AUTH_WPA_VERSION:
             if (param->value == IW_AUTH_WPA_VERSION_WPA)
             {            
-                pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeWPAPSK;
-				if (pAdapter->StaCfg.BssType == BSS_ADHOC)
-					pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeWPANone;
+                pAd->StaCfg.AuthMode = Ndis802_11AuthModeWPAPSK;
+				if (pAd->StaCfg.BssType == BSS_ADHOC)
+					pAd->StaCfg.AuthMode = Ndis802_11AuthModeWPANone;
             }
             else if (param->value == IW_AUTH_WPA_VERSION_WPA2)
-                pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeWPA2PSK;
+                pAd->StaCfg.AuthMode = Ndis802_11AuthModeWPA2PSK;
 			
             DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_AUTH_WPA_VERSION - param->value = %d!\n", __FUNCTION__, param->value));
             break;
     	case IW_AUTH_CIPHER_PAIRWISE:
             if (param->value == IW_AUTH_CIPHER_NONE)
             {
-                pAdapter->StaCfg.WepStatus = Ndis802_11WEPDisabled;
-                pAdapter->StaCfg.OrigWepStatus = pAdapter->StaCfg.WepStatus;
-                pAdapter->StaCfg.PairCipher = Ndis802_11WEPDisabled;
+                pAd->StaCfg.WepStatus = Ndis802_11WEPDisabled;
+                pAd->StaCfg.PairCipher = Ndis802_11WEPDisabled;
             }
             else if (param->value == IW_AUTH_CIPHER_WEP40 ||
                      param->value == IW_AUTH_CIPHER_WEP104)
             {
-                pAdapter->StaCfg.WepStatus = Ndis802_11WEPEnabled;
-                pAdapter->StaCfg.OrigWepStatus = pAdapter->StaCfg.WepStatus;
-                pAdapter->StaCfg.PairCipher = Ndis802_11WEPEnabled;
+                pAd->StaCfg.WepStatus = Ndis802_11WEPEnabled;
+                pAd->StaCfg.PairCipher = Ndis802_11WEPEnabled;
+#ifdef WPA_SUPPLICANT_SUPPORT                
+                pAd->StaCfg.IEEE8021X = FALSE;
+#endif // WPA_SUPPLICANT_SUPPORT //
             }
             else if (param->value == IW_AUTH_CIPHER_TKIP)
             {
-                pAdapter->StaCfg.WepStatus = Ndis802_11Encryption2Enabled;
-                pAdapter->StaCfg.OrigWepStatus = pAdapter->StaCfg.WepStatus;
-                pAdapter->StaCfg.PairCipher = Ndis802_11Encryption2Enabled;
+                pAd->StaCfg.WepStatus = Ndis802_11Encryption2Enabled;
+                pAd->StaCfg.PairCipher = Ndis802_11Encryption2Enabled;
             }
             else if (param->value == IW_AUTH_CIPHER_CCMP)
             {
-                pAdapter->StaCfg.WepStatus = Ndis802_11Encryption3Enabled;
-                pAdapter->StaCfg.OrigWepStatus = pAdapter->StaCfg.WepStatus;
-                pAdapter->StaCfg.PairCipher = Ndis802_11Encryption3Enabled;
+                pAd->StaCfg.WepStatus = Ndis802_11Encryption3Enabled;
+                pAd->StaCfg.PairCipher = Ndis802_11Encryption3Enabled;
             }
             DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_AUTH_CIPHER_PAIRWISE - param->value = %d!\n", __FUNCTION__, param->value));
             break;
     	case IW_AUTH_CIPHER_GROUP:
             if (param->value == IW_AUTH_CIPHER_NONE)
             {
-                pAdapter->StaCfg.GroupCipher = Ndis802_11WEPDisabled;
+                pAd->StaCfg.GroupCipher = Ndis802_11WEPDisabled;
             }
-            else if (param->value == IW_AUTH_CIPHER_WEP40 ||
-                     param->value == IW_AUTH_CIPHER_WEP104)
+            else if (param->value == IW_AUTH_CIPHER_WEP40)
+            {
+                pAd->StaCfg.GroupCipher = Ndis802_11GroupWEP40Enabled;
+            }
+			else if (param->value == IW_AUTH_CIPHER_WEP104)
             {
-                pAdapter->StaCfg.GroupCipher = Ndis802_11WEPEnabled;
+				pAd->StaCfg.GroupCipher = Ndis802_11GroupWEP104Enabled;
             }
             else if (param->value == IW_AUTH_CIPHER_TKIP)
             {
-                pAdapter->StaCfg.GroupCipher = Ndis802_11Encryption2Enabled;
+                pAd->StaCfg.GroupCipher = Ndis802_11Encryption2Enabled;
             }
             else if (param->value == IW_AUTH_CIPHER_CCMP)
             {
-                pAdapter->StaCfg.GroupCipher = Ndis802_11Encryption3Enabled;
+                pAd->StaCfg.GroupCipher = Ndis802_11Encryption3Enabled;
             }
             DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_AUTH_CIPHER_GROUP - param->value = %d!\n", __FUNCTION__, param->value));
             break;
     	case IW_AUTH_KEY_MGMT:
+#ifdef NATIVE_WPA_SUPPLICANT_SUPPORT
+			pAd->StaCfg.WpaSupplicantUP &= 0x7F;
+#endif // NATIVE_WPA_SUPPLICANT_SUPPORT //
             if (param->value == IW_AUTH_KEY_MGMT_802_1X)
             { 
-                if (pAdapter->StaCfg.AuthMode == Ndis802_11AuthModeWPAPSK)
+                if (pAd->StaCfg.AuthMode == Ndis802_11AuthModeWPAPSK)
                 {
-                    pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeWPA;
+                    pAd->StaCfg.AuthMode = Ndis802_11AuthModeWPA;
+#ifdef WPA_SUPPLICANT_SUPPORT                    
+                    pAd->StaCfg.IEEE8021X = FALSE;
+#endif // WPA_SUPPLICANT_SUPPORT //
                 }
-                else if (pAdapter->StaCfg.AuthMode == Ndis802_11AuthModeWPA2PSK)
+                else if (pAd->StaCfg.AuthMode == Ndis802_11AuthModeWPA2PSK)
                 {
-                    pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeWPA2;
+                    pAd->StaCfg.AuthMode = Ndis802_11AuthModeWPA2;
+#ifdef WPA_SUPPLICANT_SUPPORT
+                    pAd->StaCfg.IEEE8021X = FALSE;
+#endif // WPA_SUPPLICANT_SUPPORT //
                 }
+#ifdef WPA_SUPPLICANT_SUPPORT                
+                else
+                    // WEP 1x
+                    pAd->StaCfg.IEEE8021X = TRUE;
+#endif // WPA_SUPPLICANT_SUPPORT //                
             }
+#ifdef NATIVE_WPA_SUPPLICANT_SUPPORT
+#endif // NATIVE_WPA_SUPPLICANT_SUPPORT //
             else if (param->value == 0)
             {
-                //pAdapter->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
-				STA_PORT_SECURED(pAdapter);
+                //pAd->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
+				STA_PORT_SECURED(pAd);
             }
             DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_AUTH_KEY_MGMT - param->value = %d!\n", __FUNCTION__, param->value));
             break;
@@ -3140,35 +2104,30 @@
     	case IW_AUTH_PRIVACY_INVOKED:
             /*if (param->value == 0)
 			{
-                pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
-                pAdapter->StaCfg.WepStatus = Ndis802_11WEPDisabled;
-                pAdapter->StaCfg.OrigWepStatus = pAdapter->StaCfg.WepStatus;
-                pAdapter->StaCfg.PairCipher = Ndis802_11WEPDisabled;
-        	    pAdapter->StaCfg.GroupCipher = Ndis802_11WEPDisabled;
+                pAd->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
+                pAd->StaCfg.WepStatus = Ndis802_11WEPDisabled;
+                pAd->StaCfg.PairCipher = Ndis802_11WEPDisabled;
+        	    pAd->StaCfg.GroupCipher = Ndis802_11WEPDisabled;
             }*/            
             DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_AUTH_PRIVACY_INVOKED - param->value = %d!\n", __FUNCTION__, param->value));
     		break;
     	case IW_AUTH_DROP_UNENCRYPTED:
             if (param->value != 0)
-                pAdapter->StaCfg.PortSecured = WPA_802_1X_PORT_NOT_SECURED;
+                pAd->StaCfg.PortSecured = WPA_802_1X_PORT_NOT_SECURED;
 			else
 			{
-                //pAdapter->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
-				STA_PORT_SECURED(pAdapter);
+                //pAd->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
+				STA_PORT_SECURED(pAd);
 			}
-            DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_AUTH_WPA_VERSION - param->value = %d!\n", __FUNCTION__, param->value));
+            DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_AUTH_DROP_UNENCRYPTED - param->value = %d!\n", __FUNCTION__, param->value));
     		break;
     	case IW_AUTH_80211_AUTH_ALG: 
-			if (param->value & IW_AUTH_ALG_SHARED_KEY) 
-            {
-				pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeShared;
-			} 
-            else if (param->value & IW_AUTH_ALG_OPEN_SYSTEM) 
-            {
-				pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
-			} 
+			if (param->value == IW_AUTH_ALG_OPEN_SYSTEM)
+				pAd->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
+			else if (param->value == IW_AUTH_ALG_SHARED_KEY)
+				pAd->StaCfg.AuthMode = Ndis802_11AuthModeShared;
             else
-				return -EINVAL;
+				pAd->StaCfg.AuthMode = Ndis802_11AuthModeAutoSwitch;
             DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_AUTH_80211_AUTH_ALG - param->value = %d!\n", __FUNCTION__, param->value));
 			break;
     	case IW_AUTH_WPA_ENABLED:
@@ -3185,13 +2144,13 @@
 			       struct iw_request_info *info,
 			       union iwreq_data *wrqu, char *extra)
 {
-	PRTMP_ADAPTER   pAdapter = NULL;
+	PRTMP_ADAPTER   pAd = NULL;
 	struct iw_param *param = &wrqu->param;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 
     //check if the interface is down
-	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
     {
   		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
     	return -ENETDOWN;   
@@ -3199,15 +2158,15 @@
 
 	switch (param->flags & IW_AUTH_INDEX) {
 	case IW_AUTH_DROP_UNENCRYPTED:
-        param->value = (pAdapter->StaCfg.WepStatus == Ndis802_11WEPDisabled) ? 0 : 1;
+        param->value = (pAd->StaCfg.WepStatus == Ndis802_11WEPDisabled) ? 0 : 1;
 		break;
 
 	case IW_AUTH_80211_AUTH_ALG:
-        param->value = (pAdapter->StaCfg.AuthMode == Ndis802_11AuthModeShared) ? IW_AUTH_ALG_SHARED_KEY : IW_AUTH_ALG_OPEN_SYSTEM;
+        param->value = (pAd->StaCfg.AuthMode == Ndis802_11AuthModeShared) ? IW_AUTH_ALG_SHARED_KEY : IW_AUTH_ALG_OPEN_SYSTEM;
 		break;
 
 	case IW_AUTH_WPA_ENABLED:
-		param->value = (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA) ? 1 : 0;
+		param->value = (pAd->StaCfg.AuthMode >= Ndis802_11AuthModeWPA) ? 1 : 0;
 		break;
 
 	default:
@@ -3218,33 +2177,33 @@
 }
 
 void fnSetCipherKey(
-    IN  PRTMP_ADAPTER   pAdapter,
+    IN  PRTMP_ADAPTER   pAd,
     IN  INT             keyIdx,    
     IN  UCHAR           CipherAlg,
     IN  BOOLEAN         bGTK,
     IN  struct iw_encode_ext *ext)
 {
-    NdisZeroMemory(&pAdapter->SharedKey[BSS0][keyIdx], sizeof(CIPHER_KEY));
-    pAdapter->SharedKey[BSS0][keyIdx].KeyLen = LEN_TK;
-    NdisMoveMemory(pAdapter->SharedKey[BSS0][keyIdx].Key, ext->key, LEN_TK);
-    NdisMoveMemory(pAdapter->SharedKey[BSS0][keyIdx].TxMic, ext->key + LEN_TK, LEN_TKIP_MIC);
-    NdisMoveMemory(pAdapter->SharedKey[BSS0][keyIdx].RxMic, ext->key + LEN_TK + LEN_TKIP_MIC, LEN_TKIP_MIC);
-    pAdapter->SharedKey[BSS0][keyIdx].CipherAlg = CipherAlg;
+    NdisZeroMemory(&pAd->SharedKey[BSS0][keyIdx], sizeof(CIPHER_KEY));
+    pAd->SharedKey[BSS0][keyIdx].KeyLen = LEN_TK;
+    NdisMoveMemory(pAd->SharedKey[BSS0][keyIdx].Key, ext->key, LEN_TK);
+    NdisMoveMemory(pAd->SharedKey[BSS0][keyIdx].TxMic, ext->key + LEN_TK, LEN_TKIP_MIC);
+    NdisMoveMemory(pAd->SharedKey[BSS0][keyIdx].RxMic, ext->key + LEN_TK + LEN_TKIP_MIC, LEN_TKIP_MIC);
+    pAd->SharedKey[BSS0][keyIdx].CipherAlg = CipherAlg;
 
     // Update group key information to ASIC Shared Key Table	   
-	AsicAddSharedKeyEntry(pAdapter, 
+	AsicAddSharedKeyEntry(pAd, 
 						  BSS0, 
 						  keyIdx, 
-						  &pAdapter->SharedKey[BSS0][keyIdx]);
+						  &pAd->SharedKey[BSS0][keyIdx]);
 			
-	/* STA doesn't need to set WCID attribute for group key */
-        // Update ASIC WCID attribute table and IVEIV table
-        RTMPSetWcidSecurityInfo(pAdapter, 
-    							BSS0, 
-    							keyIdx, 
-    							pAdapter->SharedKey[BSS0][keyIdx].CipherAlg, 
-        						BSSID_WCID, 
-        						SHAREDKEYTABLE);
+	// Update ASIC WCID attribute table and IVEIV table
+	if (!bGTK)
+		RTMPSetWcidSecurityInfo(pAd, 
+	    						BSS0, 
+	    						keyIdx, 
+	    						pAd->SharedKey[BSS0][keyIdx].CipherAlg, 
+	       						BSSID_WCID, 
+	       						SHAREDKEYTABLE);
 }
 
 int rt_ioctl_siwencodeext(struct net_device *dev,
@@ -3252,15 +2211,15 @@
 			   union iwreq_data *wrqu,
 			   char *extra)
 			{
-	PRTMP_ADAPTER   pAdapter = NULL;
+	PRTMP_ADAPTER   pAd = NULL;
 	struct iw_point *encoding = &wrqu->encoding;
 	struct iw_encode_ext *ext = (struct iw_encode_ext *)extra;
     int keyIdx, alg = ext->alg;
 	
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);
+	GET_PAD_FROM_NET_DEV(pAd, dev);
 	
     //check if the interface is down
-	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
+	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
 	{
   		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
     	return -ENETDOWN;   
@@ -3270,11 +2229,11 @@
 	{
         keyIdx = (encoding->flags & IW_ENCODE_INDEX) - 1;
         // set BSSID wcid entry of the Pair-wise Key table as no-security mode
-	    AsicRemovePairwiseKeyEntry(pAdapter, BSSID_WCID);
-        pAdapter->SharedKey[BSS0][keyIdx].KeyLen = 0;
-		pAdapter->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_NONE;
-		AsicRemoveSharedKeyEntry(pAdapter, 0, (UCHAR)keyIdx);
-        NdisZeroMemory(&pAdapter->SharedKey[BSS0][keyIdx], sizeof(CIPHER_KEY));
+	    AsicRemovePairwiseKeyEntry(pAd, BSSID_WCID);
+        pAd->SharedKey[BSS0][keyIdx].KeyLen = 0;
+		pAd->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_NONE;
+		AsicRemoveSharedKeyEntry(pAd, 0, (UCHAR)keyIdx);
+        NdisZeroMemory(&pAd->SharedKey[BSS0][keyIdx], sizeof(CIPHER_KEY));
         DBGPRINT(RT_DEBUG_TRACE, ("%s::Remove all keys!(encoding->flags = %x)\n", __FUNCTION__, encoding->flags));
     }
 					else
@@ -3286,8 +2245,8 @@
 					
         if (ext->ext_flags & IW_ENCODE_EXT_SET_TX_KEY)
         {
-            pAdapter->StaCfg.DefaultKeyId = keyIdx;
-            DBGPRINT(RT_DEBUG_TRACE, ("%s::DefaultKeyId = %d\n", __FUNCTION__, pAdapter->StaCfg.DefaultKeyId));
+            pAd->StaCfg.DefaultKeyId = keyIdx;
+            DBGPRINT(RT_DEBUG_TRACE, ("%s::DefaultKeyId = %d\n", __FUNCTION__, pAd->StaCfg.DefaultKeyId));
         }
 
         switch (alg) {
@@ -3298,77 +2257,89 @@
                 DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_ENCODE_ALG_WEP - ext->key_len = %d, keyIdx = %d\n", __FUNCTION__, ext->key_len, keyIdx));
     			if (ext->key_len == MAX_WEP_KEY_SIZE)
                 {      
-        			pAdapter->SharedKey[BSS0][keyIdx].KeyLen = MAX_WEP_KEY_SIZE;
-                    pAdapter->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_WEP128;
+        			pAd->SharedKey[BSS0][keyIdx].KeyLen = MAX_WEP_KEY_SIZE;
+                    pAd->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_WEP128;
 				}
         		else if (ext->key_len == MIN_WEP_KEY_SIZE)
                 {      
-                    pAdapter->SharedKey[BSS0][keyIdx].KeyLen = MIN_WEP_KEY_SIZE;
-                    pAdapter->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_WEP64;
+                    pAd->SharedKey[BSS0][keyIdx].KeyLen = MIN_WEP_KEY_SIZE;
+                    pAd->SharedKey[BSS0][keyIdx].CipherAlg = CIPHER_WEP64;
 			}
         		else
                     return -EINVAL;
                                 
-                NdisZeroMemory(pAdapter->SharedKey[BSS0][keyIdx].Key,  16);
-			    NdisMoveMemory(pAdapter->SharedKey[BSS0][keyIdx].Key, ext->key, ext->key_len);
+                NdisZeroMemory(pAd->SharedKey[BSS0][keyIdx].Key,  16);
+			    NdisMoveMemory(pAd->SharedKey[BSS0][keyIdx].Key, ext->key, ext->key_len);
 
-				if (pAdapter->StaCfg.GroupCipher == Ndis802_11GroupWEP40Enabled ||					
-					pAdapter->StaCfg.GroupCipher == Ndis802_11GroupWEP104Enabled)				
+				if ((pAd->StaCfg.GroupCipher == Ndis802_11GroupWEP40Enabled) ||
+					(pAd->StaCfg.GroupCipher == Ndis802_11GroupWEP104Enabled))				
 				{										
 					// Set Group key material to Asic					
-					AsicAddSharedKeyEntry(pAdapter, BSS0, keyIdx, &pAdapter->SharedKey[BSS0][keyIdx]);										
+					AsicAddSharedKeyEntry(pAd, BSS0, keyIdx, &pAd->SharedKey[BSS0][keyIdx]);										
 
-					/* STA doesn't need to set WCID attribute for group key */
-					STA_PORT_SECURED(pAdapter);					    				
-					// Indicate Connected for GUI    				
-					pAdapter->IndicateMediaState = NdisMediaStateConnected;				
+					// Assign pairwise key info
+					RTMPSetWcidSecurityInfo(pAd,
+										 	BSS0, 
+										 	keyIdx, 
+										 	pAd->SharedKey[BSS0][keyIdx].CipherAlg, 												 
+										 	BSSID_WCID, 
+										 	SHAREDKEYTABLE);
+					STA_PORT_SECURED(pAd);					    				
 				}
     			break;
             case IW_ENCODE_ALG_TKIP:
                 DBGPRINT(RT_DEBUG_TRACE, ("%s::IW_ENCODE_ALG_TKIP - keyIdx = %d, ext->key_len = %d\n", __FUNCTION__, keyIdx, ext->key_len));
                 if (ext->key_len == 32)
                 {
-                    if (ext->ext_flags & IW_ENCODE_EXT_SET_TX_KEY)
-                    {
-                        fnSetCipherKey(pAdapter, keyIdx, CIPHER_TKIP, FALSE, ext);
-                        if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA2)
-                        {
-                            //pAdapter->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
-                            STA_PORT_SECURED(pAdapter);
-                            pAdapter->IndicateMediaState = NdisMediaStateConnected;	
-                        }
-		}
-                    else if (ext->ext_flags & IW_ENCODE_EXT_GROUP_KEY)
-                    {
-                        fnSetCipherKey(pAdapter, keyIdx, CIPHER_TKIP, TRUE, ext);
-		
-                        // set 802.1x port control
-            	        //pAdapter->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
-            	        STA_PORT_SECURED(pAdapter);
-            	        pAdapter->IndicateMediaState = NdisMediaStateConnected;	
-                    }
+                	if (pAd->StaCfg.AuthMode == Ndis802_11AuthModeWPANone)
+                	{
+                		RTMPZeroMemory(pAd->StaCfg.PMK, LEN_PMK);
+                		RTMPMoveMemory(pAd->StaCfg.PMK, ext->key, ext->key_len);
+                	}
+					else
+					{
+	                    if (ext->ext_flags & IW_ENCODE_EXT_SET_TX_KEY)
+	                    {
+	                        fnSetCipherKey(pAd, keyIdx, CIPHER_TKIP, FALSE, ext);
+	                        if (pAd->StaCfg.AuthMode >= Ndis802_11AuthModeWPA2)
+	                        {
+	                            STA_PORT_SECURED(pAd);
+	                        }
+						}
+	                    else if (ext->ext_flags & IW_ENCODE_EXT_GROUP_KEY)
+	                    {
+	                        fnSetCipherKey(pAd, keyIdx, CIPHER_TKIP, TRUE, ext);
+			
+	                        // set 802.1x port control
+	            	        STA_PORT_SECURED(pAd);
+	                    }
+					}
                 }
                 else
                     return -EINVAL;
                 break;
             case IW_ENCODE_ALG_CCMP:
-                if (ext->ext_flags & IW_ENCODE_EXT_SET_TX_KEY)
-		{
-                    fnSetCipherKey(pAdapter, keyIdx, CIPHER_AES, FALSE, ext);
-                    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA2)
-                    	//pAdapter->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
-                    	STA_PORT_SECURED(pAdapter);
-                    	pAdapter->IndicateMediaState = NdisMediaStateConnected;	
-                }
-                else if (ext->ext_flags & IW_ENCODE_EXT_GROUP_KEY)
-                {
-                    fnSetCipherKey(pAdapter, keyIdx, CIPHER_AES, TRUE, ext);
-                    
-                    // set 802.1x port control
-        	        //pAdapter->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
-        	        STA_PORT_SECURED(pAdapter);
-        	        pAdapter->IndicateMediaState = NdisMediaStateConnected;	
-                }
+				if (pAd->StaCfg.AuthMode == Ndis802_11AuthModeWPANone)
+            	{
+            		RTMPZeroMemory(pAd->StaCfg.PMK, LEN_PMK);
+            		RTMPMoveMemory(pAd->StaCfg.PMK, ext->key, ext->key_len);
+            	}
+				else
+				{
+	                if (ext->ext_flags & IW_ENCODE_EXT_SET_TX_KEY)
+					{
+	                    fnSetCipherKey(pAd, keyIdx, CIPHER_AES, FALSE, ext);
+	                    if (pAd->StaCfg.AuthMode >= Ndis802_11AuthModeWPA2)
+	                    	STA_PORT_SECURED(pAd);
+	                }
+	                else if (ext->ext_flags & IW_ENCODE_EXT_GROUP_KEY)
+	                {
+	                    fnSetCipherKey(pAd, keyIdx, CIPHER_AES, TRUE, ext);
+	                    
+	                    // set 802.1x port control
+	        	        STA_PORT_SECURED(pAd);
+	                }
+				}
                 break;
     		default:
     			return -EINVAL;
@@ -3486,24 +2457,38 @@
        	DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
         return -ENETDOWN;
 	}	
-	
-	DBGPRINT(RT_DEBUG_TRACE ,("===> rt_ioctl_siwgenie\n"));
-	if (wrqu->data.length > MAX_LEN_OF_RSNIE ||
-	    (wrqu->data.length && extra == NULL))
-		return -EINVAL;
-
-	if (wrqu->data.length) 
-	{
-		pAd->StaCfg.RSNIE_Len = wrqu->data.length;
-		NdisMoveMemory(&pAd->StaCfg.RSN_IE[0], extra, pAd->StaCfg.RSNIE_Len);
-	} 
-	else 
+#ifdef WPA_SUPPLICANT_SUPPORT
+	if (pAd->StaCfg.WpaSupplicantUP != WPA_SUPPLICANT_DISABLE)
 	{
-		pAd->StaCfg.RSNIE_Len = 0;
-		NdisZeroMemory(&pAd->StaCfg.RSN_IE[0], MAX_LEN_OF_RSNIE);
+		DBGPRINT(RT_DEBUG_TRACE ,("===> rt_ioctl_siwgenie\n"));
+		pAd->StaCfg.bRSN_IE_FromWpaSupplicant = FALSE;
+		if ((wrqu->data.length > 0) &&
+		    (extra == NULL))
+		{
+			return -EINVAL;
+		}
+		else if (wrqu->data.length) 
+		{
+			if (pAd->StaCfg.pWpaAssocIe)
+			{
+				kfree(pAd->StaCfg.pWpaAssocIe);
+				pAd->StaCfg.pWpaAssocIe = NULL;
+			}
+			pAd->StaCfg.pWpaAssocIe = kmalloc(wrqu->data.length, MEM_ALLOC_FLAG);
+			if (pAd->StaCfg.pWpaAssocIe)
+			{
+				pAd->StaCfg.WpaAssocIeLen = wrqu->data.length;
+				NdisMoveMemory(pAd->StaCfg.pWpaAssocIe, extra, pAd->StaCfg.WpaAssocIeLen);
+				pAd->StaCfg.bRSN_IE_FromWpaSupplicant = TRUE;
+			}
+			else
+				pAd->StaCfg.WpaAssocIeLen = 0;
+		}
+		return 0;
 	}
-	
-	return 0;
+	else
+#endif // WPA_SUPPLICANT_SUPPORT //
+	return -EOPNOTSUPP;
 }
 #endif // SIOCSIWGENIE //
 
@@ -3529,6 +2514,20 @@
 		return 0;
 	}
 
+#ifdef WPA_SUPPLICANT_SUPPORT
+#ifdef SIOCSIWGENIE
+	if ((pAd->StaCfg.WpaSupplicantUP & 0x7F) == WPA_SUPPLICANT_ENABLE &&
+		(pAd->StaCfg.WpaAssocIeLen > 0))
+	{
+		if (wrqu->data.length < pAd->StaCfg.WpaAssocIeLen)
+			return -E2BIG;
+
+		wrqu->data.length = pAd->StaCfg.WpaAssocIeLen;
+		memcpy(extra, pAd->StaCfg.pWpaAssocIe, pAd->StaCfg.WpaAssocIeLen);
+	}
+	else
+#endif // SIOCSIWGENIE //
+#endif // NATIVE_WPA_SUPPLICANT_SUPPORT //
 	{
 		UCHAR RSNIe = IE_WPA;
 		
@@ -3646,9 +2645,9 @@
 	UINT32				bbpValue;
 	BOOLEAN				bIsPrintAllBBP = FALSE;
 	INT					Status = 0;
-    PRTMP_ADAPTER       pAdapter = NULL;
+    PRTMP_ADAPTER       pAd = NULL;
 
-	GET_PAD_FROM_NET_DEV(pAdapter, dev);	
+	GET_PAD_FROM_NET_DEV(pAd, dev);	
 
 
 	memset(extra, 0x00, IW_PRIV_SIZE_MASK);
@@ -3674,16 +2673,16 @@
 				if (bbpId <= MAX_BBP_ID)
 				{                                                                                   
 #ifdef RALINK_ATE
-					if (ATE_ON(pAdapter))
+					if (ATE_ON(pAd))
 					{
-						ATE_BBP_IO_READ8_BY_REG_ID(pAdapter, bbpId, &regBBP);
+						ATE_BBP_IO_READ8_BY_REG_ID(pAd, bbpId, &regBBP);
 					}
 					else
 #endif // RALINK_ATE //
 					{
-					RTMP_BBP_IO_READ8_BY_REG_ID(pAdapter, bbpId, &regBBP);                          
+					RTMP_BBP_IO_READ8_BY_REG_ID(pAd, bbpId, &regBBP);                          
 					}
-					sprintf(extra+strlen(extra), "R%02d[0x%02X]:%02X\n", bbpId, bbpId*2, regBBP);
+					sprintf(extra+strlen(extra), "R%02d[0x%02X]:%02X\n", bbpId, bbpId, regBBP);
                     wrq->length = strlen(extra) + 1; // 1: size of '\0'
 					DBGPRINT(RT_DEBUG_TRACE, ("msg=%s\n", extra));
 				}                                                                                   
@@ -3706,20 +2705,20 @@
 				if (bbpId <= MAX_BBP_ID)
 				{                                                                                   
 #ifdef RALINK_ATE
-					if (ATE_ON(pAdapter))
+					if (ATE_ON(pAd))
 					{
-						ATE_BBP_IO_WRITE8_BY_REG_ID(pAdapter, bbpId, bbpValue);          
+						ATE_BBP_IO_WRITE8_BY_REG_ID(pAd, bbpId, bbpValue);          
 						/* read it back for showing */                                                      
-						ATE_BBP_IO_READ8_BY_REG_ID(pAdapter, bbpId, &regBBP);  
+						ATE_BBP_IO_READ8_BY_REG_ID(pAd, bbpId, &regBBP);  
 					}
 					else
 #endif // RALINK_ATE //
 					{
-					    RTMP_BBP_IO_WRITE8_BY_REG_ID(pAdapter, bbpId, bbpValue);          
+					    RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, bbpId, bbpValue);          
     					/* read it back for showing */                                                      
-    					RTMP_BBP_IO_READ8_BY_REG_ID(pAdapter, bbpId, &regBBP);                          
+    					RTMP_BBP_IO_READ8_BY_REG_ID(pAd, bbpId, &regBBP);                          
 			}
-					sprintf(extra+strlen(extra), "R%02d[0x%02X]:%02X\n", bbpId, bbpId*2, regBBP);
+					sprintf(extra+strlen(extra), "R%02d[0x%02X]:%02X\n", bbpId, bbpId, regBBP);
                     wrq->length = strlen(extra) + 1; // 1: size of '\0'
 					DBGPRINT(RT_DEBUG_TRACE, ("msg=%s\n", extra));                                       
 				}                                                                                   
@@ -3749,14 +2748,14 @@
 		    if (strlen(extra) >= (IW_PRIV_SIZE_MASK - 20))
                 break;
 #ifdef RALINK_ATE
-			if (ATE_ON(pAdapter))
+			if (ATE_ON(pAd))
 			{
-				ATE_BBP_IO_READ8_BY_REG_ID(pAdapter, bbpId, &regBBP); 
+				ATE_BBP_IO_READ8_BY_REG_ID(pAd, bbpId, &regBBP); 
 			}
 			else
 #endif // RALINK_ATE //
-			RTMP_BBP_IO_READ8_BY_REG_ID(pAdapter, bbpId, &regBBP);
-			sprintf(extra+strlen(extra), "R%02d[0x%02X]:%02X    ", bbpId, bbpId*2, regBBP);
+			RTMP_BBP_IO_READ8_BY_REG_ID(pAd, bbpId, &regBBP);
+			sprintf(extra+strlen(extra), "R%02d[0x%02X]:%02X    ", bbpId, bbpId, regBBP);
 			if (bbpId%5 == 4)
 			sprintf(extra+strlen(extra), "%03d = %02X\n", bbpId, regBBP);  // edit by johnli, change display format
 		}
@@ -3841,7 +2840,7 @@
 
 	GET_PAD_FROM_NET_DEV(pAd, dev);
 
-    rate_count = ARRAY_SIZE(ralinkrate);
+    rate_count = RT_RateSize/sizeof(__s32);
     //check if the interface is down
 	if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
 	{
@@ -3873,7 +2872,7 @@
         rate_index = 0;
     
     if (rate_index >= rate_count)
-        rate_index = rate_count - 1;
+        rate_index = rate_count-1;
 
     wrqu->bitrate.value = ralinkrate[rate_index] * 500000;
     wrqu->bitrate.disabled = 0;
@@ -3954,11 +2953,7 @@
 static const iw_handler rt_priv_handlers[] = {
 	(iw_handler) NULL, /* + 0x00 */
 	(iw_handler) NULL, /* + 0x01 */
-#ifndef CONFIG_AP_SUPPORT
 	(iw_handler) rt_ioctl_setparam, /* + 0x02 */
-#else
-	(iw_handler) NULL, /* + 0x02 */
-#endif // CONFIG_AP_SUPPORT //
 #ifdef DBG	
 	(iw_handler) rt_private_ioctl_bbp, /* + 0x03 */	
 #else
@@ -3980,17 +2975,9 @@
 	(iw_handler) rt_private_show, /* + 0x11 */
     (iw_handler) NULL, /* + 0x12 */
 	(iw_handler) NULL, /* + 0x13 */
-#ifdef WSC_STA_SUPPORT	
-	(iw_handler) rt_private_set_wsc_u32_item, /* + 0x14 */
-#else
     (iw_handler) NULL, /* + 0x14 */
-#endif // WSC_STA_SUPPORT //
 	(iw_handler) NULL, /* + 0x15 */
-#ifdef WSC_STA_SUPPORT	
-	(iw_handler) rt_private_set_wsc_string_item, /* + 0x16 */
-#else
     (iw_handler) NULL, /* + 0x16 */
-#endif // WSC_STA_SUPPORT //
 	(iw_handler) NULL, /* + 0x17 */
 	(iw_handler) NULL, /* + 0x18 */
 };
@@ -4042,6 +3029,12 @@
 #ifdef DOT11_N_SUPPORT
 	OID_SET_HT_PHYMODE					HT_PhyMode;	//11n ,kathy
 #endif // DOT11_N_SUPPORT //
+#ifdef WPA_SUPPLICANT_SUPPORT    
+    PNDIS_802_11_PMKID                  pPmkId = NULL;
+    BOOLEAN				                IEEE8021xState = FALSE;
+    BOOLEAN				                IEEE8021x_required_keys = FALSE;
+    UCHAR                               wpa_supplicant_enable = 0;
+#endif // WPA_SUPPLICANT_SUPPORT //
 
 #ifdef SNMP_SUPPORT	
 	TX_RTY_CFG_STRUC			tx_rty_cfg;
@@ -4051,11 +3044,6 @@
 
 
 
-#ifdef WSC_INCLUDED
-#ifdef WSC_LED_SUPPORT
-	UINT	WPSLedMode10 = 0;
-#endif // WSC_LED_SUPPORT //
-#endif // WSC_INCLUDED //
 
 #ifdef DOT11_N_SUPPORT
 	MaxPhyMode = PHY_11N_5G;
@@ -4100,19 +3088,10 @@
 			if (RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_RADIO_OFF))
 				break;
 				
-			if (RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_BSS_SCAN_IN_PROGRESS))
-			{
-                DBGPRINT(RT_DEBUG_TRACE, ("!!! Driver is scanning now !!!\n"));
-				pAd->StaCfg.bScanReqIsFromWebUI = TRUE;
-				Status = NDIS_STATUS_SUCCESS;
-                break;
-            }
-
 			if (pAd->RalinkCounters.LastOneSecTotalTxCount > 100)
             {
                 DBGPRINT(RT_DEBUG_TRACE, ("!!! Link UP, ignore this set::OID_802_11_BSSID_LIST_SCAN\n"));
 				Status = NDIS_STATUS_SUCCESS;
-				pAd->StaCfg.ScanCnt = 99;		// Prevent auto scan triggered by this OID
 				break;
             }
             
@@ -4125,42 +3104,12 @@
             {
                 DBGPRINT(RT_DEBUG_TRACE, ("!!! Link UP, Port Not Secured! ignore this set::OID_802_11_BSSID_LIST_SCAN\n"));
 				Status = NDIS_STATUS_SUCCESS;
-				pAd->StaCfg.ScanCnt = 99;		// Prevent auto scan triggered by this OID
 				break;
             }
 
-#ifdef WSC_STA_SUPPORT
-			if (pAd->StaCfg.WscControl.WscConfMode != WSC_DISABLE)			
-			{				
-				DBGPRINT(RT_DEBUG_TRACE, ("!!! WPS processing now! ignore this set::OID_802_11_BSSID_LIST_SCAN\n"));
-				Status = NDIS_STATUS_SUCCESS;
-				break;			
-			}
-#endif // WSC_STA_SUPPORT //
-
-            if (pAd->Mlme.CntlMachine.CurrState != CNTL_IDLE)
-            {
-                RTMP_MLME_RESET_STATE_MACHINE(pAd);
-                DBGPRINT(RT_DEBUG_TRACE, ("!!! MLME busy, reset MLME state machine !!!\n"));
-            }
-
-            // tell CNTL state machine to call NdisMSetInformationComplete() after completing
-            // this request, because this request is initiated by NDIS.
-            pAd->MlmeAux.CurrReqIsFromNdis = FALSE;
-            // Reset allowed scan retries
-            pAd->StaCfg.ScanCnt = 0;
-            pAd->StaCfg.LastScanTime = Now;
 
 			pAd->StaCfg.bScanReqIsFromWebUI = TRUE;
-            RTMP_SET_FLAG(pAd, fRTMP_ADAPTER_BSS_SCAN_IN_PROGRESS);
-            MlmeEnqueue(pAd, 
-                        MLME_CNTL_STATE_MACHINE, 
-                        OID_802_11_BSSID_LIST_SCAN, 
-                        0, 
-                        NULL, 0);
-
-            Status = NDIS_STATUS_SUCCESS;
-            StateMachineTouched = TRUE;
+			StaSiteSurvey(pAd, NULL, SCAN_ACTIVE);
             break;
         case OID_802_11_SSID:
             if (wrq->u.data.length != sizeof(NDIS_802_11_SSID))
@@ -4248,9 +3197,6 @@
 				// Prevent to connect AP again in STAMlmePeriodicExec
 				pAd->MlmeAux.AutoReconnectSsidLen= 32;
 
-                // Reset allowed scan retries
-				pAd->StaCfg.ScanCnt = 0;
-
                 if (pAd->Mlme.CntlMachine.CurrState != CNTL_IDLE)
                 {
                     RTMP_MLME_RESET_STATE_MACHINE(pAd);
@@ -4314,9 +3260,10 @@
                 Status = copy_from_user(&PhyMode, wrq->u.data.pointer, wrq->u.data.length);
 				if (PhyMode <= MaxPhyMode)
 				{
-                RTMPSetPhyMode(pAd, PhyMode);
+					pAd->CommonCfg.DesiredPhyMode = PhyMode;
+                	RTMPSetPhyMode(pAd, PhyMode);
 #ifdef DOT11_N_SUPPORT
-				SetCommonHT(pAd);
+					SetCommonHT(pAd);
 #endif // DOT11_N_SUPPORT //
 				}
                 DBGPRINT(RT_DEBUG_TRACE, ("Set::RT_OID_802_11_PHY_MODE (=%d)\n", PhyMode));
@@ -4341,7 +3288,7 @@
                     if (pAd->StaCfg.BssType == BSS_ADHOC)
                     {
                     	pAd->CommonCfg.PhyMode = StaConfig.AdhocMode;
-                    	RTMPSetPhyMode(pAd, PhyMode);
+                    	RTMPSetPhyMode(pAd, pAd->CommonCfg.PhyMode);
                         MlmeUpdateTxRates(pAd, FALSE, 0);
                         MakeIbssBeacon(pAd);           // re-build BEACON frame
                         AsicEnableIbssSync(pAd);   // copy to on-chip memory
@@ -4352,15 +3299,13 @@
                                         pAd->CommonCfg.UseBGProtection,
                                         pAd->CommonCfg.bUseShortSlotTime));
 
-				if (pAd->CommonCfg.PSPXlink)
+#ifdef XLINK_SUPPORT
+				if (pAd->StaCfg.PSPXlink)
 					Value = PSPXLINK;
 				else
+#endif // XLINK_SUPPORT //
 					Value = STANORMAL;
 				RTMP_IO_WRITE32(pAd, RX_FILTR_CFG, Value);
-				Value = 0;
-				RTMP_IO_READ32(pAd, MAC_SYS_CTRL, &Value);
-				Value &= (~0x80);
-				RTMP_IO_WRITE32(pAd, MAC_SYS_CTRL, Value);
             }
             break;
         case OID_802_11_DESIRED_RATES:
@@ -4421,48 +3366,17 @@
                         pAd->bConfigChanged = TRUE;
                     }
                     pAd->StaCfg.WepStatus     = WepStatus;
-                    pAd->StaCfg.OrigWepStatus = WepStatus;
                     pAd->StaCfg.PairCipher    = WepStatus;
                 	pAd->StaCfg.GroupCipher   = WepStatus;
 
-#ifdef DOT11_N_SUPPORT
-					if ((pAd->StaCfg.BssType == BSS_ADHOC) &&
-						(pAd->CommonCfg.HT_DisallowTKIP == TRUE))
+					if (pAd->StaCfg.BssType == BSS_ADHOC)
 					{
-						ULONG tmpPhymode = PHY_11BG_MIXED;
-						if ((pAd->StaCfg.WepStatus == Ndis802_11WEPEnabled) ||
-							(pAd->StaCfg.WepStatus == Ndis802_11Encryption2Enabled))
-						{
-							if (pAd->CommonCfg.PhyMode >= PHY_11ABGN_MIXED)
-							{				
-								switch(pAd->CommonCfg.PhyMode)
-								{
-									case PHY_11ABGN_MIXED:
-									case PHY_11AGN_MIXED:
-										tmpPhymode = PHY_11ABG_MIXED;
-										break;					
-									case PHY_11N_2_4G:
-									case PHY_11GN_MIXED:
-										tmpPhymode = PHY_11G;
-										break;
-									case PHY_11AN_MIXED:
-									case PHY_11N_5G:
-										tmpPhymode = PHY_11A;
-										break;
-									case PHY_11BGN_MIXED:
-										tmpPhymode = PHY_11BG_MIXED;
-										break;
-								}
-								RTMPSetPhyMode(pAd, tmpPhymode);
-							}
-						}
-						else
-						{
-							tmpPhymode = pAd->CommonCfg.DesiredPhyMode;
-							RTMPSetPhyMode(pAd, tmpPhymode);
-						}
-					}
+						// Build all corresponding channel information
+						RTMPSetPhyMode(pAd, pAd->CommonCfg.DesiredPhyMode);
+#ifdef DOT11_N_SUPPORT
+					SetCommonHT(pAd);
 #endif // DOT11_N_SUPPORT //
+					}
                 }
                 else
                 {
@@ -4562,16 +3476,22 @@
             {
                 Status = copy_from_user(&RtsThresh, wrq->u.data.pointer, wrq->u.data.length);
                 if (RtsThresh > MAX_RTS_THRESHOLD)
-                    Status  = -EINVAL;
-                else
+				{
+                    Status = -EINVAL;
+					RtsThresh = 0; /* avoid compile warning in printk() */
+                }
+				else
                     pAd->CommonCfg.RtsThreshold = (USHORT)RtsThresh;
             }
             DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_RTS_THRESHOLD (=%ld)\n",RtsThresh));
             break;
         case OID_802_11_FRAGMENTATION_THRESHOLD:
             if (wrq->u.data.length != sizeof(NDIS_802_11_FRAGMENTATION_THRESHOLD))
+			{
                 Status  = -EINVAL;
-            else
+				FragThresh = 0; /* avoid compile warning in printk() */
+            }
+			else
             {
                 Status = copy_from_user(&FragThresh, wrq->u.data.pointer, wrq->u.data.length);
                 pAd->CommonCfg.bUseZeroToDisableFragment = FALSE;
@@ -4592,8 +3512,11 @@
             break;
         case OID_802_11_POWER_MODE:
             if (wrq->u.data.length != sizeof(NDIS_802_11_POWER_MODE))
+			{
                 Status = -EINVAL;
-            else
+				PowerMode = 0; /* avoid compile warning in printk() */
+            }
+			else
             {
                 Status = copy_from_user(&PowerMode, wrq->u.data.pointer, wrq->u.data.length);
                 if (PowerMode == Ndis802_11PowerModeCAM) 
@@ -4926,22 +3849,6 @@
 			pAd->MlmeAux.CurrReqIsFromNdis	= TRUE;			
 			DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_DISASSOCIATE	\n"));
 
-#ifdef WSC_STA_SUPPORT
-#ifdef WSC_LED_SUPPORT
-			if (pAd->StaCfg.WscControl.bSkipWPSTurnOffLED == FALSE)
-			{
-				UCHAR WPSLEDStatus = LED_WPS_TURN_LED_OFF;
-				BOOLEAN Cancelled;
-
-#ifdef RTMP_MAC_PCI
-				RTMPSetLED(pAd, WPSLEDStatus);
-#endif // RTMP_MAC_PCI //
-
-				// Cancel the WPS LED timer.
-				RTMPCancelTimer(&pAd->StaCfg.WscControl.WscLEDTimer, &Cancelled);
-			}
-#endif // WSC_LED_SUPPORT //
-#endif // WSC_STA_SUPPORT //
 
 			if (INFRA_ON(pAd))
 			{
@@ -5027,7 +3934,7 @@
 				MAC_TABLE_ENTRY     *pEntry;
 
 				Status = copy_from_user(&BA, wrq->u.data.pointer, wrq->u.data.length);
-				if (BA.TID > 15)
+				if (BA.TID > (NUM_OF_TID-1))
 				{
 					Status = NDIS_STATUS_INVALID_DATA;
 					break;
@@ -5084,9 +3991,10 @@
 					Status = copy_from_user(pBA, wrq->u.data.pointer, wrq->u.data.length);
 					DBGPRINT(RT_DEBUG_TRACE, ("Set :: RT_OID_802_11_TEAR_IMME_BA(TID=%d, bAllTid=%d)\n", pBA->TID, pBA->bAllTid));
 					
-					if (!pBA->bAllTid && (pBA->TID > NUM_OF_TID))
+					if (!pBA->bAllTid && (pBA->TID > (NUM_OF_TID-1)))
 					{
 						Status = NDIS_STATUS_INVALID_DATA;
+						kfree(pBA);
 						break;
 					}
 					
@@ -5138,7 +4046,7 @@
             {
 		        KeyIdx = pWepKey->KeyIndex & 0x0fffffff;
                 // KeyIdx must be 0 ~ 3
-                if (KeyIdx > 4)
+                if (KeyIdx >= 4)
     			{
                     Status  = -EINVAL;
                     DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_ADD_WEP, Failed (KeyIdx must be smaller than 4)!!\n"));
@@ -5173,9 +4081,31 @@
                     // Default key for tx (shared key)
                     if (pWepKey->KeyIndex & 0x80000000)
                     {
+#ifdef WPA_SUPPLICANT_SUPPORT
+                        NdisZeroMemory(&pAd->StaCfg.DesireSharedKey[KeyIdx], sizeof(CIPHER_KEY));
+								
+                        // set key material and key length
+                        pAd->StaCfg.DesireSharedKey[KeyIdx].KeyLen = (UCHAR) pWepKey->KeyLength;
+                        NdisMoveMemory(pAd->StaCfg.DesireSharedKey[KeyIdx].Key, &pWepKey->KeyMaterial, pWepKey->KeyLength);
+                        pAd->StaCfg.DesireSharedKeyId = KeyIdx;
+                        pAd->StaCfg.DesireSharedKey[KeyIdx].CipherAlg = CipherAlg;
+#endif // WPA_SUPPLICANT_SUPPORT //                    
                         pAd->StaCfg.DefaultKeyId = (UCHAR) KeyIdx;
                     }
                     
+#ifdef WPA_SUPPLICANT_SUPPORT
+					if ((pAd->StaCfg.WpaSupplicantUP != WPA_SUPPLICANT_DISABLE) &&
+						(pAd->StaCfg.AuthMode >= Ndis802_11AuthModeWPA))
+					{
+						Key = pWepKey->KeyMaterial;
+						
+						// Set Group key material to Asic
+    					AsicAddSharedKeyEntry(pAd, BSS0, KeyIdx, &pAd->SharedKey[BSS0][KeyIdx]);
+						
+						STA_PORT_SECURED(pAd);
+					}
+                    else if (pAd->StaCfg.PortSecured == WPA_802_1X_PORT_SECURED)
+#endif // WPA_SUPPLICANT_SUPPORT
                     {
                         Key = pAd->SharedKey[BSS0][KeyIdx].Key;
 
@@ -5184,7 +4114,6 @@
                         
                         if (pWepKey->KeyIndex & 0x80000000)
                         {
-							/* STA doesn't need to set WCID attribute for group key */
     						// Assign pairwise key info
     						RTMPSetWcidSecurityInfo(pAd, 
 												 BSS0, 
@@ -5199,203 +4128,189 @@
             }
             kfree(pWepKey);
             break;
-
-#ifdef WSC_STA_SUPPORT
-		case RT_OID_WSC_EAPMSG:
-			{
-				RTMP_WSC_U2KMSG_HDR *msgHdr = NULL;
-				PUCHAR pUPnPMsg = NULL;
-				UINT msgLen = 0, Machine = 0, msgType = 0;
-				int retVal, senderID = 0;
-
-				DBGPRINT(RT_DEBUG_TRACE, ("WSC::RT_OID_WSC_EAPMSG, wrq->u.data.length=%d!\n", wrq->u.data.length));
-			
-				msgLen = wrq->u.data.length;				
-				if((pUPnPMsg = kzalloc(msgLen, GFP_KERNEL)) == NULL)
-					Status = -EINVAL;
-				else
-				{
-					retVal = copy_from_user(pUPnPMsg, wrq->u.data.pointer, msgLen);
-					
-					msgHdr = (RTMP_WSC_U2KMSG_HDR *)pUPnPMsg;
-					senderID = *((int *)&msgHdr->Addr2);
-					//assign the STATE_MACHINE type
-					{
-                        Machine = WSC_STATE_MACHINE;
-						msgType = WSC_EAPOL_UPNP_MSG;
-												
-						retVal = MlmeEnqueueForWsc(pAd, msgHdr->envID, senderID, Machine, msgType, msgLen, pUPnPMsg);
-						if((retVal == FALSE) && (msgHdr->envID != 0))
-						{
-							DBGPRINT(RT_DEBUG_TRACE, ("MlmeEnqueuForWsc return False and envID=0x%x!\n", msgHdr->envID));
-							Status = -EINVAL;
-						}
-					}
-
-					kfree(pUPnPMsg);
-				}
-				DBGPRINT(RT_DEBUG_TRACE, ("RT_OID_WSC_EAPMSG finished!\n"));
-			}
-			break;
-        case RT_OID_WSC_SET_PROFILE:
-            if (wrq->u.data.length != sizeof(WSC_PROFILE))
-                Status = -EINVAL;
+#ifdef WPA_SUPPLICANT_SUPPORT
+	    case OID_SET_COUNTERMEASURES:
+            if (wrq->u.data.length != sizeof(int))
+                Status  = -EINVAL;
             else
             {
-                PWSC_PROFILE pWscProfile = &pAd->StaCfg.WscControl.WscProfile;
-                NdisZeroMemory(pWscProfile, sizeof(WSC_PROFILE));
-                Status = copy_from_user(pWscProfile, wrq->u.data.pointer, wrq->u.data.length);
-                DBGPRINT(RT_DEBUG_TRACE, ("RT_OID_WSC_SET_PROFILE:: ProfileCnt = %d\n", pWscProfile->ProfileCnt));
+                int enabled = 0;
+                Status = copy_from_user(&enabled, wrq->u.data.pointer, wrq->u.data.length);
+                if (enabled == 1)
+                    pAd->StaCfg.bBlockAssoc = TRUE;
+                else
+                    // WPA MIC error should block association attempt for 60 seconds
+                    pAd->StaCfg.bBlockAssoc = FALSE;
+                DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_SET_COUNTERMEASURES bBlockAssoc=%s\n", pAd->StaCfg.bBlockAssoc ? "TRUE":"FALSE"));
             }
-            break;
-            
-        case RT_OID_WSC_SET_CONF_MODE: // WPS disable, Enrollee or Registrar
-            if (wrq->u.data.length != sizeof(INT))
-                Status = -EINVAL;
+	        break;
+        case RT_OID_WPA_SUPPLICANT_SUPPORT:
+			if (wrq->u.data.length != sizeof(UCHAR))
+                Status  = -EINVAL;
             else
             {
-                INT WscConfMode = 0;
-                Status = copy_from_user(&WscConfMode, wrq->u.data.pointer, wrq->u.data.length);
-                if (Status == 0)
-                {
-					if (WscConfMode == 2)
-						WscConfMode = 4;
-
-                    switch(WscConfMode)
-                    {
-                        case WSC_ENROLLEE:
-                            Set_WscConfMode_Proc(pAd, "1");
-                            break;
-                        case WSC_REGISTRAR:
-                            Set_WscConfMode_Proc(pAd, "2");
-							WscConfMode = 2;
-                            break;
-                        case WSC_DISABLE:
-                        default:
-                            Set_WscConfMode_Proc(pAd, "0");
-                            break;
-                    }                    
-                }
-                DBGPRINT(RT_DEBUG_TRACE, ("RT_OID_WSC_SET_CONF_MODE:: WscConfMode = %d\n", WscConfMode));
-            }
-            break;
-        case RT_OID_WSC_SET_MODE:
-            if (wrq->u.data.length != sizeof(INT))
-                Status = -EINVAL;
+				Status = copy_from_user(&wpa_supplicant_enable, wrq->u.data.pointer, wrq->u.data.length);
+				if (wpa_supplicant_enable & WPA_SUPPLICANT_ENABLE_WPS)
+					pAd->StaCfg.WpaSupplicantUP |= WPA_SUPPLICANT_ENABLE_WPS;
+				else
+				{
+					pAd->StaCfg.WpaSupplicantUP = wpa_supplicant_enable;
+					pAd->StaCfg.WpaSupplicantUP &= 0x7F;
+				}
+				DBGPRINT(RT_DEBUG_TRACE, ("Set::RT_OID_WPA_SUPPLICANT_SUPPORT (=0x%02X)\n", pAd->StaCfg.WpaSupplicantUP));
+			}
+            break;	   
+        case OID_802_11_DEAUTHENTICATION:
+            if (wrq->u.data.length != sizeof(MLME_DEAUTH_REQ_STRUCT))
+                Status  = -EINVAL;
             else
             {
-                INT WscMode = 0; // PIN or PBC
-                Status = copy_from_user(&WscMode, wrq->u.data.pointer, wrq->u.data.length);
-                if (Status == 0)
+                MLME_DEAUTH_REQ_STRUCT      *pInfo;
+				MLME_QUEUE_ELEM *MsgElem = (MLME_QUEUE_ELEM *) kmalloc(sizeof(MLME_QUEUE_ELEM), MEM_ALLOC_FLAG);                
+                if (MsgElem == NULL)
                 {
-                    if (WscMode == 1)
-                        Set_WscMode_Proc(pAd, "1"); // PIN
-                    else if (WscMode == 2)
-                        Set_WscMode_Proc(pAd, "2"); // PBC
-                    else
-                    {
-                        DBGPRINT(RT_DEBUG_TRACE, ("RT_OID_WSC_SET_MODE::unknown WscMode = %d\n", WscMode));
-                        Status = -EINVAL;
-                    }
+                	DBGPRINT(RT_DEBUG_ERROR, ("%s():alloc memory failed!\n", __FUNCTION__));
+                        return -EINVAL;
                 }
-                DBGPRINT(RT_DEBUG_TRACE, ("RT_OID_WSC_SET_MODE::WscMode = %d\n", WscMode));
-            }
-            break;
-        case RT_OID_WSC_SET_PIN_CODE:
-            if (wrq->u.data.length != 8) // PIN Code Length is 8
-                Status = -EINVAL;
-            else
-            {
-                CHAR PinCode[8] = {0};
-                Status = copy_from_user(&PinCode[0], wrq->u.data.pointer, wrq->u.data.length);
-                if (Status == 0)
+
+                pInfo = (MLME_DEAUTH_REQ_STRUCT *) MsgElem->Msg;
+                Status = copy_from_user(pInfo, wrq->u.data.pointer, wrq->u.data.length);
+                MlmeDeauthReqAction(pAd, MsgElem);
+				kfree(MsgElem);
+				
+                if (INFRA_ON(pAd))
                 {
-                    if (Set_WscPinCode_Proc(pAd, (PSTRING) &PinCode[0]) == FALSE)
-                        Status = -EINVAL;
+                    LinkDown(pAd, FALSE);
+                    pAd->Mlme.AssocMachine.CurrState = ASSOC_IDLE;
                 }
+                DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_DEAUTHENTICATION (Reason=%d)\n", pInfo->Reason));
             }
             break;
-        case RT_OID_WSC_SET_SSID:
-            if (wrq->u.data.length != sizeof(NDIS_802_11_SSID))
-                Status = -EINVAL;
-            else
-            {
-                NdisZeroMemory(&Ssid, sizeof(NDIS_802_11_SSID));
-                Status = copy_from_user(&Ssid, wrq->u.data.pointer, wrq->u.data.length);
-                Set_WscSsid_Proc(pAd, (PSTRING) Ssid.Ssid);
-            }
-            break;
-        case RT_OID_WSC_SET_CONN_BY_PROFILE_INDEX:
-            if (wrq->u.data.length != sizeof(UINT))
-                Status = -EINVAL;
+        case OID_802_11_DROP_UNENCRYPTED:
+            if (wrq->u.data.length != sizeof(int))
+                Status  = -EINVAL;
             else
             {
-                UINT wsc_profile_index = 0; // PIN or PBC
-                PWSC_CTRL   pWscControl = &pAd->StaCfg.WscControl;
-                unsigned long	IrqFlags;
-                
-                Status = copy_from_user(&wsc_profile_index, wrq->u.data.pointer, wrq->u.data.length);
-                if (wsc_profile_index < pWscControl->WscProfile.ProfileCnt)
-                {                    
-                    RTMP_IRQ_LOCK(&pAd->irq_lock, IrqFlags);
-                    WscWriteConfToPortCfg(pAd, pWscControl, &pWscControl->WscProfile.Profile[wsc_profile_index], TRUE);
-                    RTMP_IRQ_UNLOCK(&pAd->irq_lock, IrqFlags);
-                    pAd->MlmeAux.CurrReqIsFromNdis = TRUE;
-                    LinkDown(pAd, TRUE);                    
-                }
+                int enabled = 0;
+                Status = copy_from_user(&enabled, wrq->u.data.pointer, wrq->u.data.length);
+                if (enabled == 1)
+                    pAd->StaCfg.PortSecured = WPA_802_1X_PORT_NOT_SECURED;
                 else
-                    DBGPRINT(RT_DEBUG_TRACE, ("RT_OID_WSC_SET_CONN_BY_PROFILE_INDEX:: wrong wsc_profile_index(%d)\n", wsc_profile_index));                
+                    pAd->StaCfg.PortSecured = WPA_802_1X_PORT_SECURED;
+				NdisAcquireSpinLock(&pAd->MacTabLock);
+				pAd->MacTab.Content[BSSID_WCID].PortSecured = pAd->StaCfg.PortSecured;
+				NdisReleaseSpinLock(&pAd->MacTabLock);
+                DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_DROP_UNENCRYPTED (=%d)\n", enabled));
             }
             break;
-        case RT_OID_WSC_DRIVER_AUTO_CONNECT:
+        case OID_802_11_SET_IEEE8021X:
             if (wrq->u.data.length != sizeof(BOOLEAN))
-                Status = -EINVAL;
+                Status  = -EINVAL;
             else
             {
-                Status = copy_from_user(&pAd->StaCfg.WscControl.WscDriverAutoConnect, wrq->u.data.pointer, wrq->u.data.length);
-                DBGPRINT(RT_DEBUG_TRACE, ("RT_OID_WSC_DRIVER_AUTO_CONNECT::WscDriverAutoConnect is %s\n", 
-                                            pAd->StaCfg.WscControl.WscDriverAutoConnect ? "Enabled":"Disabled"));
+                Status = copy_from_user(&IEEE8021xState, wrq->u.data.pointer, wrq->u.data.length);                				
+		        pAd->StaCfg.IEEE8021X = IEEE8021xState;
+                DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_SET_IEEE8021X (=%d)\n", IEEE8021xState));
             }
             break;
-        case RT_OID_WSC_SET_PASSPHRASE:
-            if (wrq->u.data.length > 64 || wrq->u.data.length < 8)
-                Status = -EINVAL;
+        case OID_802_11_SET_IEEE8021X_REQUIRE_KEY:	
+			if (wrq->u.data.length != sizeof(BOOLEAN))
+				 Status  = -EINVAL;
             else
             {
-                Status = copy_from_user(pAd->StaCfg.WscControl.WpaPsk, wrq->u.data.pointer, wrq->u.data.length);
-                NdisZeroMemory(pAd->StaCfg.WscControl.WpaPsk, 64);
-                pAd->StaCfg.WscControl.WpaPskLen = wrq->u.data.length;
-                DBGPRINT(RT_DEBUG_TRACE, ("RT_OID_WSC_SET_PASSPHRASE::KeyLen(%d)\n", pAd->StaCfg.WscControl.WpaPskLen));
+                Status = copy_from_user(&IEEE8021x_required_keys, wrq->u.data.pointer, wrq->u.data.length);                				
+				pAd->StaCfg.IEEE8021x_required_keys = IEEE8021x_required_keys;				
+				DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_SET_IEEE8021X_REQUIRE_KEY (%d)\n", IEEE8021x_required_keys));
+			}	
+			break;
+        case OID_802_11_PMKID:
+	        pPmkId = kmalloc(wrq->u.data.length, MEM_ALLOC_FLAG);
+
+	        if(pPmkId == NULL) {
+                Status = -ENOMEM;
+                break;
             }
-            break;
-#endif // WSC_STA_SUPPORT //
-
-#ifdef WSC_INCLUDED
-#ifdef WSC_LED_SUPPORT
-		case RT_OID_LED_WPS_MODE10:
-			if(!(pAd->StaCfg.bRadio) ||
-				(wrq->u.data.length != sizeof(UINT)))
-				Status = -EINVAL;
-			else
+            Status = copy_from_user(pPmkId, wrq->u.data.pointer, wrq->u.data.length);
+	  	  
+	        // check the PMKID information
+	        if (pPmkId->BSSIDInfoCount == 0)
+                NdisZeroMemory(pAd->StaCfg.SavedPMK, sizeof(BSSID_INFO)*PMKID_NO);
+	        else
+	        {
+		        PBSSID_INFO	pBssIdInfo;
+		        UINT		BssIdx;
+		        UINT		CachedIdx;
+
+		        for (BssIdx = 0; BssIdx < pPmkId->BSSIDInfoCount; BssIdx++)
+		        {
+			        // point to the indexed BSSID_INFO structure
+			        pBssIdInfo = (PBSSID_INFO) ((PUCHAR) pPmkId + 2 * sizeof(UINT) + BssIdx * sizeof(BSSID_INFO));
+			        // Find the entry in the saved data base.
+			        for (CachedIdx = 0; CachedIdx < pAd->StaCfg.SavedPMKNum; CachedIdx++)
+			        {
+				        // compare the BSSID
+				        if (NdisEqualMemory(pBssIdInfo->BSSID, pAd->StaCfg.SavedPMK[CachedIdx].BSSID, sizeof(NDIS_802_11_MAC_ADDRESS)))
+					        break;			
+			        }
+
+			        // Found, replace it
+			        if (CachedIdx < PMKID_NO)
+			        {
+				        DBGPRINT(RT_DEBUG_OFF, ("Update OID_802_11_PMKID, idx = %d\n", CachedIdx));
+				        NdisMoveMemory(&pAd->StaCfg.SavedPMK[CachedIdx], pBssIdInfo, sizeof(BSSID_INFO));
+				        pAd->StaCfg.SavedPMKNum++;
+			        }
+			        // Not found, replace the last one
+			        else
+			        {
+				        // Randomly replace one
+				        CachedIdx = (pBssIdInfo->BSSID[5] % PMKID_NO);
+				        DBGPRINT(RT_DEBUG_OFF, ("Update OID_802_11_PMKID, idx = %d\n", CachedIdx));
+				        NdisMoveMemory(&pAd->StaCfg.SavedPMK[CachedIdx], pBssIdInfo, sizeof(BSSID_INFO));
+			        }				
+		        }
+			}
+			if(pPmkId) 
+				kfree(pPmkId);
+	        break;
+
+		case RT_OID_WPS_PROBE_REQ_IE:
+			if (pAd->StaCfg.pWpsProbeReqIe)
 			{
-				Status = copy_from_user(&WPSLedMode10, wrq->u.data.pointer, wrq->u.data.length);
-				if((WPSLedMode10 != LINK_STATUS_WPS_MODE10_TURN_ON) && 
-					(WPSLedMode10 != LINK_STATUS_WPS_MODE10_FLASH) && 
-					(WPSLedMode10 != LINK_STATUS_WPS_MODE10_TURN_OFF))
-				{
-					Status = NDIS_STATUS_INVALID_DATA;
-					DBGPRINT(RT_DEBUG_INFO, ("WPS LED Mode 10::Parameter of LED Mode 10 must be 0x00, or 0x01, or 0x02\n"));
-				}
-				else
-				{ 
-#ifdef RTMP_MAC_PCI
-					RTMPSetLED(pAd, WPSLedMode10);
-#endif // RTMP_MAC_PCI //
-				}
+				kfree(pAd->StaCfg.pWpsProbeReqIe);
+				pAd->StaCfg.pWpsProbeReqIe = NULL;
+			}
+			pAd->StaCfg.WpsProbeReqIeLen = 0;
+			pAd->StaCfg.pWpsProbeReqIe = kmalloc(wrq->u.data.length, MEM_ALLOC_FLAG);
+			if (pAd->StaCfg.pWpsProbeReqIe)
+			{
+				Status = copy_from_user(pAd->StaCfg.pWpsProbeReqIe, wrq->u.data.pointer, wrq->u.data.length);
+
+				if (Status)
+            	{
+                	Status  = -EINVAL;
+					if (pAd->StaCfg.pWpsProbeReqIe)
+					{
+						kfree(pAd->StaCfg.pWpsProbeReqIe);
+						pAd->StaCfg.pWpsProbeReqIe = NULL;
+					}
+					pAd->StaCfg.WpsProbeReqIeLen = 0;
+                	DBGPRINT(RT_DEBUG_TRACE, ("Set::RT_OID_WPS_PROBE_REQ_IE, Failed (copy_from_user failed)!!\n"));
+           		}
+           		else
+           		{
+					pAd->StaCfg.WpsProbeReqIeLen = wrq->u.data.length;
+					hex_dump("WpsProbeReqIe", pAd->StaCfg.pWpsProbeReqIe, pAd->StaCfg.WpsProbeReqIeLen);
+					DBGPRINT(RT_DEBUG_TRACE, ("Set::RT_OID_WPS_PROBE_REQ_IE, WpsProbeReqIeLen = %d!!\n",
+								pAd->StaCfg.WpsProbeReqIeLen));
+           		}
 			}
+			else
+				Status = -ENOMEM;
 			break;
-#endif // WSC_LED_SUPPORT //
-#endif // WSC_INCLUDED //
+#endif // WPA_SUPPLICANT_SUPPORT //
+
+
 
 #ifdef SNMP_SUPPORT
 		case OID_802_11_SHORTRETRYLIMIT:
@@ -5428,6 +4343,13 @@
 		case OID_802_11_WEPDEFAULTKEYVALUE:
 			DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_WEPDEFAULTKEYVALUE\n"));
 			pKey = kmalloc(wrq->u.data.length, GFP_KERNEL);
+			if (pKey == NULL)
+			{
+				Status = -EINVAL;
+				DBGPRINT(RT_DEBUG_TRACE, ("Set::OID_802_11_WEPDEFAULTKEYVALUE, Failed!!\n"));
+				break;
+			}
+
 			Status = copy_from_user(pKey, wrq->u.data.pointer, wrq->u.data.length);
 			//pKey = &WepKey;
 			
@@ -5440,7 +4362,7 @@
 			DBGPRINT(RT_DEBUG_TRACE,("pKey->KeyIndex =%d, pKey->KeyLength=%d\n", pKey->KeyIndex, pKey->KeyLength));
 
 			// it is a shared key
-			if (KeyIdx > 4)
+			if (KeyIdx >= 4)
 				Status = -EINVAL;
 			else
 			{
@@ -5453,6 +4375,7 @@
 				}
 				//RestartAPIsRequired = TRUE;
 			}
+			kfree(pKey);
 			break;
 
 
@@ -5482,17 +4405,19 @@
 
 
 
+#ifdef XLINK_SUPPORT
 		case RT_OID_802_11_SET_PSPXLINK_MODE:
 			if (wrq->u.data.length != sizeof(BOOLEAN))
                 Status  = -EINVAL;
             else
             {
-                Status = copy_from_user(&pAd->CommonCfg.PSPXlink, wrq->u.data.pointer, wrq->u.data.length);
-				/*if (pAd->CommonCfg.PSPXlink)
+                Status = copy_from_user(&pAd->StaCfg.PSPXlink, wrq->u.data.pointer, wrq->u.data.length);
+				/*if (pAd->StaCfg.PSPXlink)
 					RX_FILTER_SET_FLAG(pAd, fRX_FILTER_ACCEPT_PROMISCUOUS)*/
-				DBGPRINT(RT_DEBUG_TRACE,("Set::RT_OID_802_11_SET_PSPXLINK_MODE(=%d) \n", pAd->CommonCfg.PSPXlink));
+				DBGPRINT(RT_DEBUG_TRACE,("Set::RT_OID_802_11_SET_PSPXLINK_MODE(=%d) \n", pAd->StaCfg.PSPXlink));
             }
 			break;
+#endif // XLINK_SUPPORT //
 
 
         default:
@@ -5526,20 +4451,17 @@
     NDIS_802_11_AUTHENTICATION_MODE     AuthMode;
     NDIS_802_11_WEP_STATUS              WepStatus;
     NDIS_MEDIA_STATE                    MediaState;
-    ULONG                               BssBufSize, ulInfo=0, NetworkTypeList[4], apsd = 0;
+    ULONG                               BssBufSize, ulInfo=0, NetworkTypeList[4], apsd = 0, RateValue=0;
     USHORT                              BssLen = 0;
     PUCHAR                              pBuf = NULL, pPtr;
     INT                                 Status = NDIS_STATUS_SUCCESS;
     UINT                                we_version_compiled;
     UCHAR                               i, Padding = 0;
     BOOLEAN                             RadioState;
-	STRING								driverVersion[8];
+    STRING								driverVersion[8];
     OID_SET_HT_PHYMODE			        *pHTPhyMode = NULL;
+    HTTRANSMIT_SETTING	HTPhyMode;
 	
-#ifdef WSC_STA_SUPPORT
-	UINT	                            WscPinCode = 0;
-	PWSC_PROFILE						pProfile;
-#endif // WSC_STA_SUPPORT //
 
 #ifdef SNMP_SUPPORT	
 	//for snmp, kathy
@@ -5550,9 +4472,6 @@
 	UCHAR						tmp[64];
 #endif //SNMP
 
-#ifdef WMM_ACM_SUPPORT
-ACM_BANDWIDTH_INFO BwInfo, *pInfo;
-#endif
 
     switch(cmd) 
     {
@@ -5577,18 +4496,35 @@
             	/*
             	 * Still scanning, indicate the caller should try again.
             	 */
+            	pAd->StaCfg.bScanReqIsFromWebUI = TRUE;
             	DBGPRINT(RT_DEBUG_TRACE, ("Query::OID_802_11_BSSID_LIST (Still scanning)\n"));
 				return -EAGAIN;
             }
+
+			if (pAd->StaCfg.bImprovedScan)
+			{
+				/*
+				 * Fast scanning doesn't complete yet.
+				 */
+				pAd->StaCfg.bScanReqIsFromWebUI = TRUE;
+				DBGPRINT(RT_DEBUG_TRACE, ("Query::OID_802_11_BSSID_LIST (Still scanning)\n"));
+				return -EAGAIN;
+			}
+			
+#ifdef WPA_SUPPLICANT_SUPPORT
+			if ((pAd->StaCfg.WpaSupplicantUP & 0x7F) == WPA_SUPPLICANT_ENABLE)
+			{
+				pAd->StaCfg.WpaSupplicantScanCount = 0;
+			}
+#endif // WPA_SUPPLICANT_SUPPORT //
             DBGPRINT(RT_DEBUG_TRACE, ("Query::OID_802_11_BSSID_LIST (%d BSS returned)\n",pAd->ScanTab.BssNr));
-			pAd->StaCfg.bScanReqIsFromWebUI = FALSE;
             // Claculate total buffer size required
             BssBufSize = sizeof(ULONG);
             
             for (i = 0; i < pAd->ScanTab.BssNr; i++) 
             {
                 // Align pointer to 4 bytes boundary.
-                //Padding = 4 - (pAdapter->ScanTab.BssEntry[i].VarIELen & 0x0003);
+                //Padding = 4 - (pAd->ScanTab.BssEntry[i].VarIELen & 0x0003);
                 //if (Padding == 4)
                 //    Padding = 0;
                 BssBufSize += (sizeof(NDIS_WLAN_BSSID_EX) - 1 + sizeof(NDIS_802_11_FIXED_IEs) + pAd->ScanTab.BssEntry[i].VarIELen + Padding);
@@ -5697,6 +4633,7 @@
                 wrq->u.data.length = BssLen;
 #endif
             Status = copy_to_user(wrq->u.data.pointer, pBssidList, BssLen);
+			pAd->StaCfg.bScanReqIsFromWebUI = FALSE;
             kfree(pBssidList);
             break;
         case OID_802_3_CURRENT_ADDRESS:
@@ -5776,11 +4713,9 @@
 		case RT_OID_802_11_SNR_0:
 			if ((pAd->StaCfg.LastSNR0 > 0))
 			{
-#if defined (CONFIG_RALINK_RT2883) || defined (CONFIG_RALINK_RT3883)
-				ulInfo = (pAd->StaCfg.LastSNR0 * 3 + 8) >> 4;
-#else
-				ulInfo = ((0xeb	- pAd->StaCfg.LastSNR0) * 3) >> 4 ;
-#endif // CONFIG_RALINK_RT2883 || CONFIG_RALINK_RT3883 //				
+				{
+				ulInfo = ((0xeb	- pAd->StaCfg.LastSNR0) * 3) /	16 ;
+				}
 				wrq->u.data.length = sizeof(ulInfo);
 				Status = copy_to_user(wrq->u.data.pointer, &ulInfo,	wrq->u.data.length);
 				DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_SNR_0(0x=%lx)\n", ulInfo));
@@ -5792,11 +4727,9 @@
 			if ((pAd->Antenna.field.RxPath	> 1) && 
                 (pAd->StaCfg.LastSNR1 > 0))
 			{
-#if defined (CONFIG_RALINK_RT2883) || defined (CONFIG_RALINK_RT3883)
-				ulInfo = (pAd->StaCfg.LastSNR1 * 3 + 8) >> 4;
-#else
-				ulInfo = ((0xeb	- pAd->StaCfg.LastSNR1) * 3) >> 4 ;
-#endif // CONFIG_RALINK_RT2883 || CONFIG_RALINK_RT3883 //
+				{
+				ulInfo = ((0xeb	- pAd->StaCfg.LastSNR1) * 3) /	16 ;
+				}
 				wrq->u.data.length = sizeof(ulInfo);
 				Status = copy_to_user(wrq->u.data.pointer, &ulInfo,	wrq->u.data.length);
 				DBGPRINT(RT_DEBUG_TRACE,("Query::RT_OID_802_11_SNR_1(0x=%lx)\n",ulInfo));
@@ -5805,34 +4738,9 @@
 				Status = -EFAULT;
             DBGPRINT(RT_DEBUG_TRACE,("Query::RT_OID_802_11_SNR_1(pAd->StaCfg.LastSNR1=%d)\n",pAd->StaCfg.LastSNR1));
 			break;
-#if defined (CONFIG_RALINK_RT2883) || defined (CONFIG_RALINK_RT3883)
-		case RT_OID_802_11_SNR_2:
-			if ((pAd->Antenna.field.RxPath	> 2) && 
-                (pAd->StaCfg.LastSNR2 > 0))
-			{
-				ulInfo = (pAd->StaCfg.LastSNR2 * 3 + 8) >> 4;
-				wrq->u.data.length = sizeof(ulInfo);
-				Status = copy_to_user(wrq->u.data.pointer, &ulInfo,	wrq->u.data.length);
-				DBGPRINT(RT_DEBUG_TRACE,("Query::RT_OID_802_11_SNR_2(0x=%lx)\n",ulInfo));
-			}
-			else
-				Status = -EFAULT;
-            DBGPRINT(RT_DEBUG_TRACE,("Query::RT_OID_802_11_SNR_2(pAd->StaCfg.LastSNR2=%d)\n",pAd->StaCfg.LastSNR2));
-			break;
 
-		case RT_OID_802_11_STREAM_SNR:
-			{
-			long StreamSnr[3];
-			StreamSnr[0] = pAd->StaCfg.BF_SNR[0];
-			StreamSnr[1] = pAd->StaCfg.BF_SNR[1];
-			StreamSnr[2] = pAd->StaCfg.BF_SNR[2];
-			wrq->u.data.length = sizeof(StreamSnr);
-			Status = copy_to_user(wrq->u.data.pointer, &StreamSnr,	wrq->u.data.length);
-			DBGPRINT(RT_DEBUG_TRACE,("Query::RT_OID_802_11_STR_SNR(0x=%ld, %ld)\n", StreamSnr[0], StreamSnr[1]));
-			}
-			break;
 
-#endif // CONFIG_RALINK_RT2883 || CONFIG_RALINK_RT3883 //
+
         case OID_802_11_RSSI_TRIGGER:
             ulInfo = pAd->StaCfg.RssiSample.LastRssi0 - pAd->BbpRssiToDbmDelta;
             wrq->u.data.length = sizeof(ulInfo);
@@ -6002,7 +4910,12 @@
 			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_TX_POWER_LEVEL_1 (=%ld)\n", pAd->CommonCfg.TxPowerPercentage));
 			break;
         case OID_802_11_NETWORK_TYPES_SUPPORTED:
-			if ((pAd->RfIcType	== RFIC_2850) || (pAd->RfIcType ==	RFIC_2750) || (pAd->RfIcType == RFIC_3052) || (pAd->RfIcType == RFIC_2853) || (pAd->RfIcType == RFIC_3853))		
+			if ((pAd->RfIcType	== RFIC_2850) ||
+				(pAd->RfIcType ==	RFIC_2750) ||
+				(pAd->RfIcType == RFIC_3052) ||
+				(pAd->RfIcType == RFIC_3053) || 
+				(pAd->RfIcType == RFIC_2853) || 
+				(pAd->RfIcType == RFIC_3853))
 			{
 				NetworkTypeList[0] = 3;                 // NumberOfItems = 3
 				NetworkTypeList[1] = Ndis802_11DS;      // NetworkType[1] = 11b
@@ -6031,18 +4944,39 @@
 				ulInfo = Ndis802_11DS;
             Status = copy_to_user(wrq->u.data.pointer, &ulInfo, wrq->u.data.length);
 			break;
-        case RT_OID_802_11_QUERY_LAST_RX_RATE:
-            ulInfo = (ULONG)pAd->LastRxRate;
-            wrq->u.data.length = sizeof(ulInfo);
+        	case RT_OID_802_11_QUERY_LAST_RX_RATE:
+            		ulInfo = (ULONG)pAd->LastRxRate;
+            		wrq->u.data.length = sizeof(ulInfo);
 			Status = copy_to_user(wrq->u.data.pointer, &ulInfo, wrq->u.data.length);
 			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_LAST_RX_RATE (=%ld)\n", ulInfo));
 			break;
 		case RT_OID_802_11_QUERY_LAST_TX_RATE:
-			//ulInfo = (ULONG)pAd->LastTxRate;
+			ulInfo = (ULONG)pAd->LastTxRate;
+			wrq->u.data.length = sizeof(ulInfo);
+			Status = copy_to_user(wrq->u.data.pointer, &ulInfo, wrq->u.data.length);
+			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_LAST_TX_RATE (=%lx)\n", ulInfo));
+			break;
+        		case RT_OID_802_11_QUERY_MAP_REAL_RX_RATE:
+			RateValue=0;
+			HTPhyMode.word =(USHORT) pAd->LastRxRate;
+			getRate(HTPhyMode, &RateValue);
+			wrq->u.data.length = sizeof(RateValue);
+			Status = copy_to_user(wrq->u.data.pointer, &RateValue, wrq->u.data.length);
+			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_LAST_RX_RATE (=%ld)\n", RateValue));
+			break;
+		case RT_OID_802_11_QUERY_MAP_REAL_TX_RATE:
+			RateValue=0;
+			HTPhyMode.word = (USHORT)pAd->LastTxRate;
+			getRate(HTPhyMode, &RateValue);
+			wrq->u.data.length = sizeof(RateValue);
+			Status = copy_to_user(wrq->u.data.pointer, &RateValue, wrq->u.data.length);
+			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_LAST_TX_RATE (=%ld)\n", RateValue));
+			break;
+		case RT_OID_802_11_QUERY_TX_PHYMODE:
 			ulInfo = (ULONG)pAd->MacTab.Content[BSSID_WCID].HTPhyMode.word;
 			wrq->u.data.length = sizeof(ulInfo);
 			Status = copy_to_user(wrq->u.data.pointer, &ulInfo,	wrq->u.data.length);
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_LAST_TX_RATE (=%lx)\n", ulInfo));
+			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_TX_PHYMODE (=%lx)\n", ulInfo));
 			break;
         case RT_OID_802_11_QUERY_EEPROM_VERSION:
             wrq->u.data.length = sizeof(ULONG);
@@ -6054,8 +4988,8 @@
 			break;
 	    case RT_OID_802_11_QUERY_NOISE_LEVEL:
 			wrq->u.data.length = sizeof(UCHAR);
-			Status = copy_to_user(wrq->u.data.pointer, &pAd->BbpWriteLatch[66], wrq->u.data.length);
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_NOISE_LEVEL (=%d)\n", pAd->BbpWriteLatch[66]));
+			Status = copy_to_user(wrq->u.data.pointer, &pAd->BbpWriteLatch[17], wrq->u.data.length);
+			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_NOISE_LEVEL (=%d)\n", pAd->BbpWriteLatch[17]));
 			break;
 	    case RT_OID_802_11_EXTRA_INFO:
 			wrq->u.data.length = sizeof(ULONG);
@@ -6087,176 +5021,23 @@
 			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_WMM (=%d)\n",	pAd->CommonCfg.bWmmCapable));
 			break;
 
-#ifdef WMM_ACM_SUPPORT
-		case RT_OID_WMM_ACM_BandWidth:
-		{
-			/* init */
-			pInfo = &BwInfo;
 
-			/* precondition */
-			//ACM_QOS_SANITY_CHECK(pAd);
-			if (pAd == NULL)									
-			{													
-				//printk("err> __pAd == NULL!\n");				
-				return 0;
-			}
-
-			/* display */
-			if (ACMP_BandwidthInfoGet(pAd, pInfo) != ACM_RTN_OK)
-				Status=-1;
-
-			wrq->u.data.length = sizeof(BwInfo);
-			Status = copy_to_user(wrq->u.data.pointer,pInfo, wrq->u.data.length);
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_WMM_ACM_BandWidth \n"));
-			break;
-		}
-		case RT_OID_WMM_ACM_TSPEC:
-		/* get all built TSPEC */
-		{
-			UINT32 NumStream;
-			CHAR *pMac;
-			UINT32 *pNumOfTspec;
-			BOOLEAN FlgIsOk;
-
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_WMM_ACM_TSPEC \n"));
-
-			FlgIsOk = FALSE;
-			pMac = wrq->u.data.pointer; /* from user */
-			pNumOfTspec = (UINT32 *)wrq->u.data.pointer; /* to user */
-			NumStream = ACMP_StreamNumGet(pAd, ACM_SM_CATEGORY_PEER, 1, pMac);
-
-			if (NumStream > 0)
-			{
-				/* at least one TSPEC */
-				if (wrq->u.data.length >= \
-						(sizeof(UINT32)+sizeof(ACM_STREAM_INFO)*NumStream))
-				{
-					/* user buffer is enough to fill all TSPECs */
-					if (ACMP_StreamsGet(
-							pAd, ACM_SM_CATEGORY_PEER, 1,
-							&NumStream, pMac,
-							wrq->u.data.pointer+sizeof(UINT32)) == ACM_RTN_OK)
-					{
-						/* fill the actual number of TSPEC */
-						*pNumOfTspec = NumStream;
-						FlgIsOk = TRUE;
-					}
-				}
-			}
-
-			if (FlgIsOk == FALSE)
-				*pNumOfTspec = 0; /* get fail */
-		}
-			break;
-#endif // WMM_ACM_SUPPORT //
-
-
-#ifdef WSC_STA_SUPPORT
-		case RT_OID_WSC_QUERY_STATUS:
-			wrq->u.data.length = sizeof(INT);
-			if (copy_to_user(wrq->u.data.pointer, &pAd->StaCfg.WscControl.WscStatus, wrq->u.data.length))
-			{
-				Status = -EFAULT;
-			}
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_WSC_QUERY_STATUS (=%d)\n", pAd->StaCfg.WscControl.WscStatus));
-			break;
-
-		case RT_OID_WSC_PIN_CODE:
-			wrq->u.data.length = sizeof(UINT);
-			WscPinCode = pAd->StaCfg.WscControl.WscEnrolleePinCode;
-			
-			if (copy_to_user(wrq->u.data.pointer, &WscPinCode, wrq->u.data.length))
-			{
-				Status = -EFAULT;
-			}
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_WSC_PIN_CODE (=%d)\n", WscPinCode));
-			break;
-
-        case RT_OID_WSC_QUERY_DEFAULT_PROFILE:
-			wrq->u.data.length = sizeof(WSC_PROFILE);
-			pProfile = kmalloc(sizeof(WSC_PROFILE), MEM_ALLOC_FLAG);
-			RTMPZeroMemory(pProfile, sizeof(WSC_PROFILE));
-            WscCreateProfileFromCfg(pAd, STA_MODE, &pAd->StaCfg.WscControl, pProfile);
-			if (copy_to_user(wrq->u.data.pointer, pProfile, wrq->u.data.length))
-			{
-				Status = -EFAULT;
-			}
-			else
-			{
-				DBGPRINT(RT_DEBUG_TRACE, ("WSC Profile:\n"));
-				DBGPRINT(RT_DEBUG_TRACE, ("SSID = %s\n", pProfile->Profile[0].SSID.Ssid));
-				DBGPRINT(RT_DEBUG_TRACE, ("AuthType = %s\n", WscGetAuthTypeStr(pProfile->Profile[0].AuthType)));
-				DBGPRINT(RT_DEBUG_TRACE, ("EncrpType = %s\n", WscGetEncryTypeStr(pProfile->Profile[0].EncrType)));
-
-				if (pProfile->Profile[0].EncrType == WSC_ENCRTYPE_WEP)
-				{
-					DBGPRINT(RT_DEBUG_TRACE, ("WEP Key = %s\n", pProfile->Profile[0].Key));
-					DBGPRINT(RT_DEBUG_TRACE, ("DefaultKey ID = %d\n", pProfile->Profile[0].KeyIndex));
-				}
-				else if ((pProfile->Profile[0].EncrType == WSC_ENCRTYPE_TKIP) || (pProfile->Profile[0].EncrType == WSC_ENCRTYPE_AES))
-				{
-					DBGPRINT(RT_DEBUG_TRACE, ("PassPhrase Key = %s\n", pProfile->Profile[0].Key));
-                    pProfile->Profile[0].KeyIndex = 1;
-				}
-				DBGPRINT(RT_DEBUG_TRACE, ("\n"));
-			}
-
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_WSC_QUERY_DEFAULT_PROFILE \n"));
-			break;
-		case RT_OID_802_11_WSC_QUERY_PROFILE:
-			wrq->u.data.length = sizeof(WSC_PROFILE);
-			pProfile = kmalloc(sizeof(WSC_PROFILE), MEM_ALLOC_FLAG);
-			RTMPZeroMemory(pProfile, sizeof(WSC_PROFILE));
-			NdisMoveMemory(pProfile, &pAd->StaCfg.WscControl.WscProfile, sizeof(WSC_PROFILE));
-            if ((pProfile->Profile[0].AuthType == WSC_AUTHTYPE_OPEN) && (pProfile->Profile[0].EncrType == WSC_ENCRTYPE_NONE))
+#ifdef WPA_SUPPLICANT_SUPPORT
+        case RT_OID_NEW_DRIVER:
             {
-                pProfile->Profile[0].KeyLength = 0;
-                NdisZeroMemory(pProfile->Profile[0].Key, 64);
+                UCHAR enabled = 1;
+    	        wrq->u.data.length = sizeof(UCHAR);
+    	        Status = copy_to_user(wrq->u.data.pointer, &enabled, wrq->u.data.length);
+                DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_NEW_DRIVER (=%d)\n", enabled));
             }
-			if (copy_to_user(wrq->u.data.pointer, pProfile, wrq->u.data.length))
-			{
-				Status = -EFAULT;
-			}
-			else
-			{
-				DBGPRINT(RT_DEBUG_TRACE, ("WSC Profile:\n"));
-				DBGPRINT(RT_DEBUG_TRACE, ("SSID = %s\n", pProfile->Profile[0].SSID.Ssid));
-				DBGPRINT(RT_DEBUG_TRACE, ("AuthType = %s\n", WscGetAuthTypeStr(pProfile->Profile[0].AuthType)));
-				DBGPRINT(RT_DEBUG_TRACE, ("EncrpType = %s\n", WscGetEncryTypeStr(pProfile->Profile[0].EncrType)));
-
-				if (pProfile->Profile[0].EncrType == WSC_ENCRTYPE_WEP)
-				{
-					DBGPRINT(RT_DEBUG_TRACE, ("WEP Key = %s\n", pProfile->Profile[0].Key));
-					DBGPRINT(RT_DEBUG_TRACE, ("DefaultKey ID = %d\n", pProfile->Profile[0].KeyIndex));
-				}
-				else if ((pProfile->Profile[0].EncrType == WSC_ENCRTYPE_TKIP) || (pProfile->Profile[0].EncrType == WSC_ENCRTYPE_AES))
-				{
-					DBGPRINT(RT_DEBUG_TRACE, ("PassPhrase Key = %s\n", pProfile->Profile[0].Key));
-                    pProfile->Profile[0].KeyIndex = 1;
-				}
-				DBGPRINT(RT_DEBUG_TRACE, ("\n"));
-			}
+	        break;
+        case RT_OID_WPA_SUPPLICANT_SUPPORT:
+	        wrq->u.data.length = sizeof(UCHAR);
+	        Status = copy_to_user(wrq->u.data.pointer, &pAd->StaCfg.WpaSupplicantUP, wrq->u.data.length);
+            DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_WPA_SUPPLICANT_SUPPORT (=%d)\n", pAd->StaCfg.WpaSupplicantUP));
+	        break;
+#endif // WPA_SUPPLICANT_SUPPORT //
 
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_WSC_QUERY_PROFILE \n"));
-			break;
-			
-		case RT_OID_WSC_UUID:
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_WSC_QUERY_UUID \n"));
-			wrq->u.data.length = UUID_LEN_STR;
-			if (copy_to_user(wrq->u.data.pointer, &pAd->StaCfg.WscControl.Wsc_Uuid_Str[0], UUID_LEN_STR))
-			{
-				Status = -EFAULT;
-			}
-			break;
-		case RT_OID_WSC_MAC_ADDRESS:
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_WSC_MAC_ADDRESS \n"));
-			wrq->u.data.length = MAC_ADDR_LEN;
-			if (copy_to_user(wrq->u.data.pointer, pAd->CurrentAddress, wrq->u.data.length))
-			{
-				Status = -EFAULT;
-			}
-			break;
-#endif // WSC_STA_SUPPORT //
         case RT_OID_DRIVER_DEVICE_NAME:
             DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_DRIVER_DEVICE_NAME \n"));
 			wrq->u.data.length = 16;
@@ -6285,6 +5066,7 @@
     			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_HT_PHYMODE (PhyMode = %d, MCS =%d, BW = %d, STBC = %d, ExtOffset=%d)\n",
     				pHTPhyMode->HtMode, pHTPhyMode->MCS, pHTPhyMode->BW, pHTPhyMode->STBC, pHTPhyMode->ExtOffset));
     			DBGPRINT(RT_DEBUG_TRACE, (" MlmeUpdateTxRates (.word = %x )\n", pAd->MacTab.Content[BSSID_WCID].HTPhyMode.word));
+				kfree(pHTPhyMode);
             }
             else
             {
@@ -6321,6 +5103,7 @@
     			DBGPRINT(RT_DEBUG_TRACE, ("Query::RT_OID_802_11_QUERY_HT_PHYMODE (PhyMode = %d, MCS =%d, BW = %d, STBC = %d, ExtOffset=%d)\n",
     				pHTPhyMode->HtMode, pHTPhyMode->MCS, pHTPhyMode->BW, pHTPhyMode->STBC, pHTPhyMode->ExtOffset));
     			DBGPRINT(RT_DEBUG_TRACE, (" MlmeUpdateTxRates (.word = %x )\n", pAd->MacTab.Content[BSSID_WCID].HTPhyMode.word));
+				kfree(pHTPhyMode);
             }
             else
             {
@@ -6527,12 +5310,14 @@
 			DBGPRINT(RT_DEBUG_TRACE, ("Status=%d\n", Status));
 			break;
 
+#ifdef EXT_BUILD_CHANNEL_LIST
 		case OID_802_11_GET_CHANNEL_GEOGRAPHY:
 			DBGPRINT(RT_DEBUG_TRACE, ("Query::OID_802_11_GET_CHANNEL_GEOGRAPHY \n"));
 			wrq->u.data.length = 1;
 			Status = copy_to_user(wrq->u.data.pointer, &pAd->CommonCfg.Geography, 1);
 			DBGPRINT(RT_DEBUG_TRACE, ("Status=%d\n", Status));
 			break;			
+#endif // EXT_BUILD_CHANNEL_LIST //
 
 
 #ifdef QOS_DLS_SUPPORT
@@ -6564,18 +5349,15 @@
 			break;
 #endif // QOS_DLS_SUPPORT //
 
+#ifdef XLINK_SUPPORT
 		case OID_802_11_SET_PSPXLINK_MODE:
 			wrq->u.data.length = sizeof(BOOLEAN);
-            Status = copy_to_user(wrq->u.data.pointer, &pAd->CommonCfg.PSPXlink, wrq->u.data.length);
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::OID_802_11_SET_PSPXLINK_MODE(=%d)\n", pAd->CommonCfg.PSPXlink));
+            Status = copy_to_user(wrq->u.data.pointer, &pAd->StaCfg.PSPXlink, wrq->u.data.length);
+			DBGPRINT(RT_DEBUG_TRACE, ("Query::OID_802_11_SET_PSPXLINK_MODE(=%d)\n", pAd->StaCfg.PSPXlink));
 			break;
+#endif // XLINK_SUPPORT //
+
 
-		case OID_802_11_QUERY_WirelessMode:
-			wrq->u.data.length = sizeof(UCHAR);
-	    Status = copy_to_user(wrq->u.data.pointer, &pAd->CommonCfg.PhyMode, wrq->u.data.length);
-			DBGPRINT(RT_DEBUG_TRACE, ("Query::OID_802_11_QUERY_WirelessMode(=%d)\n", pAd->CommonCfg.PhyMode));
-			break;
-    
     default:
             DBGPRINT(RT_DEBUG_TRACE, ("Query::unknown IOCTL's subcmd = 0x%08x\n", cmd));
             Status = -EOPNOTSUPP;
@@ -6601,7 +5383,7 @@
 	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
-		   So the net_dev->ml_priv will be NULL in 2rd open */
+		   So the net_dev->priv will be NULL in 2rd open */
 		return -ENETDOWN;
 	}
 	pObj = (POS_COOKIE) pAd->OS_Cookie;
@@ -6631,13 +5413,13 @@
 	switch(cmd)
 	{			
 #ifdef RALINK_ATE
-#ifdef RALINK_28xx_QA
+#ifdef RALINK_QA
 		case RTPRIV_IOCTL_ATE:
 			{
 				RtmpDoAte(pAd, wrq);
 			}
 			break;
-#endif // RALINK_28xx_QA // 
+#endif // RALINK_QA // 
 #endif // RALINK_ATE //
         case SIOCGIFHWADDR:
 			DBGPRINT(RT_DEBUG_TRACE, ("IOCTL::SIOCGIFHWADDR\n"));
@@ -6769,7 +5551,8 @@
 		case SIOCGIWRETRY:	//get retry limits and lifetime
 		case SIOCSIWRETRY:	//set retry limits and lifetime
 			Status = -EOPNOTSUPP;
-			break;			
+			break;
+
 		case RT_PRIV_IOCTL:
         case RT_PRIV_IOCTL_EXT:
 			subcmd = wrq->u.data.flags;
@@ -6783,9 +5566,14 @@
 			{
 				if ( access_ok(VERIFY_WRITE, wrq->u.data.pointer, sizeof(privtab)) != TRUE)
 					break;
-				wrq->u.data.length = sizeof(privtab) / sizeof(privtab[0]);
-				if (copy_to_user(wrq->u.data.pointer, privtab, sizeof(privtab)))
-					Status = -EFAULT;
+				if ((sizeof(privtab) / sizeof(privtab[0])) <= wrq->u.data.length)
+				{
+					wrq->u.data.length = sizeof(privtab) / sizeof(privtab[0]);
+					if (copy_to_user(wrq->u.data.pointer, privtab, sizeof(privtab)))
+						Status = -EFAULT;
+				}
+				else
+					Status = -E2BIG;
 			}
 			break;
 		case RTPRIV_IOCTL_SET:
@@ -6803,13 +5591,6 @@
 		case RTPRIV_IOCTL_E2P:
 			RTMPIoctlE2PROM(pAd, wrq);
 			break;
-
-#ifdef RTMP_RF_RW_SUPPORT
-		case RTPRIV_IOCTL_RF:
-			RTMPIoctlRF(pAd, wrq);
-			break;
-#endif // RTMP_RF_RW_SUPPORT //
-
 #endif // DBG //
 
         case SIOCETHTOOL:
@@ -6826,921 +5607,243 @@
 	return Status;
 }
 
-INT	Set_UseNewRateAdapt_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-
-	// insert code here
-	UCHAR i;
-	MAC_TABLE_ENTRY		*pEntry = NULL;	
-	for (i=0; i<MAX_LEN_OF_MAC_TABLE; i++){
-		pEntry =	&pAd->MacTab.Content[i];
-		pEntry->useNewRateAdapt = simple_strtol(arg, 0, 10);
-	}
-	return TRUE;	
-}
-
+#ifdef DBG
 /* 
     ==========================================================================
     Description:
-        Set SSID
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
+        Read / Write MAC
+    Arguments:
+        pAd                    Pointer to our adapter
+        wrq                         Pointer to the ioctl argument
+
+    Return Value:
+        None
+
+    Note:
+        Usage: 
+               1.) iwpriv ra0 mac 0        ==> read MAC where Addr=0x0
+               2.) iwpriv ra0 mac 0=12     ==> write MAC where Addr=0x0, value=12
     ==========================================================================
 */
-INT Set_SSID_Proc(
-    IN  PRTMP_ADAPTER   pAdapter, 
-    IN  PSTRING          arg)
+VOID RTMPIoctlMAC(
+	IN	PRTMP_ADAPTER	pAd, 
+	IN	struct iwreq	*wrq)
 {
-    NDIS_802_11_SSID                    Ssid, *pSsid=NULL;
-    BOOLEAN                             StateMachineTouched = FALSE;
-    int                                 success = TRUE;
+	PSTRING				this_char;
+	PSTRING				value;
+	INT					j = 0, k = 0;
+	STRING				msg[1024];
+	STRING				arg[255];
+	ULONG				macAddr = 0;
+	UCHAR				temp[16];
+	STRING				temp2[16];
+	UINT32				macValue = 0;
+	INT					Status;
+	BOOLEAN				bIsPrintAllMAC = FALSE;
 
-    if( strlen(arg) <= MAX_LEN_OF_SSID)
-    {
-        NdisZeroMemory(&Ssid, sizeof(NDIS_802_11_SSID));
-        if (strlen(arg) != 0)
-        {
-            NdisMoveMemory(Ssid.Ssid, arg, strlen(arg));
-            Ssid.SsidLength = strlen(arg);
-        }
-        else   //ANY ssid
-        {    
-            Ssid.SsidLength = 0; 
-	    memcpy(Ssid.Ssid, "", 0);
-		pAdapter->StaCfg.BssType = BSS_INFRA;	
-		pAdapter->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
-        pAdapter->StaCfg.WepStatus  = Ndis802_11EncryptionDisabled;		    
-	}	 
-        pSsid = &Ssid;
 
-        if (pAdapter->Mlme.CntlMachine.CurrState != CNTL_IDLE)
-        {
-            RTMP_MLME_RESET_STATE_MACHINE(pAdapter);
-            DBGPRINT(RT_DEBUG_TRACE, ("!!! MLME busy, reset MLME state machine !!!\n"));
-        }
+	memset(msg, 0x00, 1024);
+	memset(arg, 0x00, 255);
+	if (wrq->u.data.length > 1) //No parameters.
+	{   
+	    Status = copy_from_user(arg, wrq->u.data.pointer, (wrq->u.data.length > 255) ? 255 : wrq->u.data.length);
+		sprintf(msg, "\n");
+		
+		//Parsing Read or Write
+	    this_char = arg;
+		if (!*this_char)
+			goto next;
 
-		if ((pAdapter->StaCfg.WpaPassPhraseLen >= 8) &&
-			(pAdapter->StaCfg.WpaPassPhraseLen <= 64))
-		{
-			STRING passphrase_str[65] = {0};			
-			UCHAR keyMaterial[40];
-			
-			RTMPMoveMemory(passphrase_str, pAdapter->StaCfg.WpaPassPhrase, pAdapter->StaCfg.WpaPassPhraseLen);
-			RTMPZeroMemory(pAdapter->StaCfg.PMK, 32);
-			if (pAdapter->StaCfg.WpaPassPhraseLen == 64)
+		if ((value = rtstrchr(this_char, '=')) != NULL)
+			*value++ = 0;
+
+		if (!value || !*value)
+		{ //Read
+			// Sanity check
+			if(strlen(this_char) > 4)
+				goto next;
+
+			j = strlen(this_char);
+			while(j-- > 0)
 			{
-			    AtoH((PSTRING) pAdapter->StaCfg.WpaPassPhrase, pAdapter->StaCfg.PMK, 32);
+				if(this_char[j] > 'f' || this_char[j] < '0')
+					return;
 			}
-			else
+
+			// Mac Addr
+			k = j = strlen(this_char);
+			while(j-- > 0)
 			{
-			    PasswordHash((PSTRING) pAdapter->StaCfg.WpaPassPhrase, Ssid.Ssid, Ssid.SsidLength, keyMaterial);
-			    NdisMoveMemory(pAdapter->StaCfg.PMK, keyMaterial, 32);		
+				this_char[4-k+j] = this_char[j];
 			}
-		}
-
-        pAdapter->MlmeAux.CurrReqIsFromNdis = TRUE;
-        pAdapter->StaCfg.bScanReqIsFromWebUI = FALSE;
-		pAdapter->bConfigChanged = TRUE;
-
-        MlmeEnqueue(pAdapter, 
-                    MLME_CNTL_STATE_MACHINE, 
-                    OID_802_11_SSID,
-                    sizeof(NDIS_802_11_SSID),
-                    (VOID *)pSsid, 0);
-
-        StateMachineTouched = TRUE;
-        DBGPRINT(RT_DEBUG_TRACE, ("Set_SSID_Proc::(Len=%d,Ssid=%s)\n", Ssid.SsidLength, Ssid.Ssid));
-    }
-    else
-        success = FALSE;
+			
+			while(k < 4)
+				this_char[3-k++]='0';
+			this_char[4]='\0';
 
-    if (StateMachineTouched) // Upper layer sent a MLME-related operations
-    	RTMP_MLME_HANDLER(pAdapter);
+			if(strlen(this_char) == 4)
+			{
+				AtoH(this_char, temp, 2);
+				macAddr = *temp*256 + temp[1];					
+				if (macAddr < 0xFFFF)
+				{
+					RTMP_IO_READ32(pAd, macAddr, &macValue);
+					DBGPRINT(RT_DEBUG_TRACE, ("MacAddr=%lx, MacValue=%x\n", macAddr, macValue));
+					sprintf(msg+strlen(msg), "[0x%08lX]:%08X  ", macAddr , macValue);
+				}
+				else
+				{//Invalid parametes, so default printk all mac
+					bIsPrintAllMAC = TRUE;
+					goto next;
+				}
+			}
+		}
+		else
+		{ //Write
+			memcpy(&temp2, value, strlen(value));
+			temp2[strlen(value)] = '\0';
 
-    return success;
-}
+			// Sanity check
+			if((strlen(this_char) > 4) || strlen(temp2) > 8)
+				goto next;
 
-#ifdef WMM_SUPPORT
-/* 
-    ==========================================================================
-    Description:
-        Set WmmCapable Enable or Disable
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT	Set_WmmCapable_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-	BOOLEAN	bWmmCapable;
+			j = strlen(this_char);
+			while(j-- > 0)
+			{
+				if(this_char[j] > 'f' || this_char[j] < '0')
+					return;
+			}
 
-	bWmmCapable = simple_strtol(arg, 0, 10);
+			j = strlen(temp2);
+			while(j-- > 0)
+			{
+				if(temp2[j] > 'f' || temp2[j] < '0')
+					return;
+			}
 
-	if ((bWmmCapable == 1)
-		)
-		pAd->CommonCfg.bWmmCapable = TRUE;
-	else if (bWmmCapable == 0)
-		pAd->CommonCfg.bWmmCapable = FALSE;
-	else
-		return FALSE;  //Invalid argument 
-	
-	DBGPRINT(RT_DEBUG_TRACE, ("Set_WmmCapable_Proc::(bWmmCapable=%d)\n", 
-		pAd->CommonCfg.bWmmCapable));
+			//MAC Addr
+			k = j = strlen(this_char);
+			while(j-- > 0)
+			{
+				this_char[4-k+j] = this_char[j];
+			}
 
-	return TRUE;
-}
-#endif // WMM_SUPPORT //
+			while(k < 4)
+				this_char[3-k++]='0';
+			this_char[4]='\0';
 
-/* 
-    ==========================================================================
-    Description:
-        Set Network Type(Infrastructure/Adhoc mode)
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_NetworkType_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING          arg)
-{
-    UINT32	Value = 0;
-
-    if (strcmp(arg, "Adhoc") == 0)
-	{
-		if (pAd->StaCfg.BssType != BSS_ADHOC)
-		{				    
-			// Config has changed
-			pAd->bConfigChanged = TRUE;
-            if (MONITOR_ON(pAd))
-            {
-                RTMP_IO_WRITE32(pAd, RX_FILTR_CFG, STANORMAL);
-                RTMP_IO_READ32(pAd, MAC_SYS_CTRL, &Value);
-				Value &= (~0x80);
-				RTMP_IO_WRITE32(pAd, MAC_SYS_CTRL, Value);
-                OPSTATUS_CLEAR_FLAG(pAd, fOP_STATUS_MEDIA_STATE_CONNECTED);
-                pAd->StaCfg.bAutoReconnect = TRUE;
-                LinkDown(pAd, FALSE);
-            }
-			if (INFRA_ON(pAd))
+			//MAC value
+			k = j = strlen(temp2);
+			while(j-- > 0)
 			{
-				//BOOLEAN Cancelled;
-				// Set the AutoReconnectSsid to prevent it reconnect to old SSID
-				// Since calling this indicate user don't want to connect to that SSID anymore.
-				pAd->MlmeAux.AutoReconnectSsidLen= 32;
-				NdisZeroMemory(pAd->MlmeAux.AutoReconnectSsid, pAd->MlmeAux.AutoReconnectSsidLen);		
-				
-				LinkDown(pAd, FALSE);
-
-				DBGPRINT(RT_DEBUG_TRACE, ("NDIS_STATUS_MEDIA_DISCONNECT Event BB!\n"));
+				temp2[8-k+j] = temp2[j];
 			}
-		}			
-		pAd->StaCfg.BssType = BSS_ADHOC;
-        pAd->net_dev->type = pAd->StaCfg.OriDevType;
-		DBGPRINT(RT_DEBUG_TRACE, ("===>Set_NetworkType_Proc::(AD-HOC)\n"));
-	}
-    else if (strcmp(arg, "Infra") == 0)
-	{
-		if (pAd->StaCfg.BssType != BSS_INFRA)
-		{			    
-			// Config has changed
-			pAd->bConfigChanged = TRUE;
-            if (MONITOR_ON(pAd))
-            {
-                RTMP_IO_WRITE32(pAd, RX_FILTR_CFG, STANORMAL);
-                RTMP_IO_READ32(pAd, MAC_SYS_CTRL, &Value);
-				Value &= (~0x80);
-				RTMP_IO_WRITE32(pAd, MAC_SYS_CTRL, Value);
-                OPSTATUS_CLEAR_FLAG(pAd, fOP_STATUS_MEDIA_STATE_CONNECTED);
-                pAd->StaCfg.bAutoReconnect = TRUE;
-                LinkDown(pAd, FALSE);
-            }
-			if (ADHOC_ON(pAd))
-			{
-				// Set the AutoReconnectSsid to prevent it reconnect to old SSID
-				// Since calling this indicate user don't want to connect to that SSID anymore.
-				pAd->MlmeAux.AutoReconnectSsidLen= 32;
-				NdisZeroMemory(pAd->MlmeAux.AutoReconnectSsid, pAd->MlmeAux.AutoReconnectSsidLen);			
 			
-				LinkDown(pAd, FALSE);
-			}
-		}			
-		pAd->StaCfg.BssType = BSS_INFRA;
-        pAd->net_dev->type = pAd->StaCfg.OriDevType;
-		DBGPRINT(RT_DEBUG_TRACE, ("===>Set_NetworkType_Proc::(INFRA)\n"));            
-	}
-    else if (strcmp(arg, "Monitor") == 0)
-    {
-			UCHAR	bbpValue = 0;
-			BCN_TIME_CFG_STRUC csr;
-			OPSTATUS_CLEAR_FLAG(pAd, fOP_STATUS_INFRA_ON);
-            OPSTATUS_CLEAR_FLAG(pAd, fOP_STATUS_ADHOC_ON);
-			OPSTATUS_SET_FLAG(pAd, fOP_STATUS_MEDIA_STATE_CONNECTED);
-			// disable all periodic state machine
-			pAd->StaCfg.bAutoReconnect = FALSE;
-			// reset all mlme state machine
-			RTMP_MLME_RESET_STATE_MACHINE(pAd);
-			DBGPRINT(RT_DEBUG_TRACE, ("fOP_STATUS_MEDIA_STATE_CONNECTED \n"));
-            if (pAd->CommonCfg.CentralChannel == 0)
-            {
-#ifdef DOT11_N_SUPPORT
-                if (pAd->CommonCfg.PhyMode == PHY_11AN_MIXED)
-                    pAd->CommonCfg.CentralChannel = 36;
-                else
-#endif // DOT11_N_SUPPORT //
-                    pAd->CommonCfg.CentralChannel = 6;
-            }
-#ifdef DOT11_N_SUPPORT
-            else
-                N_ChannelCheck(pAd);
-#endif // DOT11_N_SUPPORT //
+			while(k < 8)
+				temp2[7-k++]='0';
+			temp2[8]='\0';
 
-#ifdef DOT11_N_SUPPORT
-			if (pAd->CommonCfg.PhyMode >= PHY_11ABGN_MIXED &&
-                pAd->CommonCfg.RegTransmitSetting.field.BW == BW_40 &&
-                pAd->CommonCfg.RegTransmitSetting.field.EXTCHA == EXTCHA_ABOVE)
-			{
-				// 40MHz ,control channel at lower
-				RTMP_BBP_IO_READ8_BY_REG_ID(pAd, BBP_R4, &bbpValue);
-				bbpValue &= (~0x18);
-				bbpValue |= 0x10;
-				RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R4, bbpValue);
-				pAd->CommonCfg.BBPCurrentBW = BW_40;
-				//  RX : control channel at lower 
-				RTMP_BBP_IO_READ8_BY_REG_ID(pAd, BBP_R3, &bbpValue);
-				bbpValue &= (~0x20);
-				RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R3, bbpValue);
-
-				RTMP_IO_READ32(pAd, TX_BAND_CFG, &Value);
-				Value &= 0xfffffffe;
-				RTMP_IO_WRITE32(pAd, TX_BAND_CFG, Value);
-				pAd->CommonCfg.CentralChannel = pAd->CommonCfg.Channel + 2;
-                AsicSwitchChannel(pAd, pAd->CommonCfg.CentralChannel, FALSE);
-			    AsicLockChannel(pAd, pAd->CommonCfg.CentralChannel);
-                DBGPRINT(RT_DEBUG_TRACE, ("BW_40 ,control_channel(%d), CentralChannel(%d) \n", 
-                                           pAd->CommonCfg.Channel,
-                                           pAd->CommonCfg.CentralChannel));
-			}
-			else if (pAd->CommonCfg.PhyMode >= PHY_11ABGN_MIXED &&
-                     pAd->CommonCfg.RegTransmitSetting.field.BW == BW_40 &&
-                     pAd->CommonCfg.RegTransmitSetting.field.EXTCHA == EXTCHA_BELOW)
-			{
-				// 40MHz ,control channel at upper
-				RTMP_BBP_IO_READ8_BY_REG_ID(pAd, BBP_R4, &bbpValue);
-				bbpValue &= (~0x18);
-				bbpValue |= 0x10;
-				RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R4, bbpValue);
-				pAd->CommonCfg.BBPCurrentBW = BW_40;
-				RTMP_IO_READ32(pAd, TX_BAND_CFG, &Value);
-				Value |= 0x1;
-				RTMP_IO_WRITE32(pAd, TX_BAND_CFG, Value);
-				
-				RTMP_BBP_IO_READ8_BY_REG_ID(pAd, BBP_R3, &bbpValue);
-				bbpValue |= (0x20);
-				RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R3, bbpValue);
-				pAd->CommonCfg.CentralChannel = pAd->CommonCfg.Channel - 2;
-                AsicSwitchChannel(pAd, pAd->CommonCfg.CentralChannel, FALSE);
-			    AsicLockChannel(pAd, pAd->CommonCfg.CentralChannel);
-                DBGPRINT(RT_DEBUG_TRACE, ("BW_40 ,control_channel(%d), CentralChannel(%d) \n", 
-                                           pAd->CommonCfg.Channel,
-                                           pAd->CommonCfg.CentralChannel));
-			}
-			else
-#endif // DOT11_N_SUPPORT //
 			{
-				// 20MHz
-				RTMP_BBP_IO_READ8_BY_REG_ID(pAd, BBP_R4, &bbpValue);
-				bbpValue &= (~0x18);
-				RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R4, bbpValue);
-				pAd->CommonCfg.BBPCurrentBW = BW_20;
-                AsicSwitchChannel(pAd, pAd->CommonCfg.Channel, FALSE);
-			    AsicLockChannel(pAd, pAd->CommonCfg.Channel);
-				DBGPRINT(RT_DEBUG_TRACE, ("BW_20, Channel(%d)\n", pAd->CommonCfg.Channel));
-			}
-			// Enable Rx with promiscuous reception
-			RTMP_IO_WRITE32(pAd, RX_FILTR_CFG, 0x3);
-			// ASIC supporsts sniffer function with replacing RSSI with timestamp.
-			//RTMP_IO_READ32(pAdapter, MAC_SYS_CTRL, &Value);
-			//Value |= (0x80);
-			//RTMP_IO_WRITE32(pAdapter, MAC_SYS_CTRL, Value);
-			// disable sync
-			RTMP_IO_READ32(pAd, BCN_TIME_CFG, &csr.word);
-			csr.field.bBeaconGen = 0;
-			csr.field.bTBTTEnable = 0;
-			csr.field.TsfSyncMode = 0;
-			RTMP_IO_WRITE32(pAd, BCN_TIME_CFG, csr.word);
-            
-			pAd->StaCfg.BssType = BSS_MONITOR;
-            pAd->net_dev->type = ARPHRD_IEEE80211_PRISM; //ARPHRD_IEEE80211; // IEEE80211
-			DBGPRINT(RT_DEBUG_TRACE, ("===>Set_NetworkType_Proc::(MONITOR)\n"));
-    }
-
-    // Reset Ralink supplicant to not use, it will be set to start when UI set PMK key
-    pAd->StaCfg.WpaState = SS_NOTUSE;
-
-    DBGPRINT(RT_DEBUG_TRACE, ("Set_NetworkType_Proc::(NetworkType=%d)\n", pAd->StaCfg.BssType));
-
-    return TRUE;
-}
-
-/* 
-    ==========================================================================
-    Description:
-        Set Authentication mode
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_AuthMode_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING          arg)
-{
-    if ((strcmp(arg, "WEPAUTO") == 0) || (strcmp(arg, "wepauto") == 0))
-        pAd->StaCfg.AuthMode = Ndis802_11AuthModeAutoSwitch;
-    else if ((strcmp(arg, "OPEN") == 0) || (strcmp(arg, "open") == 0))
-        pAd->StaCfg.AuthMode = Ndis802_11AuthModeOpen;
-    else if ((strcmp(arg, "SHARED") == 0) || (strcmp(arg, "shared") == 0))
-        pAd->StaCfg.AuthMode = Ndis802_11AuthModeShared;
-    else if ((strcmp(arg, "WPAPSK") == 0) || (strcmp(arg, "wpapsk") == 0))
-        pAd->StaCfg.AuthMode = Ndis802_11AuthModeWPAPSK;
-    else if ((strcmp(arg, "WPANONE") == 0) || (strcmp(arg, "wpanone") == 0))
-        pAd->StaCfg.AuthMode = Ndis802_11AuthModeWPANone;
-    else if ((strcmp(arg, "WPA2PSK") == 0) || (strcmp(arg, "wpa2psk") == 0))
-        pAd->StaCfg.AuthMode = Ndis802_11AuthModeWPA2PSK;    
-    else
-        return FALSE;  
-
-    pAd->StaCfg.PortSecured = WPA_802_1X_PORT_NOT_SECURED;
+				AtoH(this_char, temp, 2);
+				macAddr = *temp*256 + temp[1];
 
-    DBGPRINT(RT_DEBUG_TRACE, ("Set_AuthMode_Proc::(AuthMode=%d)\n", pAd->StaCfg.AuthMode));
+				AtoH(temp2, temp, 4);
+				macValue = *temp*256*256*256 + temp[1]*256*256 + temp[2]*256 + temp[3];
 
-    return TRUE;
-}
+				// debug mode
+				if (macAddr == (HW_DEBUG_SETTING_BASE + 4))
+				{
+					// 0x2bf4: byte0 non-zero: enable R17 tuning, 0: disable R17 tuning
+                    if (macValue & 0x000000ff) 
+                    {
+                        pAd->BbpTuning.bEnable = TRUE;
+                        DBGPRINT(RT_DEBUG_TRACE,("turn on R17 tuning\n"));
+                    }
+                    else
+                    {
+                        UCHAR R66;
+                        pAd->BbpTuning.bEnable = FALSE;
+                        R66 = 0x26 + GET_LNA_GAIN(pAd);
+#ifdef RALINK_ATE
+						if (ATE_ON(pAd))
+						{
+							ATE_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R66, (0x26 + GET_LNA_GAIN(pAd)));
+						}
+						else
+#endif // RALINK_ATE //
+						{
+							RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R66, (0x26 + GET_LNA_GAIN(pAd)));
+						}
+                        DBGPRINT(RT_DEBUG_TRACE,("turn off R17 tuning, restore to 0x%02x\n", R66));
+                    }
+					return;
+				}
 
-/* 
-    ==========================================================================
-    Description:
-        Set Encryption Type
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_EncrypType_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING          arg)
-{
-    if ((strcmp(arg, "NONE") == 0) || (strcmp(arg, "none") == 0))
-    {
-        if (pAd->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-            return TRUE;    // do nothing
-            
-        pAd->StaCfg.WepStatus     = Ndis802_11WEPDisabled;
-        pAd->StaCfg.PairCipher    = Ndis802_11WEPDisabled;
-	    pAd->StaCfg.GroupCipher   = Ndis802_11WEPDisabled;
-    }
-    else if ((strcmp(arg, "WEP") == 0) || (strcmp(arg, "wep") == 0))
-    {
-        if (pAd->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-            return TRUE;    // do nothing
-            
-        pAd->StaCfg.WepStatus     = Ndis802_11WEPEnabled;
-        pAd->StaCfg.PairCipher    = Ndis802_11WEPEnabled;
-	    pAd->StaCfg.GroupCipher   = Ndis802_11WEPEnabled;		
-    }
-    else if ((strcmp(arg, "TKIP") == 0) || (strcmp(arg, "tkip") == 0))
-    {
-        if (pAd->StaCfg.AuthMode < Ndis802_11AuthModeWPA)
-            return TRUE;    // do nothing
-            
-        pAd->StaCfg.WepStatus     = Ndis802_11Encryption2Enabled;
-        pAd->StaCfg.PairCipher    = Ndis802_11Encryption2Enabled;
-	    pAd->StaCfg.GroupCipher   = Ndis802_11Encryption2Enabled;
-    }
-    else if ((strcmp(arg, "AES") == 0) || (strcmp(arg, "aes") == 0))
-    {
-        if (pAd->StaCfg.AuthMode < Ndis802_11AuthModeWPA)
-            return TRUE;    // do nothing
-            
-        pAd->StaCfg.WepStatus     = Ndis802_11Encryption3Enabled;
-        pAd->StaCfg.PairCipher    = Ndis802_11Encryption3Enabled;
-	    pAd->StaCfg.GroupCipher   = Ndis802_11Encryption3Enabled;
-    }
-    else
-        return FALSE;
+				DBGPRINT(RT_DEBUG_TRACE, ("MacAddr=%02lx, MacValue=0x%x\n", macAddr, macValue));
+				
+				RTMP_IO_WRITE32(pAd, macAddr, macValue);
+				sprintf(msg+strlen(msg), "[0x%08lX]:%08X  ", macAddr, macValue);
+			}
+		}
+	}
+	else
+		bIsPrintAllMAC = TRUE;
+next:
+	if (bIsPrintAllMAC)
+	{
+		struct file		*file_w;
+		PSTRING			fileName = "MacDump.txt";
+		mm_segment_t	orig_fs;
 
-    pAd->StaCfg.OrigWepStatus = pAd->StaCfg.WepStatus;
+		orig_fs = get_fs();
+		set_fs(KERNEL_DS); 
 
-#ifdef DOT11_N_SUPPORT
-	if ((pAd->StaCfg.BssType == BSS_ADHOC) &&
-		(pAd->CommonCfg.HT_DisallowTKIP == TRUE))
-	{
-		ULONG tmpPhymode = PHY_11BG_MIXED;
-		if ((pAd->StaCfg.WepStatus == Ndis802_11WEPEnabled) ||
-			(pAd->StaCfg.WepStatus == Ndis802_11Encryption2Enabled))
+		// open file
+		file_w = filp_open(fileName, O_WRONLY|O_CREAT, 0);
+		if (IS_ERR(file_w)) 
 		{
-			if (pAd->CommonCfg.PhyMode >= PHY_11ABGN_MIXED)
-			{				
-				switch(pAd->CommonCfg.PhyMode)
+			DBGPRINT(RT_DEBUG_TRACE, ("-->2) %s: Error %ld opening %s\n", __FUNCTION__, -PTR_ERR(file_w), fileName));
+		}
+		else 
+		{
+			if (file_w->f_op && file_w->f_op->write) 
+			{
+				file_w->f_pos = 0;
+				macAddr = 0x1000;
+				
+				while (macAddr <= 0x1800)
 				{
-					case PHY_11ABGN_MIXED:
-					case PHY_11AGN_MIXED:
-						tmpPhymode = PHY_11ABG_MIXED;
-						break;					
-					case PHY_11N_2_4G:
-					case PHY_11GN_MIXED:
-						tmpPhymode = PHY_11G;
-						break;
-					case PHY_11AN_MIXED:
-					case PHY_11N_5G:
-						tmpPhymode = PHY_11A;
-						break;
-					case PHY_11BGN_MIXED:
-						tmpPhymode = PHY_11BG_MIXED;
-						break;
+					RTMP_IO_READ32(pAd, macAddr, &macValue);
+					sprintf(msg, "%08lx = %08X\n", macAddr, macValue);
+					
+					// write data to file
+					file_w->f_op->write(file_w, msg, strlen(msg), &file_w->f_pos);
+					
+					printk("%s", msg);
+					macAddr += 4;
 				}
-				RTMPSetPhyMode(pAd, tmpPhymode);
+				sprintf(msg, "\nDump all MAC values to %s\n", fileName);
 			}
+			filp_close(file_w, NULL);
 		}
-		else
-		{
-			tmpPhymode = pAd->CommonCfg.DesiredPhyMode;
-			RTMPSetPhyMode(pAd, tmpPhymode);
-		}
+		set_fs(orig_fs); 
 	}
-#endif // DOT11_N_SUPPORT //
-
-    DBGPRINT(RT_DEBUG_TRACE, ("Set_EncrypType_Proc::(EncrypType=%d)\n", pAd->StaCfg.WepStatus));
-
-    return TRUE;
-}
-
-/* 
-    ==========================================================================
-    Description:
-        Set Default Key ID
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_DefaultKeyID_Proc(
-    IN  PRTMP_ADAPTER   pAdapter, 
-    IN  PSTRING          arg)
-{
-    ULONG                               KeyIdx;
-
-    KeyIdx = simple_strtol(arg, 0, 10);
-    if((KeyIdx >= 1 ) && (KeyIdx <= 4))
-        pAdapter->StaCfg.DefaultKeyId = (UCHAR) (KeyIdx - 1 );
-    else
-        return FALSE;  //Invalid argument 
-
-    DBGPRINT(RT_DEBUG_TRACE, ("Set_DefaultKeyID_Proc::(DefaultKeyID=%d)\n", pAdapter->StaCfg.DefaultKeyId));
-
-    return TRUE;
-}
-
-/* 
-    ==========================================================================
-    Description:
-        Set WEP KEY1
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_Key1_Proc(
-    IN  PRTMP_ADAPTER   pAdapter, 
-    IN  PSTRING          arg)
-{
-    int                                 KeyLen;
-    int                                 i;
-    UCHAR                               CipherAlg=CIPHER_WEP64;
-
-    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-        return TRUE;    // do nothing
-    
-    KeyLen = strlen(arg);
-
-    switch (KeyLen)
-    {
-        case 5: //wep 40 Ascii type
-            pAdapter->SharedKey[BSS0][0].KeyLen = KeyLen;
-            memcpy(pAdapter->SharedKey[BSS0][0].Key, arg, KeyLen);
-            CipherAlg = CIPHER_WEP64;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key1_Proc::(Key1=%s and type=%s)\n", arg, "Ascii"));       
-            break;
-        case 10: //wep 40 Hex type
-            for(i=0; i < KeyLen; i++)
-            {
-                if( !isxdigit(*(arg+i)) )
-                    return FALSE;  //Not Hex value;
-            }
-            pAdapter->SharedKey[BSS0][0].KeyLen = KeyLen / 2 ;
-            AtoH(arg, pAdapter->SharedKey[BSS0][0].Key, KeyLen / 2);
-            CipherAlg = CIPHER_WEP64;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key1_Proc::(Key1=%s and type=%s)\n", arg, "Hex"));     
-            break;
-        case 13: //wep 104 Ascii type
-            pAdapter->SharedKey[BSS0][0].KeyLen = KeyLen;
-            memcpy(pAdapter->SharedKey[BSS0][0].Key, arg, KeyLen);
-            CipherAlg = CIPHER_WEP128;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key1_Proc::(Key1=%s and type=%s)\n", arg, "Ascii"));       
-            break;
-        case 26: //wep 104 Hex type
-            for(i=0; i < KeyLen; i++)
-            {
-                if( !isxdigit(*(arg+i)) )
-                    return FALSE;  //Not Hex value;
-            }
-            pAdapter->SharedKey[BSS0][0].KeyLen = KeyLen / 2 ;
-            AtoH(arg, pAdapter->SharedKey[BSS0][0].Key, KeyLen / 2);
-            CipherAlg = CIPHER_WEP128;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key1_Proc::(Key1=%s and type=%s)\n", arg, "Hex"));     
-            break;
-        default: //Invalid argument 
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key1_Proc::Invalid argument (=%s)\n", arg));       
-            return FALSE;
-    }
-    
-    pAdapter->SharedKey[BSS0][0].CipherAlg = CipherAlg;
-
-    // Set keys (into ASIC)
-    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-        ;   // not support
-    else    // Old WEP stuff
-    {
-        AsicAddSharedKeyEntry(pAdapter, 
-                              0, 
-                              0, 
-                              &pAdapter->SharedKey[BSS0][0]);
-    }
-    
-    return TRUE;
-}
-/* 
-    ==========================================================================
-
-    Description:
-        Set WEP KEY2
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_Key2_Proc(
-    IN  PRTMP_ADAPTER   pAdapter, 
-    IN  PSTRING          arg)
-{
-    int                                 KeyLen;
-    int                                 i;
-    UCHAR                               CipherAlg=CIPHER_WEP64;
-
-    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-        return TRUE;    // do nothing
-    
-    KeyLen = strlen(arg);
-
-    switch (KeyLen)
-    {
-        case 5: //wep 40 Ascii type
-            pAdapter->SharedKey[BSS0][1].KeyLen = KeyLen;
-            memcpy(pAdapter->SharedKey[BSS0][1].Key, arg, KeyLen);
-            CipherAlg = CIPHER_WEP64;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key2_Proc::(Key2=%s and type=%s)\n", arg, "Ascii"));
-            break;
-        case 10: //wep 40 Hex type
-            for(i=0; i < KeyLen; i++)
-            {
-                if( !isxdigit(*(arg+i)) )
-                    return FALSE;  //Not Hex value;
-            }
-            pAdapter->SharedKey[BSS0][1].KeyLen = KeyLen / 2 ;
-            AtoH(arg, pAdapter->SharedKey[BSS0][1].Key, KeyLen / 2);
-            CipherAlg = CIPHER_WEP64;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key2_Proc::(Key2=%s and type=%s)\n", arg, "Hex"));
-            break;
-        case 13: //wep 104 Ascii type
-            pAdapter->SharedKey[BSS0][1].KeyLen = KeyLen;
-            memcpy(pAdapter->SharedKey[BSS0][1].Key, arg, KeyLen);
-            CipherAlg = CIPHER_WEP128;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key2_Proc::(Key2=%s and type=%s)\n", arg, "Ascii"));
-            break;
-        case 26: //wep 104 Hex type
-            for(i=0; i < KeyLen; i++)
-            {
-                if( !isxdigit(*(arg+i)) )
-                    return FALSE;  //Not Hex value;
-            }
-            pAdapter->SharedKey[BSS0][1].KeyLen = KeyLen / 2 ;
-            AtoH(arg, pAdapter->SharedKey[BSS0][1].Key, KeyLen / 2);
-            CipherAlg = CIPHER_WEP128;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key2_Proc::(Key2=%s and type=%s)\n", arg, "Hex"));
-            break;
-        default: //Invalid argument 
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key2_Proc::Invalid argument (=%s)\n", arg));
-            return FALSE;
-    }
-    pAdapter->SharedKey[BSS0][1].CipherAlg = CipherAlg;
-
-    // Set keys (into ASIC)
-    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-        ;   // not support
-    else    // Old WEP stuff
-    {
-        AsicAddSharedKeyEntry(pAdapter, 
-                              0, 
-                              1, 
-                              &pAdapter->SharedKey[BSS0][1]);
-    }        
-    
-    return TRUE;
-}
-/* 
-    ==========================================================================
-    Description:
-        Set WEP KEY3
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_Key3_Proc(
-    IN  PRTMP_ADAPTER   pAdapter, 
-    IN  PSTRING          arg)
-{
-    int                                 KeyLen;
-    int                                 i;
-    UCHAR                               CipherAlg=CIPHER_WEP64;
-
-    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-        return TRUE;    // do nothing
-    
-    KeyLen = strlen(arg);
-
-    switch (KeyLen)
-    {
-        case 5: //wep 40 Ascii type
-            pAdapter->SharedKey[BSS0][2].KeyLen = KeyLen;
-            memcpy(pAdapter->SharedKey[BSS0][2].Key, arg, KeyLen);
-            CipherAlg = CIPHER_WEP64;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key3_Proc::(Key3=%s and type=Ascii)\n", arg));
-            break;
-        case 10: //wep 40 Hex type
-            for(i=0; i < KeyLen; i++)
-            {
-                if( !isxdigit(*(arg+i)) )
-                    return FALSE;  //Not Hex value;
-            }
-            pAdapter->SharedKey[BSS0][2].KeyLen = KeyLen / 2 ;
-            AtoH(arg, pAdapter->SharedKey[BSS0][2].Key, KeyLen / 2);
-            CipherAlg = CIPHER_WEP64;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key3_Proc::(Key3=%s and type=Hex)\n", arg));
-            break;
-        case 13: //wep 104 Ascii type
-            pAdapter->SharedKey[BSS0][2].KeyLen = KeyLen;
-            memcpy(pAdapter->SharedKey[BSS0][2].Key, arg, KeyLen);
-            CipherAlg = CIPHER_WEP128;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key3_Proc::(Key3=%s and type=Ascii)\n", arg));
-            break;
-        case 26: //wep 104 Hex type
-            for(i=0; i < KeyLen; i++)
-            {
-                if( !isxdigit(*(arg+i)) )
-                    return FALSE;  //Not Hex value;
-            }
-            pAdapter->SharedKey[BSS0][2].KeyLen = KeyLen / 2 ;
-            AtoH(arg, pAdapter->SharedKey[BSS0][2].Key, KeyLen / 2);
-            CipherAlg = CIPHER_WEP128;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key3_Proc::(Key3=%s and type=Hex)\n", arg));
-            break;
-        default: //Invalid argument 
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key3_Proc::Invalid argument (=%s)\n", arg));
-            return FALSE;
-    }
-    pAdapter->SharedKey[BSS0][2].CipherAlg = CipherAlg;
-    
-    // Set keys (into ASIC)
-    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-        ;   // not support
-    else    // Old WEP stuff
-    {
-        AsicAddSharedKeyEntry(pAdapter, 
-                              0, 
-                              2, 
-                              &pAdapter->SharedKey[BSS0][2]);
-    }
-    
-    return TRUE;
-}
-/* 
-    ==========================================================================
-    Description:
-        Set WEP KEY4
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_Key4_Proc(
-    IN  PRTMP_ADAPTER   pAdapter, 
-    IN  PSTRING          arg)
-{
-    int                                 KeyLen;
-    int                                 i;
-    UCHAR                               CipherAlg=CIPHER_WEP64;
-
-    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-        return TRUE;    // do nothing
-    
-    KeyLen = strlen(arg);
-
-    switch (KeyLen)
-    {
-        case 5: //wep 40 Ascii type
-            pAdapter->SharedKey[BSS0][3].KeyLen = KeyLen;
-            memcpy(pAdapter->SharedKey[BSS0][3].Key, arg, KeyLen);
-            CipherAlg = CIPHER_WEP64;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key4_Proc::(Key4=%s and type=%s)\n", arg, "Ascii"));
-            break;
-        case 10: //wep 40 Hex type
-            for(i=0; i < KeyLen; i++)
-            {
-                if( !isxdigit(*(arg+i)) )
-                    return FALSE;  //Not Hex value;
-            }
-            pAdapter->SharedKey[BSS0][3].KeyLen = KeyLen / 2 ;
-            AtoH(arg, pAdapter->SharedKey[BSS0][3].Key, KeyLen / 2);
-            CipherAlg = CIPHER_WEP64;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key4_Proc::(Key4=%s and type=%s)\n", arg, "Hex"));
-            break;
-        case 13: //wep 104 Ascii type
-            pAdapter->SharedKey[BSS0][3].KeyLen = KeyLen;
-            memcpy(pAdapter->SharedKey[BSS0][3].Key, arg, KeyLen);
-            CipherAlg = CIPHER_WEP128;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key4_Proc::(Key4=%s and type=%s)\n", arg, "Ascii"));
-            break;
-        case 26: //wep 104 Hex type
-            for(i=0; i < KeyLen; i++)
-            {
-                if( !isxdigit(*(arg+i)) )
-                    return FALSE;  //Not Hex value;
-            }
-            pAdapter->SharedKey[BSS0][3].KeyLen = KeyLen / 2 ;
-            AtoH(arg, pAdapter->SharedKey[BSS0][3].Key, KeyLen / 2);
-            CipherAlg = CIPHER_WEP128;
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key4_Proc::(Key4=%s and type=%s)\n", arg, "Hex"));
-            break;
-        default: //Invalid argument 
-            DBGPRINT(RT_DEBUG_TRACE, ("Set_Key4_Proc::Invalid argument (=%s)\n", arg));
-            return FALSE;
-    } 
-    pAdapter->SharedKey[BSS0][3].CipherAlg = CipherAlg;
-    
-    // Set keys (into ASIC)
-    if (pAdapter->StaCfg.AuthMode >= Ndis802_11AuthModeWPA)
-        ;   // not support
-    else    // Old WEP stuff
-    {
-        AsicAddSharedKeyEntry(pAdapter, 
-                              0, 
-                              3, 
-                              &pAdapter->SharedKey[BSS0][3]);
-    }
-    
-    return TRUE;
-}
+	if(strlen(msg) == 1)
+		sprintf(msg+strlen(msg), "===>Error command format!");
 
-/* 
-    ==========================================================================
-    Description:
-        Set WPA PSK key
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_WPAPSK_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING          arg)
-{
-    int status;
+	// Copy the information into the user buffer
+	wrq->u.data.length = strlen(msg);
+	Status = copy_to_user(wrq->u.data.pointer, msg, wrq->u.data.length);
 	
-    if ((pAd->StaCfg.AuthMode != Ndis802_11AuthModeWPAPSK) && 
-        (pAd->StaCfg.AuthMode != Ndis802_11AuthModeWPA2PSK) &&
-	    (pAd->StaCfg.AuthMode != Ndis802_11AuthModeWPANone)
-		)
-        return TRUE;    // do nothing
-        
-    DBGPRINT(RT_DEBUG_TRACE, ("Set_WPAPSK_Proc::(WPAPSK=%s)\n", arg));
-
-	status = RT_CfgSetWPAPSKKey(pAd, arg, pAd->MlmeAux.Ssid, pAd->MlmeAux.SsidLen, pAd->StaCfg.PMK);
-	if (status == FALSE)
-	{
-		DBGPRINT(RT_DEBUG_TRACE, ("Set_WPAPSK_Proc(): Set key failed!\n"));
-		return FALSE;
-	}
-	NdisZeroMemory(pAd->StaCfg.WpaPassPhrase, 64);
-    NdisMoveMemory(pAd->StaCfg.WpaPassPhrase, arg, strlen(arg));
-    pAd->StaCfg.WpaPassPhraseLen = (UINT)strlen(arg);
-
-#ifdef WSC_STA_SUPPORT
-    NdisZeroMemory(pAd->StaCfg.WscControl.WpaPsk, 64);
-    pAd->StaCfg.WscControl.WpaPskLen = 0;    
-    NdisMoveMemory(pAd->StaCfg.WscControl.WpaPsk, arg, strlen(arg));
-    pAd->StaCfg.WscControl.WpaPskLen = (INT)strlen(arg);
-#endif // WSC_STA_SUPPORT //
-
-
-    if(pAd->StaCfg.BssType == BSS_ADHOC &&
-       pAd->StaCfg.AuthMode == Ndis802_11AuthModeWPANone)
-    {
-        pAd->StaCfg.WpaState = SS_NOTUSE;     
-    }
-    else
-    {
-        // Start STA supplicant state machine
-        pAd->StaCfg.WpaState = SS_START;
-    }    
-
-    return TRUE;
-}
-
-/* 
-    ==========================================================================
-    Description:
-        Set Power Saving mode
-    Return:
-        TRUE if all parameters are OK, FALSE otherwise
-    ==========================================================================
-*/
-INT Set_PSMode_Proc(
-    IN  PRTMP_ADAPTER   pAdapter, 
-    IN  PSTRING          arg)
-{
-    if (pAdapter->StaCfg.BssType == BSS_INFRA)
-    {
-        if ((strcmp(arg, "Max_PSP") == 0) || 
-			(strcmp(arg, "max_psp") == 0) ||
-			(strcmp(arg, "MAX_PSP") == 0))
-        {
-            // do NOT turn on PSM bit here, wait until MlmeCheckPsmChange()
-            // to exclude certain situations.
-            if (pAdapter->StaCfg.bWindowsACCAMEnable == FALSE)
-                pAdapter->StaCfg.WindowsPowerMode = Ndis802_11PowerModeMAX_PSP;
-            pAdapter->StaCfg.WindowsBatteryPowerMode = Ndis802_11PowerModeMAX_PSP;
-            OPSTATUS_SET_FLAG(pAdapter, fOP_STATUS_RECEIVE_DTIM);
-            pAdapter->StaCfg.DefaultListenCount = 5;
-        
-        }
-        else if ((strcmp(arg, "Fast_PSP") == 0) || 
-				 (strcmp(arg, "fast_psp") == 0) ||
-                 (strcmp(arg, "FAST_PSP") == 0))
-        {
-            // do NOT turn on PSM bit here, wait until MlmeCheckPsmChange()
-            // to exclude certain situations.
-            OPSTATUS_SET_FLAG(pAdapter, fOP_STATUS_RECEIVE_DTIM);
-            if (pAdapter->StaCfg.bWindowsACCAMEnable == FALSE)
-                pAdapter->StaCfg.WindowsPowerMode = Ndis802_11PowerModeFast_PSP;
-            pAdapter->StaCfg.WindowsBatteryPowerMode = Ndis802_11PowerModeFast_PSP;
-            pAdapter->StaCfg.DefaultListenCount = 3;
-        }
-        else if ((strcmp(arg, "Legacy_PSP") == 0) || 
-                 (strcmp(arg, "legacy_psp") == 0) || 
-                 (strcmp(arg, "LEGACY_PSP") == 0))
-        {
-            // do NOT turn on PSM bit here, wait until MlmeCheckPsmChange()
-            // to exclude certain situations.
-            OPSTATUS_SET_FLAG(pAdapter, fOP_STATUS_RECEIVE_DTIM);
-            if (pAdapter->StaCfg.bWindowsACCAMEnable == FALSE)
-                pAdapter->StaCfg.WindowsPowerMode = Ndis802_11PowerModeLegacy_PSP;
-            pAdapter->StaCfg.WindowsBatteryPowerMode = Ndis802_11PowerModeLegacy_PSP;
-            pAdapter->StaCfg.DefaultListenCount = 3;
-        }
-        else
-        {
-            //Default Ndis802_11PowerModeCAM
-            // clear PSM bit immediately
-            RTMP_SET_PSM_BIT(pAdapter, PWR_ACTIVE);
-            OPSTATUS_SET_FLAG(pAdapter, fOP_STATUS_RECEIVE_DTIM);
-            if (pAdapter->StaCfg.bWindowsACCAMEnable == FALSE)
-                pAdapter->StaCfg.WindowsPowerMode = Ndis802_11PowerModeCAM;
-            pAdapter->StaCfg.WindowsBatteryPowerMode = Ndis802_11PowerModeCAM;
-        }
-
-        DBGPRINT(RT_DEBUG_TRACE, ("Set_PSMode_Proc::(PSMode=%ld)\n", pAdapter->StaCfg.WindowsPowerMode));
-    }
-    else
-        return FALSE;
-
-        
-    return TRUE;
+	DBGPRINT(RT_DEBUG_TRACE, ("<==RTMPIoctlMAC\n\n"));
 }
 
-
-#ifdef DBG
 /* 
     ==========================================================================
     Description:
-        Read / Write MAC
+        Read / Write E2PROM
     Arguments:
-        pAdapter                    Pointer to our adapter
+        pAd                    Pointer to our adapter
         wrq                         Pointer to the ioctl argument
 
     Return Value:
@@ -7748,12 +5851,12 @@
 
     Note:
         Usage: 
-               1.) iwpriv ra0 mac 0        ==> read MAC where Addr=0x0
-               2.) iwpriv ra0 mac 0=12     ==> write MAC where Addr=0x0, value=12
+               1.) iwpriv ra0 e2p 0     	==> read E2PROM where Addr=0x0
+               2.) iwpriv ra0 e2p 0=1234    ==> write E2PROM where Addr=0x0, value=1234
     ==========================================================================
 */
-VOID RTMPIoctlMAC(
-	IN	PRTMP_ADAPTER	pAdapter, 
+VOID RTMPIoctlE2PROM(
+	IN	PRTMP_ADAPTER	pAd, 
 	IN	struct iwreq	*wrq)
 {
 	PSTRING				this_char;
@@ -7761,267 +5864,25 @@
 	INT					j = 0, k = 0;
 	STRING				msg[1024];
 	STRING				arg[255];
-	ULONG				macAddr = 0;
+	USHORT				eepAddr = 0;
 	UCHAR				temp[16];
 	STRING				temp2[16];
-	UINT32				macValue = 0;
-	INT					Status;
-	BOOLEAN				bIsPrintAllMAC = FALSE;
-
+	USHORT				eepValue;
+	int					Status;
+	BOOLEAN				bIsPrintAllE2P = FALSE;
 
+	
 	memset(msg, 0x00, 1024);
+	memset(arg, 0x00, 255);
 	if (wrq->u.data.length > 1) //No parameters.
 	{   
 	    Status = copy_from_user(arg, wrq->u.data.pointer, (wrq->u.data.length > 255) ? 255 : wrq->u.data.length);
 		sprintf(msg, "\n");
+
+	    //Parsing Read or Write
+		this_char = arg;
+		
 		
-		//Parsing Read or Write
-	    this_char = arg;
-		if (!*this_char)
-			goto next;
-
-		if ((value = rtstrchr(this_char, '=')) != NULL)
-			*value++ = 0;
-
-		if (!value || !*value)
-		{ //Read
-			// Sanity check
-			if(strlen(this_char) > 4)
-				goto next;
-
-			j = strlen(this_char);
-			while(j-- > 0)
-			{
-				if(this_char[j] > 'f' || this_char[j] < '0')
-					return;
-			}
-
-			// Mac Addr
-			k = j = strlen(this_char);
-			while(j-- > 0)
-			{
-				this_char[4-k+j] = this_char[j];
-			}
-			
-			while(k < 4)
-				this_char[3-k++]='0';
-			this_char[4]='\0';
-
-			if(strlen(this_char) == 4)
-			{
-				AtoH(this_char, temp, 2);
-				macAddr = *temp*256 + temp[1];					
-				if (macAddr < 0xFFFF)
-				{
-					RTMP_IO_READ32(pAdapter, macAddr, &macValue);
-					DBGPRINT(RT_DEBUG_TRACE, ("MacAddr=%lx, MacValue=%x\n", macAddr, macValue));
-					sprintf(msg+strlen(msg), "[0x%08lX]:%08X  ", macAddr , macValue);
-				}
-				else
-				{//Invalid parametes, so default printk all mac
-					bIsPrintAllMAC = TRUE;
-					goto next;
-				}
-			}
-		}
-		else
-		{ //Write
-			memcpy(&temp2, value, strlen(value));
-			temp2[strlen(value)] = '\0';
-
-			// Sanity check
-			if((strlen(this_char) > 4) || strlen(temp2) > 8)
-				goto next;
-
-			j = strlen(this_char);
-			while(j-- > 0)
-			{
-				if(this_char[j] > 'f' || this_char[j] < '0')
-					return;
-			}
-
-			j = strlen(temp2);
-			while(j-- > 0)
-			{
-				if(temp2[j] > 'f' || temp2[j] < '0')
-					return;
-			}
-
-			//MAC Addr
-			k = j = strlen(this_char);
-			while(j-- > 0)
-			{
-				this_char[4-k+j] = this_char[j];
-			}
-
-			while(k < 4)
-				this_char[3-k++]='0';
-			this_char[4]='\0';
-
-			//MAC value
-			k = j = strlen(temp2);
-			while(j-- > 0)
-			{
-				temp2[8-k+j] = temp2[j];
-			}
-			
-			while(k < 8)
-				temp2[7-k++]='0';
-			temp2[8]='\0';
-
-			{
-				AtoH(this_char, temp, 2);
-				macAddr = *temp*256 + temp[1];
-
-				AtoH(temp2, temp, 4);
-				macValue = *temp*256*256*256 + temp[1]*256*256 + temp[2]*256 + temp[3];
-
-				// debug mode
-				if (macAddr == (HW_DEBUG_SETTING_BASE + 4))
-				{
-					// 0x2bf4: byte0 non-zero: enable R17 tuning, 0: disable R17 tuning
-                    if (macValue & 0x000000ff) 
-                    {
-                        pAdapter->BbpTuning.bEnable = TRUE;
-                        DBGPRINT(RT_DEBUG_TRACE,("turn on R17 tuning\n"));
-                    }
-                    else
-                    {
-                        UCHAR R66;
-                        pAdapter->BbpTuning.bEnable = FALSE;
-                        R66 = 0x26 + GET_LNA_GAIN(pAdapter);
-#ifdef RALINK_ATE
-						if (ATE_ON(pAdapter))
-						{
-#if defined (CONFIG_RALINK_RT2883) || defined (CONFIG_RALINK_RT3883)
-							ATE_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R27, 0x0);
-							ATE_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R66, (0x26 + GET_LNA_GAIN(pAdapter)));
-							ATE_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R27, 0x20);
-							ATE_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R66, (0x26 + GET_LNA_GAIN(pAdapter)));
-							ATE_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R27, 0x40);
-#endif
-							ATE_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R66, (0x26 + GET_LNA_GAIN(pAdapter)));
-						}
-						else
-#endif // RALINK_ATE //
-						{
-#if defined (CONFIG_RALINK_RT2883) || defined (CONFIG_RALINK_RT3883)
-							RTMP_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R27, 0x0);
-							RTMP_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R66, (0x26 + GET_LNA_GAIN(pAdapter)));
-							RTMP_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R27, 0x20);
-							RTMP_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R66, (0x26 + GET_LNA_GAIN(pAdapter)));
-							RTMP_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R27, 0x40);
-#endif
-							RTMP_BBP_IO_WRITE8_BY_REG_ID(pAdapter, BBP_R66, (0x26 + GET_LNA_GAIN(pAdapter)));
-						}
-                        DBGPRINT(RT_DEBUG_TRACE,("turn off R17 tuning, restore to 0x%02x\n", R66));
-                    }
-					return;
-				}
-
-				DBGPRINT(RT_DEBUG_TRACE, ("MacAddr=%02lx, MacValue=0x%x\n", macAddr, macValue));
-				
-				RTMP_IO_WRITE32(pAdapter, macAddr, macValue);
-				sprintf(msg+strlen(msg), "[0x%08lX]:%08X  ", macAddr, macValue);
-			}
-		}
-	}
-	else
-		bIsPrintAllMAC = TRUE;
-next:
-	if (bIsPrintAllMAC)
-	{
-		struct file		*file_w;
-		PSTRING			fileName = "MacDump.txt";
-		mm_segment_t	orig_fs;
-
-		orig_fs = get_fs();
-		set_fs(KERNEL_DS); 
-
-		// open file
-		file_w = filp_open(fileName, O_WRONLY|O_CREAT, 0);
-		if (IS_ERR(file_w)) 
-		{
-			DBGPRINT(RT_DEBUG_TRACE, ("-->2) %s: Error %ld opening %s\n", __FUNCTION__, -PTR_ERR(file_w), fileName));
-		}
-		else 
-		{
-			if (file_w->f_op && file_w->f_op->write) 
-			{
-				file_w->f_pos = 0;
-				macAddr = 0x1000;
-				
-				while (macAddr <= 0x1800)
-				{
-					RTMP_IO_READ32(pAdapter, macAddr, &macValue);
-					sprintf(msg, "%08lx = %08X\n", macAddr, macValue);
-					
-					// write data to file
-					file_w->f_op->write(file_w, msg, strlen(msg), &file_w->f_pos);
-					
-					printk("%s", msg);
-					macAddr += 4;
-				}
-				sprintf(msg, "\nDump all MAC values to %s\n", fileName);
-			}
-			filp_close(file_w, NULL);
-		}
-		set_fs(orig_fs); 
-	}
-	if(strlen(msg) == 1)
-		sprintf(msg+strlen(msg), "===>Error command format!");
-
-	// Copy the information into the user buffer
-	wrq->u.data.length = strlen(msg);
-	Status = copy_to_user(wrq->u.data.pointer, msg, wrq->u.data.length);
-	
-	DBGPRINT(RT_DEBUG_TRACE, ("<==RTMPIoctlMAC\n\n"));
-}
-
-/* 
-    ==========================================================================
-    Description:
-        Read / Write E2PROM
-    Arguments:
-        pAdapter                    Pointer to our adapter
-        wrq                         Pointer to the ioctl argument
-
-    Return Value:
-        None
-
-    Note:
-        Usage: 
-               1.) iwpriv ra0 e2p 0     	==> read E2PROM where Addr=0x0
-               2.) iwpriv ra0 e2p 0=1234    ==> write E2PROM where Addr=0x0, value=1234
-    ==========================================================================
-*/
-VOID RTMPIoctlE2PROM(
-	IN	PRTMP_ADAPTER	pAdapter, 
-	IN	struct iwreq	*wrq)
-{
-	PSTRING				this_char;
-	PSTRING				value;
-	INT					j = 0, k = 0;
-	STRING				msg[1024];
-	STRING				arg[255];
-	USHORT				eepAddr = 0;
-	UCHAR				temp[16];
-	STRING				temp2[16];
-	USHORT				eepValue;
-	int					Status;
-	BOOLEAN				bIsPrintAllE2P = FALSE;
-
-	
-	memset(msg, 0x00, 1024);
-	if (wrq->u.data.length > 1) //No parameters.
-	{   
-	    Status = copy_from_user(arg, wrq->u.data.pointer, (wrq->u.data.length > 255) ? 255 : wrq->u.data.length);
-		sprintf(msg, "\n");
-
-	    //Parsing Read or Write
-		this_char = arg;
-		
-		
 		if (!*this_char)
 			goto next;
 
@@ -8059,7 +5920,7 @@
 				eepAddr = *temp*256 + temp[1];					
 				if (eepAddr < 0xFFFF)
 				{
-					RT28xx_EEPROM_READ16(pAdapter, eepAddr, eepValue);
+					RT28xx_EEPROM_READ16(pAd, eepAddr, eepValue);
 					sprintf(msg+strlen(msg), "[0x%04X]:0x%04X  ", eepAddr , eepValue);
 				}
 				else
@@ -8119,7 +5980,7 @@
 			AtoH(temp2, temp, 2);
 			eepValue = *temp*256 + temp[1];
 
-			RT28xx_EEPROM_WRITE16(pAdapter, eepAddr, eepValue);
+			RT28xx_EEPROM_WRITE16(pAd, eepAddr, eepValue);
 			sprintf(msg+strlen(msg), "[0x%02X]:%02X  ", eepAddr, eepValue);
 		}
 	}
@@ -8150,7 +6011,7 @@
 				
 				while (eepAddr <= 0xFE)
 				{
-					RT28xx_EEPROM_READ16(pAdapter, eepAddr, eepValue);
+					RT28xx_EEPROM_READ16(pAd, eepAddr, eepValue);
 					sprintf(msg, "%08x = %04x\n", eepAddr , eepValue);
 					
 					// write data to file
@@ -8177,1028 +6038,7 @@
 }
 
 
-#ifdef RTMP_RF_RW_SUPPORT
-VOID RTMPIoctlRF(
-	IN	PRTMP_ADAPTER	pAdapter, 
-	IN	struct iwreq	*wrq)
-{
-	CHAR				*this_char;
-	CHAR				*value;
-	UCHAR				regRF = 0;
-	CHAR				*mpool, *msg; //msg[2048];
-	CHAR				*arg; //arg[255];
-	CHAR				*ptr;
-	INT					rfId;
-	LONG				rfValue;
-	BOOLEAN				bIsPrintAllRF = FALSE;
-
-	DBGPRINT(RT_DEBUG_TRACE, ("==>RTMPIoctlRF\n"));
-
-	mpool = (CHAR *) kmalloc(sizeof(CHAR)*(2048+256+12), MEM_ALLOC_FLAG);
-
-	if (mpool == NULL) {
-		return;
-	}
+#endif // DBG //
 
-	msg = (CHAR *)((ULONG)(mpool+3) & (ULONG)~0x03);
-	arg = (CHAR *)((ULONG)(msg+2048+3) & (ULONG)~0x03);
 
-	memset(msg, 0x00, 2048);
-	if (wrq->u.data.length > 1) //No parameters.
-	{
-		NdisMoveMemory(arg, wrq->u.data.pointer, (wrq->u.data.length > 255) ? 255 : wrq->u.data.length);
-		ptr = arg;
-		sprintf(msg, "\n");
-		//Parsing Read or Write
-		while ((this_char = strsep((char **)&ptr, ",")) != NULL)
-		{
-			DBGPRINT(RT_DEBUG_INFO, ("this_char=%s\n", this_char));
-			if (!*this_char)
-				continue;
-
-			if ((value = strchr(this_char, '=')) != NULL)
-				*value++ = 0;
-
-			if (!value || !*value)
-			{ //Read
-				DBGPRINT(RT_DEBUG_INFO, ("this_char=%s, value=%s\n", this_char, value));
-				if (sscanf(this_char, "%d", &(rfId)) == 1)
-				{
-#ifdef CONFIG_RALINK_RT3883
-					if (rfId <= 63)
-#else
-					if (rfId <= 31)
-#endif
-					{
-						RT30xxReadRFRegister(pAdapter, rfId, &regRF);
-						
-						sprintf(msg+strlen(msg), "R%02d:%02X  ", rfId, regRF);
-						DBGPRINT(RT_DEBUG_INFO, ("msg=%s\n", msg));
-					}
-					else
-					{
-						bIsPrintAllRF = TRUE;
-						break;
-					}
-				}
-				else
-				{
-					bIsPrintAllRF = TRUE;
-					break;
-				}
-			}
-			else
-			{ //Write
-				DBGPRINT(RT_DEBUG_INFO, ("this_char=%s, value=%s\n", this_char, value));
-				if ((sscanf(this_char, "%d", &(rfId)) == 1) && (sscanf(value, "%lx", &(rfValue)) == 1))
-				{
-					DBGPRINT(RT_DEBUG_INFO, ("rfID=%02d, value=0x%lx\n", rfId, rfValue));
-#ifdef CONFIG_RALINK_RT3883
-					if (rfId <= 63)
-#else
-					if (rfId <= 31)
-#endif
-					{
-								RT30xxReadRFRegister(pAdapter, rfId, &regRF);
-						        RT30xxWriteRFRegister(pAdapter, rfId, rfValue);
-						        //Read it back for showing
-								RT30xxReadRFRegister(pAdapter, rfId, &regRF);
-						        sprintf(msg+strlen(msg), "R%02d:%02X\n", rfId, regRF);
-						        DBGPRINT(RT_DEBUG_INFO, ("msg=%s\n", msg));
-					}
-					else
-					{
-						bIsPrintAllRF = TRUE;
-						break;
-					}
-				}
-				else
-				{
-					bIsPrintAllRF = TRUE;
-					break;
-				}
-			}
-		}
-	}
-	else
-		bIsPrintAllRF = TRUE;
-
-	if (bIsPrintAllRF)
-	{
-		memset(msg, 0x00, 2048);
-		sprintf(msg, "\n");
-#ifdef CONFIG_RALINK_RT3883
-		for (rfId = 0; rfId <= 63; rfId++)
-#else
-		for (rfId = 0; rfId <= 31; rfId++)
-#endif
-		{
-			RT30xxReadRFRegister(pAdapter, rfId, &regRF);
-			sprintf(msg+strlen(msg), "R%02d:%02X    ", rfId, regRF);
-			if (rfId%5 == 4)
-				sprintf(msg+strlen(msg), "\n");
-		}
-		// Copy the information into the user buffer
-		DBGPRINT(RT_DEBUG_INFO, ("strlen(msg)=%d\n", (UINT32)strlen(msg)));
-		wrq->u.data.length = strlen(msg);
-		if (copy_to_user(wrq->u.data.pointer, msg, wrq->u.data.length)) 
-		{
-			DBGPRINT(RT_DEBUG_TRACE, ("%s: copy_to_user() fail\n", __FUNCTION__));			
-		}
-	}
-	else
-	{
-		// Copy the information into the user buffer
-		wrq->u.data.length = strlen(msg);
-		if (copy_to_user(wrq->u.data.pointer, msg, wrq->u.data.length))
-		{
-			DBGPRINT(RT_DEBUG_TRACE, ("%s: copy_to_user() fail\n", __FUNCTION__));			
-		}
-	}
-
-	kfree(mpool);
-	DBGPRINT(RT_DEBUG_TRACE, ("<==RTMPIoctlRF\n\n"));
-}
-#endif // RTMP_RF_RW_SUPPORT //
-#endif // DBG //
-
-
-#ifdef WSC_STA_SUPPORT
-#define WSC_GET_CONF_MODE_EAP	1
-#define WSC_GET_CONF_MODE_UPNP	2
-INT	 Set_WscConfMode_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-	PWSC_CTRL	pWscControl;
-	pWscControl = &pAd->StaCfg.WscControl;
-
-    if ( simple_strtol(arg, 0, 10) == 0)
-        pWscControl->WscConfMode = WSC_DISABLE;
-    else if ( simple_strtol(arg, 0, 10) == 1)
-        pWscControl->WscConfMode = WSC_ENROLLEE;
-    else if ( simple_strtol(arg, 0, 10) == 2)
-        pWscControl->WscConfMode = WSC_REGISTRAR;
-    else
-        pWscControl->WscConfMode = WSC_DISABLE;
-
-	// Turn off WSC state matchine
-	WscStop(pAd,
-#ifdef CONFIG_AP_SUPPORT
-			FALSE,
-#endif // CONFIG_AP_SUPPORT //
-			pWscControl);
-
-	DBGPRINT(RT_DEBUG_TRACE, ("IF(ra0) Set_WscConfMode_Proc::(WscConfMode(0,1,2)=%d)\n", pWscControl->WscConfMode));
-	return TRUE;
-}
-
-INT	Set_WscConfStatus_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-	UCHAR     IsAPConfigured = 1;
-
-	IsAPConfigured = (UCHAR)simple_strtol(arg, 0, 10);
-
-	if ((IsAPConfigured  > 0) && (IsAPConfigured  <= 2))
-        pAd->StaCfg.WscControl.WscConfStatus = IsAPConfigured;
-	else
-	{
-		DBGPRINT(RT_DEBUG_TRACE, ("Set_WscConfStatus_Proc:: Set failed!!(WscConfStatus=%s), WscConfStatus is 1 or 2 \n", arg));
-        DBGPRINT(RT_DEBUG_TRACE, ("Set_WscConfStatus_Proc:: WscConfStatus is not changed (%d) \n", pAd->StaCfg.WscControl.WscConfStatus));
-		return FALSE;  //Invalid argument	
-	}
-
-	DBGPRINT(RT_DEBUG_TRACE, ("Set_WscConfStatus_Proc::(WscConfStatus=%d)\n", pAd->StaCfg.WscControl.WscConfStatus));
-
-	return TRUE;
-}
-
-INT Set_WscSsid_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-	PWSC_CTRL	pWscControl;
-	ULONG		ApIdx = 0;
-	
-	pWscControl = &pAd->StaCfg.WscControl;
-
-	NdisZeroMemory(&pWscControl->WscSsid, sizeof(NDIS_802_11_SSID));
-
-	if( (strlen(arg) > 0) && (strlen(arg) <= MAX_LEN_OF_SSID))
-    {
-		NdisMoveMemory(pWscControl->WscSsid.Ssid, arg, strlen(arg));
-		pWscControl->WscSsid.SsidLength = strlen(arg);
-
-		NdisZeroMemory(pWscControl->WscBssid, MAC_ADDR_LEN);
-		ApIdx = WscSearchWpsApBySSID(pAd,
-									 pWscControl->WscSsid.Ssid, 
-									 pWscControl->WscSsid.SsidLength, 
-									 WSC_PIN_MODE);
-		if (ApIdx != BSS_NOT_FOUND)
-		{
-			NdisMoveMemory(pWscControl->WscBssid, pAd->ScanTab.BssEntry[ApIdx].Bssid,MAC_ADDR_LEN);
-			pAd->MlmeAux.Channel = pAd->ScanTab.BssEntry[ApIdx].Channel;
-		}
-		
-		hex_dump("Set_WscSsid_Proc:: WscBssid", pWscControl->WscBssid, MAC_ADDR_LEN);		
-		
-		DBGPRINT(RT_DEBUG_TRACE, ("Set_WscSsid_Proc:: (Select SsidLen=%d,Ssid=%s)\n", 
-				pWscControl->WscSsid.SsidLength, pWscControl->WscSsid.Ssid));
-	}
-	else
-		return FALSE;	//Invalid argument 
-
-	return TRUE;	
-
-}
-
-INT	Set_WscMode_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-	INT	        WscMode;
-	PWSC_CTRL	pWscControl;
-	pWscControl = &pAd->StaCfg.WscControl;
-	
-	WscMode = (INT)simple_strtol(arg, 0, 10);
-    
-    if ((WscMode == WSC_PIN_MODE ) || (WscMode == WSC_PBC_MODE))
-    {
-    	// save wsc mode
-        pWscControl->WscMode = WscMode;
-    }
-	else
-	{
-		DBGPRINT(RT_DEBUG_TRACE, ("Set_WscMode_Proc:: Set failed!!(Set_WscMode_Proc=%s), WscMode is 1 or 2 \n", arg));
-		return FALSE;  //Invalid argument
-	}
-
-	DBGPRINT(RT_DEBUG_TRACE, ("Set_WscMode_Proc::(WscMode=%d)\n",  pWscControl->WscMode));
-
-	return TRUE;
-}
-
-INT	Set_WscPinCode_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-	PWSC_CTRL	pWscControl;
-	BOOLEAN     validatePin;
-	UINT        PinCode = 0;
-	pWscControl = &pAd->StaCfg.WscControl;
-#define IsZero(c) ('0' == (c) ? TRUE:FALSE)
-	PinCode = simple_strtol(arg, 0, 10); // When PinCode is 03571361, return value is 3571361.
-
-	validatePin = ValidateChecksum(PinCode);
-
-	if ( validatePin )
-	{
-    		pWscControl->WscPinCode = PinCode;
-            pWscControl->WscLastPinFromEnrollee = pWscControl->WscPinCode;
-            pWscControl->WscRejectSamePinFromEnrollee = FALSE;
-        // PIN Code
-        if (IsZero(*arg))
-            NdisMoveMemory(pWscControl->RegData.PIN, arg, 8);
-        else
-	        WscGetRegDataPIN(pAd, pWscControl->WscPinCode, pWscControl);
-	}
-	else
-	{
-		DBGPRINT(RT_DEBUG_TRACE, ("Set failed!!(Set_WscPinCode_Proc=%s), PinCode Checksum invalid \n", arg));
-		return FALSE;  //Invalid argument
-	}
-
-	DBGPRINT(RT_DEBUG_TRACE, ("IF(ra0) Set_WscPinCode_Proc::(PinCode=%d)\n", pWscControl->WscPinCode));
-
-	return TRUE;
-}
-
-INT	Set_WscGetConf_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-	PWSC_CTRL           pWscControl;
-	PWSC_UPNP_NODE_INFO pWscUPnPNodeInfo;
-    INT	                idx;
-    BOOLEAN             StateMachineTouched = FALSE;
-
-    pWscControl = &pAd->StaCfg.WscControl;
-    pWscUPnPNodeInfo = &pWscControl->WscUPnPNodeInfo;
-
-    if (pAd->StaCfg.BssType != BSS_INFRA)
-    {
-        DBGPRINT(RT_DEBUG_TRACE, ("%s - WPS only support in Infra mode.\n", __FUNCTION__));
-        return FALSE;
-    }
-    
-    if (pWscControl->WscConfMode == WSC_DISABLE)
-    {
-        pWscControl->bWscTrigger = FALSE;
-        DBGPRINT(RT_DEBUG_TRACE, ("Set_WscGetConf_Proc: WPS is disabled.\n"));
-		return FALSE;
-    }
-
-	WscStop(pAd,
-#ifdef CONFIG_AP_SUPPORT
-			FALSE,
-#endif // CONFIG_AP_SUPPORT //
-			pWscControl);    
-    
-    // trigger wsc re-generate public key
-    pWscControl->RegData.ReComputePke = 1;
-
-	// Change to init state before sending a disassociation frame
-	pAd->StaCfg.WscControl.WscState = WSC_STATE_INIT;
-
-	// 0. Send a disassoication frame
-	if (INFRA_ON(pAd))
-	{
-		MLME_DISASSOC_REQ_STRUCT	DisassocReq;
-
-		if (pAd->Mlme.CntlMachine.CurrState != CNTL_IDLE)
-		{
-			RTMP_MLME_RESET_STATE_MACHINE(pAd);
-			DBGPRINT(RT_DEBUG_TRACE, ("!!! MLME busy, reset MLME state machine !!!\n"));
-		}
-										
-		// Set to immediately send the media disconnect event
-		pAd->MlmeAux.CurrReqIsFromNdis = TRUE;
-
-		DBGPRINT(RT_DEBUG_TRACE, ("disassociate with current AP before starting WPS\n"));
-		DisassocParmFill(pAd, &DisassocReq, pAd->CommonCfg.Bssid, REASON_DISASSOC_STA_LEAVING);
-		MlmeEnqueue(pAd, ASSOC_STATE_MACHINE, MT2_MLME_DISASSOC_REQ, 
-					sizeof(MLME_DISASSOC_REQ_STRUCT), &DisassocReq, 0);
-
-		pAd->Mlme.CntlMachine.CurrState = CNTL_WAIT_DISASSOC;
-		RTMP_MLME_HANDLER(pAd);
-		// Set the AutoReconnectSsid to prevent it reconnect to old SSID
-		// Since calling this indicate user don't want to connect to that SSID anymore.
-		pAd->MlmeAux.AutoReconnectSsidLen= 32;
-		NdisZeroMemory(pAd->MlmeAux.AutoReconnectSsid, pAd->MlmeAux.AutoReconnectSsidLen);
-
-		pWscControl->bWscTrigger = FALSE;	// check to disable
-		RTMPusecDelay(500000);  // leave enough time for this DISASSOC frame
-	}
-	else if (ADHOC_ON(pAd))
-	{
-		// Set the AutoReconnectSsid to prevent it reconnect to old SSID
-		// Since calling this indicate user don't want to connect to that SSID anymore.
-		pAd->MlmeAux.AutoReconnectSsidLen= 32;
-		NdisZeroMemory(pAd->MlmeAux.AutoReconnectSsid, pAd->MlmeAux.AutoReconnectSsidLen);			
-		LinkDown(pAd, FALSE);
-		
-	}
-
-	// Support Infra mode only
-	if (pAd->StaCfg.BssType != BSS_INFRA)
-	{
-		pAd->StaCfg.BssType = BSS_INFRA;
-		pAd->bConfigChanged = TRUE;
-	}
-    
-    pWscControl->bWscTrigger = TRUE;
-    pWscControl->WscConfStatus = WSC_SCSTATE_UNCONFIGURED;
-
-	//
-	// Action : PIN, PBC
-	//
-	if (pWscControl->WscMode == 1)
-	{
-#ifdef WSC_LED_SUPPORT
-		UCHAR WPSLEDStatus;
-#endif // WSC_LED_SUPPORT //
-		// PIN  - default
-
-		// 2. Enqueue BSSID/SSID connection command
-		if (pAd->Mlme.CntlMachine.CurrState != CNTL_IDLE)
-		{
-			RTMP_MLME_RESET_STATE_MACHINE(pAd);
-			DBGPRINT(RT_DEBUG_TRACE, ("!!! MLME busy, reset MLME state machine !!!\n"));
-		}
-
-		WscInitRegistrarPair(pAd, pWscControl, BSS0);
-
-		/* select one SSID */
-		if ((pWscControl->WscSsid.SsidLength > 0) && (pWscControl->WscSsid.SsidLength <= MAX_LEN_OF_SSID))
-		{
-			//
-			// Update Reconnect Ssid, that user desired to connect.
-			//
-			NdisZeroMemory(pAd->MlmeAux.AutoReconnectSsid, MAX_LEN_OF_SSID);
-			NdisMoveMemory(pAd->MlmeAux.AutoReconnectSsid, pWscControl->WscSsid.Ssid, pWscControl->WscSsid.SsidLength);
-			pAd->MlmeAux.AutoReconnectSsidLen = pWscControl->WscSsid.SsidLength;
-
-			pAd->bConfigChanged = TRUE;
-			MlmeEnqueue(pAd, 
-						MLME_CNTL_STATE_MACHINE, 
-						OID_802_11_BSSID,
-						MAC_ADDR_LEN,
-						pAd->StaCfg.WscControl.WscBssid, 0);
-			
-			StateMachineTouched = TRUE;
-		}
-		else
-		{
-			pWscControl->WscState = WSC_STATE_OFF;
-			pWscControl->WscStatus = STATUS_WSC_IDLE;
-			
-			//DBGPRINT(RT_DEBUG_TRACE, ("Set_WscGetConf_Proc:: Failed!!! Please set WscSsid first!!!"));
-			//return FALSE;
-		}    	
-
-    	RTMPSetTimer(&pWscControl->Wsc2MinsTimer, WSC_TWO_MINS_TIME_OUT);
-    	pWscControl->Wsc2MinsTimerRunning = TRUE;
-    	pWscControl->WscStatus = STATUS_WSC_LINK_UP;
-
-		// 4. Set WSC state to WSC_STATE_START
-		pWscControl->WscState = WSC_STATE_START;
-
-#ifdef WSC_LED_SUPPORT
-		// The protocol is searching for a partner in PBC mode.
-		WPSLEDStatus = LED_WPS_IN_PROCESS;
-#ifdef RTMP_MAC_PCI
-		RTMPSetLED(pAd, WPSLEDStatus);
-#endif // RTMP_MAC_PCI //
-#endif // WSC_LED_SUPPORT //
-		//WscSendUPnPConfReqMsg(pAd, apidx, pAd->ApCfg.MBSSID[apidx].Ssid, pAd->ApCfg.MBSSID[apidx].Bssid, 3, 0);
-	}
-	else
-	{
-		pWscControl->WscSsid.SsidLength = 0;
-		NdisZeroMemory(&pWscControl->WscSsid, sizeof(NDIS_802_11_SSID));
-		pWscControl->WscPBCBssCount = 0;
-		// WPS - SW PBC
-		WscPushPBCAction(pAd);
-		StateMachineTouched = TRUE;
-	}
-    
-    // Enrollee 192 random bytes for DH key generation
-	for (idx = 0; idx < 192; idx++)
-		pWscControl->RegData.EnrolleeRandom[idx] = RandomByte(pAd);
-    
-	if (StateMachineTouched) // Upper layer sent a MLME-related operations
-		RTMP_MLME_HANDLER(pAd);
-
-	DBGPRINT(RT_DEBUG_TRACE, ("Set_WscGetConf_Proc trigger WSC state machine\n"));
-
-	return TRUE;
-}
-
-#endif // WSC_STA_SUPPORT //
-
-
-INT Set_TGnWifiTest_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING          arg)
-{
-    if (simple_strtol(arg, 0, 10) == 0)
-        pAd->StaCfg.bTGnWifiTest = FALSE;
-    else
-        pAd->StaCfg.bTGnWifiTest = TRUE;
-
-    DBGPRINT(RT_DEBUG_TRACE, ("IF Set_TGnWifiTest_Proc::(bTGnWifiTest=%d)\n", pAd->StaCfg.bTGnWifiTest));
-	return TRUE;
-}
-
-#ifdef EXT_BUILD_CHANNEL_LIST
-INT Set_Ieee80211dClientMode_Proc(
-    IN  PRTMP_ADAPTER   pAdapter, 
-    IN  PSTRING          arg)
-{
-    if (simple_strtol(arg, 0, 10) == 0)
-        pAdapter->StaCfg.IEEE80211dClientMode = Rt802_11_D_None;
-    else if (simple_strtol(arg, 0, 10) == 1)
-        pAdapter->StaCfg.IEEE80211dClientMode = Rt802_11_D_Flexible;
-    else if (simple_strtol(arg, 0, 10) == 2)
-        pAdapter->StaCfg.IEEE80211dClientMode = Rt802_11_D_Strict;
-    else
-        return FALSE;  
-
-    DBGPRINT(RT_DEBUG_TRACE, ("Set_Ieee802dMode_Proc::(IEEEE0211dMode=%d)\n", pAdapter->StaCfg.IEEE80211dClientMode));
-    return TRUE;
-}
-#endif // EXT_BUILD_CHANNEL_LIST //
-
-#ifdef CARRIER_DETECTION_SUPPORT
-INT Set_CarrierDetect_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING         arg)
-{
-    if (simple_strtol(arg, 0, 10) == 0)
-        pAd->CommonCfg.CarrierDetect.Enable = FALSE;
-    else
-        pAd->CommonCfg.CarrierDetect.Enable = TRUE;
-
-    DBGPRINT(RT_DEBUG_TRACE, ("IF Set_CarrierDetect_Proc::(CarrierDetect.Enable=%d)\n", pAd->CommonCfg.CarrierDetect.Enable));
-	return TRUE;
-}
-#endif // CARRIER_DETECTION_SUPPORT //
-
-
-INT	Show_Adhoc_MacTable_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			extra)
-{
-	INT i;
-	
-	sprintf(extra, "\n");
-
-#ifdef DOT11_N_SUPPORT
-	sprintf(extra, "%sHT Operating Mode : %d\n", extra, pAd->CommonCfg.AddHTInfo.AddHtInfo2.OperaionMode);
-#endif // DOT11_N_SUPPORT //
-
-	sprintf(extra, "%s\n%-19s%-4s%-4s%-7s%-7s%-7s%-10s%-6s%-6s%-6s%-6s\n", extra, 
-			"MAC", "AID", "BSS", "RSSI0", "RSSI1", "RSSI2", "PhMd", "BW", "MCS", "SGI", "STBC");
-	
-	for (i=1; i<MAX_LEN_OF_MAC_TABLE; i++)
-	{
-		PMAC_TABLE_ENTRY pEntry = &pAd->MacTab.Content[i];
-		
-		if (strlen(extra) > (IW_PRIV_SIZE_MASK - 30))
-		    break;
-		if ((IS_ENTRY_CLIENT(pEntry) || IS_ENTRY_APCLI(pEntry)) && (pEntry->Sst == SST_ASSOC))
-		{
-			sprintf(extra, "%s%02X:%02X:%02X:%02X:%02X:%02X  ", extra,
-				pEntry->Addr[0], pEntry->Addr[1], pEntry->Addr[2],
-				pEntry->Addr[3], pEntry->Addr[4], pEntry->Addr[5]);
-			sprintf(extra, "%s%-4d", extra, (int)pEntry->Aid);
-			sprintf(extra, "%s%-4d", extra, (int)pEntry->apidx);
-			sprintf(extra, "%s%-7d", extra, pEntry->RssiSample.AvgRssi0);
-			sprintf(extra, "%s%-7d", extra, pEntry->RssiSample.AvgRssi1);
-			sprintf(extra, "%s%-7d", extra, pEntry->RssiSample.AvgRssi2);
-			sprintf(extra, "%s%-10s", extra, GetPhyMode(pEntry->HTPhyMode.field.MODE));
-			sprintf(extra, "%s%-6s", extra, GetBW(pEntry->HTPhyMode.field.BW));
-			sprintf(extra, "%s%-6d", extra, pEntry->HTPhyMode.field.MCS);
-			sprintf(extra, "%s%-6d", extra, pEntry->HTPhyMode.field.ShortGI);
-			sprintf(extra, "%s%-6d", extra, pEntry->HTPhyMode.field.STBC);
-			sprintf(extra, "%s%-10d, %d, %d%%\n", extra, pEntry->DebugFIFOCount, pEntry->DebugTxCount, 
-						(pEntry->DebugTxCount) ? ((pEntry->DebugTxCount-pEntry->DebugFIFOCount)*100/pEntry->DebugTxCount) : 0);
-			sprintf(extra, "%s\n", extra);
-		}
-	} 
-
-	return TRUE;
-}
-
-
-INT Set_BeaconLostTime_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING         arg)
-{
-	ULONG ltmp = (ULONG)simple_strtol(arg, 0, 10);
-
-	if ((ltmp != 0) && (ltmp <= 60))
-		pAd->StaCfg.BeaconLostTime = (ltmp * OS_HZ);
-
-    DBGPRINT(RT_DEBUG_TRACE, ("IF Set_BeaconLostTime_Proc::(BeaconLostTime=%ld)\n", pAd->StaCfg.BeaconLostTime));
-	return TRUE;
-}
-
-INT Set_AutoRoaming_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING         arg)
-{
-    if (simple_strtol(arg, 0, 10) == 0)
-        pAd->StaCfg.bAutoRoaming = FALSE;
-    else
-        pAd->StaCfg.bAutoRoaming = TRUE;
-
-    DBGPRINT(RT_DEBUG_TRACE, ("IF Set_AutoRoaming_Proc::(bAutoRoaming=%d)\n", pAd->StaCfg.bAutoRoaming));
-	return TRUE;
-}
-
-
-/* 
-    ==========================================================================
-    Description:
-        Issue a site survey command to driver
-	Arguments:
-	    pAdapter                    Pointer to our adapter
-	    wrq                         Pointer to the ioctl argument
-
-    Return Value:
-        None
-
-    Note:
-        Usage: 
-               1.) iwpriv ra0 set site_survey
-    ==========================================================================
-*/
-INT Set_SiteSurvey_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PSTRING			arg)
-{
-	NDIS_802_11_SSID Ssid;
-
-	//check if the interface is down
-	if (!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE))
-	{
-		DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
-		return -ENETDOWN;   
-	}
-
-	if (MONITOR_ON(pAd))
-    {
-        DBGPRINT(RT_DEBUG_TRACE, ("!!! Driver is in Monitor Mode now !!!\n"));
-        return -EINVAL;
-    }
-
-	RTMPZeroMemory(&Ssid, sizeof(NDIS_802_11_SSID));	
-	Ssid.SsidLength = 0; 
-	if ((arg != NULL) &&
-		(strlen(arg) <= MAX_LEN_OF_SSID))
-    {
-        RTMPMoveMemory(Ssid.Ssid, arg, strlen(arg));
-        Ssid.SsidLength = strlen(arg);
-	}
-
-	pAd->StaCfg.bScanReqIsFromWebUI = TRUE;
-
-	if (pAd->Mlme.CntlMachine.CurrState != CNTL_IDLE)
-	{
-		RTMP_MLME_RESET_STATE_MACHINE(pAd);
-		DBGPRINT(RT_DEBUG_TRACE, ("!!! MLME busy, reset MLME state machine !!!\n"));
-	}
-
-	// tell CNTL state machine to call NdisMSetInformationComplete() after completing
-	// this request, because this request is initiated by NDIS.
-	pAd->MlmeAux.CurrReqIsFromNdis = FALSE;
-	// Reset allowed scan retries
-	pAd->StaCfg.ScanCnt = 0;
-	NdisGetSystemUpTime(&pAd->StaCfg.LastScanTime);
-
-	MlmeEnqueue(pAd, 
-		MLME_CNTL_STATE_MACHINE, 
-		OID_802_11_BSSID_LIST_SCAN, 
-		Ssid.SsidLength,
-		Ssid.Ssid, 0);
-
-	RTMP_MLME_HANDLER(pAd);
-    
-    DBGPRINT(RT_DEBUG_TRACE, ("Set_SiteSurvey_Proc\n"));
-
-    return TRUE;
-}
-
-INT Set_ForceTxBurst_Proc(
-    IN  PRTMP_ADAPTER   pAd, 
-    IN  PSTRING         arg)
-{
-    if (simple_strtol(arg, 0, 10) == 0)
-        pAd->StaCfg.bForceTxBurst = FALSE;
-    else
-        pAd->StaCfg.bForceTxBurst = TRUE;
-
-    DBGPRINT(RT_DEBUG_TRACE, ("IF Set_ForceTxBurst_Proc::(bForceTxBurst=%d)\n", pAd->StaCfg.bForceTxBurst));
-	return TRUE;
-}
-
-#ifdef ANT_DIVERSITY_SUPPORT
-INT	Set_Antenna_Proc(
-	IN	PRTMP_ADAPTER	pAd, 
-	IN	PUCHAR			arg)
-{
-    UCHAR UsedAnt;
-	DBGPRINT(RT_DEBUG_TRACE, ("==> Set_Antenna_Proc *******************\n"));
-
-    if(simple_strtol(arg, 0, 10) <= 3)
-        UsedAnt = simple_strtol(arg, 0, 10);
-
-    pAd->CommonCfg.bRxAntDiversity = UsedAnt; // Auto switch
-    if (UsedAnt == ANT_DIVERSITY_ENABLE)
-    {
-            pAd->RxAnt.EvaluateStableCnt = 0;
-            DBGPRINT(RT_DEBUG_TRACE, ("<== Set_Antenna_Proc(Auto Switch Mode), (%d,%d)\n", pAd->RxAnt.Pair1PrimaryRxAnt, pAd->RxAnt.Pair1SecondaryRxAnt));
-    }
-    /* 2: Fix in the PHY Antenna CON1*/
-    if (UsedAnt == ANT_FIX_ANT1)
-    {
-            AsicSetRxAnt(pAd, 0);
-            DBGPRINT(RT_DEBUG_TRACE, ("<== Set_Antenna_Proc(Fix in Ant CON1), (%d,%d)\n", pAd->RxAnt.Pair1PrimaryRxAnt, pAd->RxAnt.Pair1SecondaryRxAnt));
-    }
-    /* 3: Fix in the PHY Antenna CON2*/
-    if (UsedAnt == ANT_FIX_ANT2)
-    {
-            AsicSetRxAnt(pAd, 1);
-            DBGPRINT(RT_DEBUG_TRACE, ("<== Set_Antenna_Proc(Fix in Ant CON2), (%d,%d)\n", pAd->RxAnt.Pair1PrimaryRxAnt, pAd->RxAnt.Pair1SecondaryRxAnt));
-    }
-
-	return TRUE;
-}
-#endif // ANT_DIVERSITY_SUPPORT //
-
-#ifdef WMM_ACM_SUPPORT
-
-static void AcmCmdStreamGuiDisplay(
-	IN	PRTMP_ADAPTER	pAd,
-	OUT char            *extra)
-{
-	ACM_STREAM_INFO *stream_p, *next_stm_p;
-	UINT32 type;
-	UINT8 peer_mac[6];
-	UINT32 num, size;
-	UINT32 category[2] = { ACM_SM_CATEGORY_REQ, ACM_SM_CATEGORY_ACT };
-	UINT32 category_num = 2;
-	UINT32 i, j;
-
-	/* init */
-	NdisZeroMemory(peer_mac, 6);
-    NdisMoveMemory(peer_mac, pAd->CommonCfg.Bssid, 6);
-    
-	type = 1; /* default: EDCA streams */
-
-	for(i=0; i<category_num; i++)
-	{
-		num = ACMP_StreamNumGet(pAd, category[i], type, peer_mac);
-
-		if (num == 0)
-		{
-			if (category[i] == ACM_SM_CATEGORY_REQ)
-				sprintf(extra, "%s    No any requested TSPEC exists!<br>", extra);
-			else
-				sprintf(extra, "%s    No any activated TSPEC exists!<br>", extra);
-			/* End of if */
-			continue;
-		} /* End of if */
-
-		size = sizeof(ACM_STREAM_INFO) * num;
-		stream_p = (ACM_STREAM_INFO *)kmalloc(size, GFP_ATOMIC);
-
-		if (stream_p == NULL)
-		{
-			sprintf(extra, "%sAllocate stream memory fail! "
-					"AcmCmdStreamDisplay()<br>", extra);
-			return;
-		} /* End of if */
-
-		if (ACMP_StreamsGet(pAd, category[i], type,
-							&num, peer_mac, stream_p) != ACM_RTN_OK)
-		{
-			sprintf(extra, "%sGet stream information fail! "
-					"AcmCmdStreamDisplay()<br>", extra);
-			kfree(stream_p);
-			return;
-		} /* End of if */
-
-		if (category[i] == ACM_SM_CATEGORY_REQ)
-		{
-			sprintf(extra, "%s<br>    ------------------- Requested List "
-					"-------------------", extra);
-		}
-		else
-		{
-			if (category[i] == ACM_SM_CATEGORY_ACT)
-			{
-				sprintf(extra, "%s<br>    ------------------- ACT stream List "
-						"-------------------", extra);
-			}
-			else
-			{
-				sprintf(extra, "%s<br>    ------------------- CDB stream List "
-						"-------------------", extra);
-			} /* End of if */
-		} /* End of if */
-
-		for(j=0, next_stm_p=stream_p; j<num; j++)
-		{
-		    if ((strlen(extra) + 467) > IW_PRIV_SIZE_MASK)
-            {
-                sprintf(extra, "%s<br><font=red>Still has some information, memory is not enough.</font>", extra);
-                break;
-            }
-			/* display the stream information */
-			ACM_CMD_Stream_Gui_Display(pAd, next_stm_p, extra);
-			next_stm_p ++;
-		} /* End of for */
-
-		kfree(stream_p);
-	} /* End of while */
-} /* End of AcmCmdStreamDisplay */
-
-
-static void ACM_CMD_Stream_Gui_Display(
-	ACM_PARAM_IN	PRTMP_ADAPTER	ad_p,
-	ACM_PARAM_IN	ACM_STREAM_INFO		*stream_p,
-	ACM_PARAM_OUT   CHAR                *extra)
-{
-	ACM_TSPEC *tspec_p = &stream_p->Tspec;
-	UINT16 temp;
-
-
-	sprintf(extra, "%s<br>=== QAP MAC = <font color=#800080>%02x:%02x:%02x:%02x:%02x:%02x</font><br>",
-            extra,
-			 stream_p->DevMac[0],
-			 stream_p->DevMac[1],
-			 stream_p->DevMac[2],
-			 stream_p->DevMac[3],
-			 stream_p->DevMac[4],
-			 stream_p->DevMac[5]);
-
-	if (tspec_p->TsInfo.AccessPolicy == ACM_ACCESS_POLICY_EDCA)
-	{
-		if (stream_p->StreamType == ACM_STREAM_TYPE_11E)
-			sprintf(extra, "%sStream Type: EDCA", extra);
-		else
-			sprintf(extra, "%sStream Type: WME", extra);
-		/* End of if */
-	}
-	else
-	{
-		if (tspec_p->TsInfo.AccessPolicy == ACM_ACCESS_POLICY_HCCA)
-		{
-			if (stream_p->StreamType == ACM_STREAM_TYPE_11E)
-				sprintf(extra, "%sStream Type: HCCA", extra);
-			else
-				sprintf(extra, "%sStream Type: WSM", extra);
-			/* End of if */
-		}
-		else
-		{
-			if (stream_p->StreamType == ACM_STREAM_TYPE_11E)
-				sprintf(extra, "%sStream Type: HCCA + EDCA", extra);
-			else
-				sprintf(extra, "%sStream Type: WSN + WME", extra);
-			/* End of if */
-		} /* End of if */
-	} /* End of if */
-
-	switch(stream_p->Status)
-	{
-		case TSPEC_STATUS_REQUEST:
-			sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Requesting...<br>", extra);
-			break;
-
-		case TSPEC_STATUS_ACTIVE:
-			sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Active<br>", extra);
-			break;
-
-		case TSPEC_STATUS_ACTIVE_SUSPENSION:
-			sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Active but suspended<br>", extra);
-			break;
-
-		case TSPEC_STATUS_REQ_DELETING:
-			sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Requesting & deleting...<br>", extra);
-			break;
-
-		case TSPEC_STATUS_ACT_DELETING:
-			sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Active & deleting...<br>", extra);
-			break;
-
-		case TSPEC_STATUS_RENEGOTIATING:
-			sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Renegotiation...<br>", extra);
-			break;
-
-		case TSPEC_STATUS_HANDLING:
-			sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Request Handling...<br>", extra);
-			break;
-
-		case TSPEC_STATUS_FAIL:
-			switch(stream_p->Cause)
-			{
-				case TSPEC_CAUSE_UNKNOWN:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Internal Error!<br>", extra);
-					break;
-
-				case TSPEC_CAUSE_REQ_TIMEOUT:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Request (ADDTS) timeout!<br>", extra);;
-					break;
-
-				case TSPEC_CAUSE_SUGGESTED_TSPEC:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Suggested TSPEC is provided!<br>", extra);
-					break;
-
-				case TSPEC_CAUSE_REJECTED:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Rejected by QAP!<br>", extra);
-					break;
-
-				case TSPEC_CAUSE_UNKNOWN_STATUS:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Unknown response status code!<br>", extra);
-					break;
-
-				case TSPEC_CAUSE_INACTIVITY_TIMEOUT:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Inactivity timeout!<br>", extra);
-					break;
-
-				case TSPEC_CAUSE_DELETED_BY_QAP:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Deleted by QAP!<br>", extra);
-					break;
-
-				case TSPEC_CAUSE_DELETED_BY_QSTA:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Deleted by QSTA!<br>", extra);
-					break;
-
-				case TSPEC_CAUSE_BANDWIDTH:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) In order to increase bandwidth!<br>", extra);
-					break;
-
-				case TSPEC_CAUSE_REJ_MANY_TS:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Reject due to too many TS in a AC!<br>", extra);
-					break;
-
-				case TSPEC_CASUE_REJ_INVALID_PARAM:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: (ERR) Reject due to invalid parameters!<br>", extra);
-					break;
-
-				default:
-					sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Fatal error, unknown cause!<br>", extra);
-					break;
-			} /* End of switch */
-			break;
-
-		default:
-			sprintf(extra, "%s&nbsp;&nbsp;&nbsp;Status: Fatal error, unknown status!<br>", extra);
-			break;
-	} /* End of switch */
-
-	sprintf(extra, "%sTSID = %d<br>", extra, tspec_p->TsInfo.TSID);
-
-	sprintf(extra, "%sUP = %d<br>", extra, tspec_p->TsInfo.UP);
-
-	if (stream_p->FlgOutLink == 1)
-	{
-		if (tspec_p->TsInfo.AccessPolicy== ACM_ACCESS_POLICY_EDCA)
-        {      
-            char *ac_id_str[8]= {"AC_BE", "AC_BK", "AC_BK", "AC_BE", "AC_VI", "AC_VI", "AC_VO", "AC_VO"};
-			sprintf(extra, "%sAC ID = %d&nbsp;(%s)<br>", extra, stream_p->AcmAcId, ac_id_str[tspec_p->TsInfo.UP]);
-        }
-		else
-			sprintf(extra, "%sTS ID = %d<br>", extra, stream_p->AcmAcId - ACM_DEV_NUM_OF_AC);
-		/* End of if */
-	} /* End of if */
-
-	switch(tspec_p->TsInfo.Direction)
-	{
-		case ACM_DIRECTION_UP_LINK:
-			sprintf(extra, "%sDirection = UP LINK<br>", extra);
-			break;
-
-		case ACM_DIRECTION_DOWN_LINK:
-			sprintf(extra, "%sDirection = DOWN LINK<br>", extra);
-			break;
-
-		case ACM_DIRECTION_DIRECT_LINK:
-			sprintf(extra, "%sDirection = DIRECT LINK<br>", extra);
-			break;
-
-		case ACM_DIRECTION_BIDIREC_LINK:
-			sprintf(extra, "%sDirection = BIDIRECTIONAL LINK<br>", extra);
-			break;
-	} /* End of switch */
-
-	sprintf(extra, "%sInactivity timeout = %u us<br>", extra, stream_p->InactivityCur);
-
-	if (tspec_p->NominalMsduSize& ACM_NOM_MSDU_SIZE_CHECK_BIT)
-	{
-		sprintf(extra, "%sNorminal MSDU Size (Fixed) = %d B<br>", extra,
-				(tspec_p->NominalMsduSize& (~ACM_NOM_MSDU_SIZE_CHECK_BIT)));
-	}
-	else
-	{
-		sprintf(extra, "%sNorminal MSDU Size (Variable) = %d B<br>", extra,
-			(tspec_p->NominalMsduSize& (~ACM_NOM_MSDU_SIZE_CHECK_BIT)));
-	} /* End of if */
-
-	sprintf(extra, "%sInactivity Interval = %u us<br>", extra, tspec_p->InactivityInt);
-
-	if (tspec_p->SuspensionInt!= ACM_TSPEC_SUSPENSION_DISABLE)
-		sprintf(extra, "%sSuspension Interval = %u us<br>", extra, tspec_p->SuspensionInt);
-	else
-		sprintf(extra, "%sSuspension Interval is disabled!<br>", extra);
-	/* End of if */
-
-	sprintf(extra, "%sMean Data Rate = %d bps<br>", extra, tspec_p->MeanDataRate);
-	sprintf(extra, "%sMin Physical Rate = %d bps<br>", extra, tspec_p->MinPhyRate);
-
-	if (tspec_p->TsInfo.AccessPolicy!= ACM_ACCESS_POLICY_HCCA)
-	{
-		/* only for EDCA or HCCA + EDCA */
-		temp = tspec_p->SurplusBandwidthAllowance;
-		temp = (UINT16)(temp << ACM_SURPLUS_INT_BIT_NUM);
-		temp = (UINT16)(temp >> ACM_SURPLUS_INT_BIT_NUM);
-		temp = ACM_SurplusFactorDecimalBin2Dec(temp);
-
-		sprintf(extra, "%sSurplus factor = %d.%d<br>", extra,
-			(tspec_p->SurplusBandwidthAllowance>> ACM_SURPLUS_DEC_BIT_NUM),
-			temp);
-		sprintf(extra, "%sMedium Time = %d us<br>", extra, (tspec_p->MediumTime<< 5));
-	} /* End of if */
-} 
-
-#endif
-
-#ifdef WLAN_LED
-
-ULONG WlanLed=1;
-
-INT Set_WlanLed_Proc(
-        IN PRTMP_ADAPTER        pAd,
-        IN PSTRING              arg)
-{
-        WlanLed = (ULONG) simple_strtol(arg, 0, 10);
-        
-	return TRUE;
-}
-#endif
 
